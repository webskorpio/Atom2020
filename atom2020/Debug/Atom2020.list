
Atom2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08003858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  2000009c  080038f4  0002009c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000284  080038f4  00020284  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e46a  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022fa  00000000  00000000  0002e52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b25  00000000  00000000  00030828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a28  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000eb0  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000566f  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003b15  00000000  00000000  0003f297  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042dac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027d8  00000000  00000000  00042e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003750 	.word	0x08003750

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08003750 	.word	0x08003750

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800024c:	20fa      	movs	r0, #250	; 0xfa
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_InitTick+0x3c>)
 8000250:	0080      	lsls	r0, r0, #2
 8000252:	7819      	ldrb	r1, [r3, #0]
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <HAL_InitTick+0x40>)
 800025a:	0001      	movs	r1, r0
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	f7ff ff67 	bl	8000130 <__udivsi3>
 8000262:	f000 fb53 	bl	800090c <HAL_SYSTICK_Config>
 8000266:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000268:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800026a:	2c00      	cmp	r4, #0
 800026c:	d109      	bne.n	8000282 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026e:	2d03      	cmp	r5, #3
 8000270:	d807      	bhi.n	8000282 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000272:	3802      	subs	r0, #2
 8000274:	0022      	movs	r2, r4
 8000276:	0029      	movs	r1, r5
 8000278:	f000 fb0c 	bl	8000894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800027c:	0020      	movs	r0, r4
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <HAL_InitTick+0x44>)
 8000280:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	20000000 	.word	0x20000000
 8000288:	20000034 	.word	0x20000034
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000290:	2310      	movs	r3, #16
 8000292:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_Init+0x1c>)
{
 8000294:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000296:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000298:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800029a:	430b      	orrs	r3, r1
 800029c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800029e:	f7ff ffd3 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 80002a2:	f001 ff21 	bl	80020e8 <HAL_MspInit>
}
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	40022000 	.word	0x40022000

080002b0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002b0:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <HAL_IncTick+0x10>)
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_IncTick+0x14>)
 80002b4:	6811      	ldr	r1, [r2, #0]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	185b      	adds	r3, r3, r1
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	200000f8 	.word	0x200000f8
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_GetTick+0x8>)
 80002ca:	6818      	ldr	r0, [r3, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	200000f8 	.word	0x200000f8

080002d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002d8:	f7ff fff6 	bl	80002c8 <HAL_GetTick>
 80002dc:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002de:	1c63      	adds	r3, r4, #1
 80002e0:	d002      	beq.n	80002e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_Delay+0x20>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002e8:	f7ff ffee 	bl	80002c8 <HAL_GetTick>
 80002ec:	1b40      	subs	r0, r0, r5
 80002ee:	4284      	cmp	r4, r0
 80002f0:	d8fa      	bhi.n	80002e8 <HAL_Delay+0x14>
  {
  }
}
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	20000000 	.word	0x20000000

080002f8 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002f8:	2103      	movs	r1, #3
 80002fa:	6803      	ldr	r3, [r0, #0]
{
 80002fc:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002fe:	689a      	ldr	r2, [r3, #8]
{
 8000300:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000302:	400a      	ands	r2, r1
 8000304:	2a01      	cmp	r2, #1
 8000306:	d001      	beq.n	800030c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000308:	2000      	movs	r0, #0
}
 800030a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030c:	6819      	ldr	r1, [r3, #0]
 800030e:	4211      	tst	r1, r2
 8000310:	d102      	bne.n	8000318 <ADC_Disable+0x20>
 8000312:	68da      	ldr	r2, [r3, #12]
 8000314:	0412      	lsls	r2, r2, #16
 8000316:	d5f7      	bpl.n	8000308 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000318:	2205      	movs	r2, #5
 800031a:	689d      	ldr	r5, [r3, #8]
 800031c:	4015      	ands	r5, r2
 800031e:	2d01      	cmp	r5, #1
 8000320:	d11a      	bne.n	8000358 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8000322:	2202      	movs	r2, #2
 8000324:	6899      	ldr	r1, [r3, #8]
 8000326:	430a      	orrs	r2, r1
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	2203      	movs	r2, #3
 800032c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800032e:	f7ff ffcb 	bl	80002c8 <HAL_GetTick>
 8000332:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	422b      	tst	r3, r5
 800033a:	d0e5      	beq.n	8000308 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800033c:	f7ff ffc4 	bl	80002c8 <HAL_GetTick>
 8000340:	1b80      	subs	r0, r0, r6
 8000342:	2802      	cmp	r0, #2
 8000344:	d9f6      	bls.n	8000334 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000346:	2310      	movs	r3, #16
 8000348:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 800034a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800034c:	4313      	orrs	r3, r2
 800034e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000352:	431d      	orrs	r5, r3
 8000354:	63e5      	str	r5, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000356:	e7d8      	b.n	800030a <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000358:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800035a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800035c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800035e:	4313      	orrs	r3, r2
 8000360:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000364:	4303      	orrs	r3, r0
 8000366:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000368:	e7cf      	b.n	800030a <ADC_Disable+0x12>
	...

0800036c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800036c:	2300      	movs	r3, #0
{
 800036e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000370:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8000372:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000374:	6803      	ldr	r3, [r0, #0]
{
 8000376:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	400a      	ands	r2, r1
 800037c:	2a01      	cmp	r2, #1
 800037e:	d107      	bne.n	8000390 <ADC_Enable+0x24>
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	4211      	tst	r1, r2
 8000384:	d001      	beq.n	800038a <ADC_Enable+0x1e>
  return HAL_OK;
 8000386:	2000      	movs	r0, #0
}
 8000388:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	0412      	lsls	r2, r2, #16
 800038e:	d4fa      	bmi.n	8000386 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000390:	6899      	ldr	r1, [r3, #8]
 8000392:	4a19      	ldr	r2, [pc, #100]	; (80003f8 <ADC_Enable+0x8c>)
 8000394:	4211      	tst	r1, r2
 8000396:	d008      	beq.n	80003aa <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000398:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800039a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800039c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800039e:	4313      	orrs	r3, r2
 80003a0:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003a4:	4303      	orrs	r3, r0
 80003a6:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80003a8:	e7ee      	b.n	8000388 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80003aa:	2201      	movs	r2, #1
 80003ac:	6899      	ldr	r1, [r3, #8]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <ADC_Enable+0x90>)
 80003b4:	4912      	ldr	r1, [pc, #72]	; (8000400 <ADC_Enable+0x94>)
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	f7ff feba 	bl	8000130 <__udivsi3>
 80003bc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d115      	bne.n	80003f0 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80003c4:	f7ff ff80 	bl	80002c8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003c8:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80003ca:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003cc:	6823      	ldr	r3, [r4, #0]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	422b      	tst	r3, r5
 80003d2:	d1d8      	bne.n	8000386 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003d4:	f7ff ff78 	bl	80002c8 <HAL_GetTick>
 80003d8:	1b80      	subs	r0, r0, r6
 80003da:	2802      	cmp	r0, #2
 80003dc:	d9f6      	bls.n	80003cc <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003de:	2310      	movs	r3, #16
 80003e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 80003e2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e4:	4313      	orrs	r3, r2
 80003e6:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003ea:	432b      	orrs	r3, r5
 80003ec:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80003ee:	e7cb      	b.n	8000388 <ADC_Enable+0x1c>
      wait_loop_index--;
 80003f0:	9b01      	ldr	r3, [sp, #4]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	e7e2      	b.n	80003be <ADC_Enable+0x52>
 80003f8:	80000017 	.word	0x80000017
 80003fc:	20000034 	.word	0x20000034
 8000400:	000f4240 	.word	0x000f4240

08000404 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000404:	2204      	movs	r2, #4
 8000406:	6803      	ldr	r3, [r0, #0]
{
 8000408:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800040a:	6899      	ldr	r1, [r3, #8]
{
 800040c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800040e:	4211      	tst	r1, r2
 8000410:	d101      	bne.n	8000416 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000412:	2000      	movs	r0, #0
}
 8000414:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000416:	6899      	ldr	r1, [r3, #8]
 8000418:	4211      	tst	r1, r2
 800041a:	d006      	beq.n	800042a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800041c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800041e:	0792      	lsls	r2, r2, #30
 8000420:	d403      	bmi.n	800042a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000422:	2210      	movs	r2, #16
 8000424:	6899      	ldr	r1, [r3, #8]
 8000426:	430a      	orrs	r2, r1
 8000428:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800042a:	f7ff ff4d 	bl	80002c8 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800042e:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8000430:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000432:	6823      	ldr	r3, [r4, #0]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	422b      	tst	r3, r5
 8000438:	d0eb      	beq.n	8000412 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800043a:	f7ff ff45 	bl	80002c8 <HAL_GetTick>
 800043e:	1b80      	subs	r0, r0, r6
 8000440:	2802      	cmp	r0, #2
 8000442:	d9f6      	bls.n	8000432 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000444:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000446:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000448:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800044a:	4313      	orrs	r3, r2
 800044c:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800044e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000450:	4303      	orrs	r3, r0
 8000452:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000454:	e7de      	b.n	8000414 <ADC_ConversionStop+0x10>
	...

08000458 <HAL_ADC_Init>:
{
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800045c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800045e:	2c00      	cmp	r4, #0
 8000460:	d073      	beq.n	800054a <HAL_ADC_Init+0xf2>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000468:	0022      	movs	r2, r4
 800046a:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 800046c:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800046e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000470:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000472:	f001 fe51 	bl	8002118 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000478:	06db      	lsls	r3, r3, #27
 800047a:	d500      	bpl.n	800047e <HAL_ADC_Init+0x26>
 800047c:	e07a      	b.n	8000574 <HAL_ADC_Init+0x11c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800047e:	2204      	movs	r2, #4
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	6898      	ldr	r0, [r3, #8]
 8000484:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000486:	d000      	beq.n	800048a <HAL_ADC_Init+0x32>
 8000488:	e074      	b.n	8000574 <HAL_ADC_Init+0x11c>
    ADC_STATE_CLR_SET(hadc->State,
 800048a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800048c:	4943      	ldr	r1, [pc, #268]	; (800059c <HAL_ADC_Init+0x144>)
 800048e:	4011      	ands	r1, r2
 8000490:	2202      	movs	r2, #2
 8000492:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000494:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8000496:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	400a      	ands	r2, r1
 800049c:	2a01      	cmp	r2, #1
 800049e:	d000      	beq.n	80004a2 <HAL_ADC_Init+0x4a>
 80004a0:	e06e      	b.n	8000580 <HAL_ADC_Init+0x128>
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	4211      	tst	r1, r2
 80004a6:	d102      	bne.n	80004ae <HAL_ADC_Init+0x56>
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	0412      	lsls	r2, r2, #16
 80004ac:	d568      	bpl.n	8000580 <HAL_ADC_Init+0x128>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	493b      	ldr	r1, [pc, #236]	; (80005a0 <HAL_ADC_Init+0x148>)
 80004b2:	400a      	ands	r2, r1
 80004b4:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004b6:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004b8:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004ba:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80004bc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80004be:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004c2:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80004c4:	3a01      	subs	r2, #1
 80004c6:	1e56      	subs	r6, r2, #1
 80004c8:	41b2      	sbcs	r2, r6
 80004ca:	0316      	lsls	r6, r2, #12
 80004cc:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80004ce:	034f      	lsls	r7, r1, #13
 80004d0:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004d2:	6922      	ldr	r2, [r4, #16]
 80004d4:	432f      	orrs	r7, r5
 80004d6:	2a02      	cmp	r2, #2
 80004d8:	d100      	bne.n	80004dc <HAL_ADC_Init+0x84>
 80004da:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80004dc:	1d62      	adds	r2, r4, #5
 80004de:	7fd2      	ldrb	r2, [r2, #31]
 80004e0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004e2:	433a      	orrs	r2, r7
 80004e4:	4332      	orrs	r2, r6
 80004e6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004e8:	7ee0      	ldrb	r0, [r4, #27]
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d104      	bne.n	80004f8 <HAL_ADC_Init+0xa0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d12c      	bne.n	800054c <HAL_ADC_Init+0xf4>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004f8:	20c2      	movs	r0, #194	; 0xc2
 80004fa:	69e1      	ldr	r1, [r4, #28]
 80004fc:	30ff      	adds	r0, #255	; 0xff
 80004fe:	4281      	cmp	r1, r0
 8000500:	d002      	beq.n	8000508 <HAL_ADC_Init+0xb0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000502:	6a20      	ldr	r0, [r4, #32]
 8000504:	4301      	orrs	r1, r0
 8000506:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000508:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800050a:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800050c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800050e:	4311      	orrs	r1, r2
 8000510:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000512:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000514:	4281      	cmp	r1, r0
 8000516:	d002      	beq.n	800051e <HAL_ADC_Init+0xc6>
 8000518:	1e48      	subs	r0, r1, #1
 800051a:	2806      	cmp	r0, #6
 800051c:	d807      	bhi.n	800052e <HAL_ADC_Init+0xd6>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800051e:	2507      	movs	r5, #7
 8000520:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000522:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000524:	43a8      	bics	r0, r5
 8000526:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000528:	6958      	ldr	r0, [r3, #20]
 800052a:	4301      	orrs	r1, r0
 800052c:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	491c      	ldr	r1, [pc, #112]	; (80005a4 <HAL_ADC_Init+0x14c>)
 8000532:	400b      	ands	r3, r1
 8000534:	429a      	cmp	r2, r3
 8000536:	d111      	bne.n	800055c <HAL_ADC_Init+0x104>
      ADC_CLEAR_ERRORCODE(hadc);
 8000538:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800053a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800053c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800053e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000540:	4393      	bics	r3, r2
 8000542:	001a      	movs	r2, r3
 8000544:	2301      	movs	r3, #1
 8000546:	4313      	orrs	r3, r2
 8000548:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800054a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800054c:	2120      	movs	r1, #32
 800054e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000550:	4329      	orrs	r1, r5
 8000552:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000554:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000556:	4308      	orrs	r0, r1
 8000558:	63e0      	str	r0, [r4, #60]	; 0x3c
 800055a:	e7cd      	b.n	80004f8 <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 800055c:	2212      	movs	r2, #18
 800055e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000560:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000562:	4393      	bics	r3, r2
 8000564:	001a      	movs	r2, r3
 8000566:	2310      	movs	r3, #16
 8000568:	4313      	orrs	r3, r2
 800056a:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800056c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800056e:	4303      	orrs	r3, r0
 8000570:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000572:	e7ea      	b.n	800054a <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000574:	2310      	movs	r3, #16
 8000576:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000578:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800057a:	4313      	orrs	r3, r2
 800057c:	63a3      	str	r3, [r4, #56]	; 0x38
 800057e:	e7e4      	b.n	800054a <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000580:	2118      	movs	r1, #24
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	438a      	bics	r2, r1
 8000586:	68a1      	ldr	r1, [r4, #8]
 8000588:	430a      	orrs	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800058c:	6919      	ldr	r1, [r3, #16]
 800058e:	6862      	ldr	r2, [r4, #4]
 8000590:	0089      	lsls	r1, r1, #2
 8000592:	0889      	lsrs	r1, r1, #2
 8000594:	4311      	orrs	r1, r2
 8000596:	6119      	str	r1, [r3, #16]
 8000598:	e789      	b.n	80004ae <HAL_ADC_Init+0x56>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	fffffefd 	.word	0xfffffefd
 80005a0:	fffe0219 	.word	0xfffe0219
 80005a4:	833fffe7 	.word	0x833fffe7

080005a8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005a8:	6803      	ldr	r3, [r0, #0]
{
 80005aa:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005ac:	689b      	ldr	r3, [r3, #8]
{
 80005ae:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80005b0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005b2:	075b      	lsls	r3, r3, #29
 80005b4:	d41a      	bmi.n	80005ec <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80005b6:	0025      	movs	r5, r4
 80005b8:	3534      	adds	r5, #52	; 0x34
 80005ba:	782b      	ldrb	r3, [r5, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d015      	beq.n	80005ec <HAL_ADC_Start+0x44>
 80005c0:	2301      	movs	r3, #1
 80005c2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005c4:	7e63      	ldrb	r3, [r4, #25]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d111      	bne.n	80005ee <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80005ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80005ce:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80005d0:	401a      	ands	r2, r3
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005d8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80005da:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005dc:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80005de:	63e0      	str	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80005e0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005e2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005e4:	6899      	ldr	r1, [r3, #8]
 80005e6:	3a18      	subs	r2, #24
 80005e8:	430a      	orrs	r2, r1
 80005ea:	609a      	str	r2, [r3, #8]
}
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80005ee:	0020      	movs	r0, r4
 80005f0:	f7ff febc 	bl	800036c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d1f9      	bne.n	80005ec <HAL_ADC_Start+0x44>
 80005f8:	e7e7      	b.n	80005ca <HAL_ADC_Start+0x22>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	fffff0fe 	.word	0xfffff0fe

08000600 <HAL_ADC_Stop>:
{ 
 8000600:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000602:	0006      	movs	r6, r0
 8000604:	3634      	adds	r6, #52	; 0x34
 8000606:	7833      	ldrb	r3, [r6, #0]
{ 
 8000608:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800060a:	2002      	movs	r0, #2
 800060c:	2b01      	cmp	r3, #1
 800060e:	d012      	beq.n	8000636 <HAL_ADC_Stop+0x36>
 8000610:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000612:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8000614:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000616:	f7ff fef5 	bl	8000404 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800061a:	2800      	cmp	r0, #0
 800061c:	d109      	bne.n	8000632 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800061e:	0020      	movs	r0, r4
 8000620:	f7ff fe6a 	bl	80002f8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000624:	2800      	cmp	r0, #0
 8000626:	d104      	bne.n	8000632 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800062a:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_ADC_Stop+0x38>)
 800062c:	4013      	ands	r3, r2
 800062e:	431d      	orrs	r5, r3
 8000630:	63a5      	str	r5, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8000632:	2300      	movs	r3, #0
 8000634:	7033      	strb	r3, [r6, #0]
}
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	fffffefe 	.word	0xfffffefe

0800063c <HAL_ADC_PollForConversion>:
{
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800063e:	6945      	ldr	r5, [r0, #20]
{
 8000640:	0004      	movs	r4, r0
 8000642:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000644:	2d08      	cmp	r5, #8
 8000646:	d00d      	beq.n	8000664 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	2001      	movs	r0, #1
 800064c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800064e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000650:	4203      	tst	r3, r0
 8000652:	d007      	beq.n	8000664 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000654:	2320      	movs	r3, #32
 8000656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000658:	3434      	adds	r4, #52	; 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800065a:	4313      	orrs	r3, r2
 800065c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 800065e:	2300      	movs	r3, #0
 8000660:	7023      	strb	r3, [r4, #0]
}
 8000662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000664:	f7ff fe30 	bl	80002c8 <HAL_GetTick>
 8000668:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800066a:	6823      	ldr	r3, [r4, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	422a      	tst	r2, r5
 8000670:	d023      	beq.n	80006ba <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000676:	0092      	lsls	r2, r2, #2
 8000678:	430a      	orrs	r2, r1
 800067a:	63a2      	str	r2, [r4, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800067c:	22c0      	movs	r2, #192	; 0xc0
 800067e:	68d9      	ldr	r1, [r3, #12]
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	4211      	tst	r1, r2
 8000684:	d112      	bne.n	80006ac <HAL_ADC_PollForConversion+0x70>
 8000686:	7ea2      	ldrb	r2, [r4, #26]
 8000688:	2a00      	cmp	r2, #0
 800068a:	d10f      	bne.n	80006ac <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	0712      	lsls	r2, r2, #28
 8000690:	d50c      	bpl.n	80006ac <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	0752      	lsls	r2, r2, #29
 8000696:	d423      	bmi.n	80006e0 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000698:	210c      	movs	r1, #12
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	438a      	bics	r2, r1
 800069e:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80006a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006a2:	4914      	ldr	r1, [pc, #80]	; (80006f4 <HAL_ADC_PollForConversion+0xb8>)
 80006a4:	4011      	ands	r1, r2
 80006a6:	2201      	movs	r2, #1
 80006a8:	430a      	orrs	r2, r1
 80006aa:	63a2      	str	r2, [r4, #56]	; 0x38
  return HAL_OK;
 80006ac:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80006ae:	7e22      	ldrb	r2, [r4, #24]
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d1d6      	bne.n	8000662 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80006b4:	220c      	movs	r2, #12
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e7d3      	b.n	8000662 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80006ba:	1c72      	adds	r2, r6, #1
 80006bc:	d0d6      	beq.n	800066c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d108      	bne.n	80006d4 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006c2:	2304      	movs	r3, #4
 80006c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 80006c6:	3434      	adds	r4, #52	; 0x34
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006c8:	4313      	orrs	r3, r2
 80006ca:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80006cc:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80006ce:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80006d0:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80006d2:	e7c6      	b.n	8000662 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80006d4:	f7ff fdf8 	bl	80002c8 <HAL_GetTick>
 80006d8:	1bc0      	subs	r0, r0, r7
 80006da:	4286      	cmp	r6, r0
 80006dc:	d2c5      	bcs.n	800066a <HAL_ADC_PollForConversion+0x2e>
 80006de:	e7f0      	b.n	80006c2 <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006e0:	2220      	movs	r2, #32
 80006e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80006e4:	430a      	orrs	r2, r1
 80006e6:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e8:	2201      	movs	r2, #1
 80006ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80006ec:	430a      	orrs	r2, r1
 80006ee:	63e2      	str	r2, [r4, #60]	; 0x3c
 80006f0:	e7dc      	b.n	80006ac <HAL_ADC_PollForConversion+0x70>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	fffffefe 	.word	0xfffffefe

080006f8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80006f8:	6803      	ldr	r3, [r0, #0]
 80006fa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_ADC_ConfigChannel>:
{
 8000700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000702:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000704:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000706:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000708:	3434      	adds	r4, #52	; 0x34
 800070a:	7823      	ldrb	r3, [r4, #0]
{
 800070c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800070e:	2002      	movs	r0, #2
 8000710:	2b01      	cmp	r3, #1
 8000712:	d02b      	beq.n	800076c <HAL_ADC_ConfigChannel+0x6c>
 8000714:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000716:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000718:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800071a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 800071c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800071e:	0740      	lsls	r0, r0, #29
 8000720:	d452      	bmi.n	80007c8 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8000722:	482c      	ldr	r0, [pc, #176]	; (80007d4 <HAL_ADC_ConfigChannel+0xd4>)
 8000724:	684f      	ldr	r7, [r1, #4]
 8000726:	680d      	ldr	r5, [r1, #0]
 8000728:	4287      	cmp	r7, r0
 800072a:	d03b      	beq.n	80007a4 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800072c:	40ab      	lsls	r3, r5
 800072e:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000730:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000732:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000734:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000736:	4338      	orrs	r0, r7
 8000738:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800073a:	429e      	cmp	r6, r3
 800073c:	d00f      	beq.n	800075e <HAL_ADC_ConfigChannel+0x5e>
 800073e:	3e01      	subs	r6, #1
 8000740:	2e06      	cmp	r6, #6
 8000742:	d90c      	bls.n	800075e <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000744:	688b      	ldr	r3, [r1, #8]
 8000746:	2107      	movs	r1, #7
 8000748:	6950      	ldr	r0, [r2, #20]
 800074a:	4008      	ands	r0, r1
 800074c:	4283      	cmp	r3, r0
 800074e:	d006      	beq.n	800075e <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000750:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000752:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000754:	4388      	bics	r0, r1
 8000756:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000758:	6950      	ldr	r0, [r2, #20]
 800075a:	4303      	orrs	r3, r0
 800075c:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800075e:	002b      	movs	r3, r5
 8000760:	3b10      	subs	r3, #16
 8000762:	2b01      	cmp	r3, #1
 8000764:	d903      	bls.n	800076e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000766:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000768:	2300      	movs	r3, #0
 800076a:	7023      	strb	r3, [r4, #0]
}
 800076c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_ADC_ConfigChannel+0xd8>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	2d10      	cmp	r5, #16
 8000776:	d013      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xa0>
 8000778:	03d2      	lsls	r2, r2, #15
 800077a:	430a      	orrs	r2, r1
 800077c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800077e:	2d10      	cmp	r5, #16
 8000780:	d1f1      	bne.n	8000766 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <HAL_ADC_ConfigChannel+0xdc>)
 8000784:	4916      	ldr	r1, [pc, #88]	; (80007e0 <HAL_ADC_ConfigChannel+0xe0>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	f7ff fcd2 	bl	8000130 <__udivsi3>
 800078c:	230a      	movs	r3, #10
 800078e:	4358      	muls	r0, r3
 8000790:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000792:	9b01      	ldr	r3, [sp, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0e6      	beq.n	8000766 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000798:	9b01      	ldr	r3, [sp, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	e7f8      	b.n	8000792 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007a0:	0412      	lsls	r2, r2, #16
 80007a2:	e7ea      	b.n	800077a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007a4:	40ab      	lsls	r3, r5
 80007a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80007a8:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007aa:	002b      	movs	r3, r5
 80007ac:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007ae:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d8d8      	bhi.n	8000766 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_ADC_ConfigChannel+0xd8>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	2d10      	cmp	r5, #16
 80007ba:	d003      	beq.n	80007c4 <HAL_ADC_ConfigChannel+0xc4>
 80007bc:	4909      	ldr	r1, [pc, #36]	; (80007e4 <HAL_ADC_ConfigChannel+0xe4>)
 80007be:	400a      	ands	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e7d0      	b.n	8000766 <HAL_ADC_ConfigChannel+0x66>
 80007c4:	4908      	ldr	r1, [pc, #32]	; (80007e8 <HAL_ADC_ConfigChannel+0xe8>)
 80007c6:	e7fa      	b.n	80007be <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c8:	2220      	movs	r2, #32
 80007ca:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80007cc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ce:	430a      	orrs	r2, r1
 80007d0:	63aa      	str	r2, [r5, #56]	; 0x38
 80007d2:	e7c9      	b.n	8000768 <HAL_ADC_ConfigChannel+0x68>
 80007d4:	00001001 	.word	0x00001001
 80007d8:	40012708 	.word	0x40012708
 80007dc:	20000034 	.word	0x20000034
 80007e0:	000f4240 	.word	0x000f4240
 80007e4:	ffbfffff 	.word	0xffbfffff
 80007e8:	ff7fffff 	.word	0xff7fffff

080007ec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80007ee:	0006      	movs	r6, r0
 80007f0:	3634      	adds	r6, #52	; 0x34
 80007f2:	7833      	ldrb	r3, [r6, #0]
{
 80007f4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80007f6:	2002      	movs	r0, #2
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d042      	beq.n	8000882 <HAL_ADCEx_Calibration_Start+0x96>
 80007fc:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80007fe:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8000800:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	400a      	ands	r2, r1
 8000808:	2a01      	cmp	r2, #1
 800080a:	d105      	bne.n	8000818 <HAL_ADCEx_Calibration_Start+0x2c>
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	4211      	tst	r1, r2
 8000810:	d138      	bne.n	8000884 <HAL_ADCEx_Calibration_Start+0x98>
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	0412      	lsls	r2, r2, #16
 8000816:	d435      	bmi.n	8000884 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800081a:	491d      	ldr	r1, [pc, #116]	; (8000890 <HAL_ADCEx_Calibration_Start+0xa4>)
 800081c:	4011      	ands	r1, r2
 800081e:	2202      	movs	r2, #2
 8000820:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000822:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8000824:	63a2      	str	r2, [r4, #56]	; 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000826:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	438a      	bics	r2, r1
 800082c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	6899      	ldr	r1, [r3, #8]
 8000832:	0612      	lsls	r2, r2, #24
 8000834:	430a      	orrs	r2, r1
 8000836:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000838:	f7ff fd46 	bl	80002c8 <HAL_GetTick>
 800083c:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	2a00      	cmp	r2, #0
 8000844:	db0e      	blt.n	8000864 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000846:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000848:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800084a:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800084c:	430d      	orrs	r5, r1
 800084e:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000852:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000854:	4393      	bics	r3, r2
 8000856:	001a      	movs	r2, r3
 8000858:	2301      	movs	r3, #1
 800085a:	4313      	orrs	r3, r2
 800085c:	63a3      	str	r3, [r4, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800085e:	2300      	movs	r3, #0
 8000860:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8000862:	e00e      	b.n	8000882 <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000864:	f7ff fd30 	bl	80002c8 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2802      	cmp	r0, #2
 800086c:	d9e7      	bls.n	800083e <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 800086e:	2212      	movs	r2, #18
 8000870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8000872:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000874:	4393      	bics	r3, r2
 8000876:	001a      	movs	r2, r3
 8000878:	2310      	movs	r3, #16
 800087a:	4313      	orrs	r3, r2
 800087c:	63a3      	str	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 800087e:	2300      	movs	r3, #0
 8000880:	7033      	strb	r3, [r6, #0]
}
 8000882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000884:	2320      	movs	r3, #32
 8000886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000888:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800088a:	4313      	orrs	r3, r2
 800088c:	63a3      	str	r3, [r4, #56]	; 0x38
 800088e:	e7e6      	b.n	800085e <HAL_ADCEx_Calibration_Start+0x72>
 8000890:	fffffefd 	.word	0xfffffefd

08000894 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000898:	2800      	cmp	r0, #0
 800089a:	db12      	blt.n	80008c2 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	0883      	lsrs	r3, r0, #2
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_NVIC_SetPriority+0x58>)
 80008a0:	2403      	movs	r4, #3
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	189b      	adds	r3, r3, r2
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	4020      	ands	r0, r4
 80008aa:	40a0      	lsls	r0, r4
 80008ac:	0014      	movs	r4, r2
 80008ae:	25c0      	movs	r5, #192	; 0xc0
 80008b0:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	4011      	ands	r1, r2
 80008b4:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b6:	00ad      	lsls	r5, r5, #2
 80008b8:	595e      	ldr	r6, [r3, r5]
 80008ba:	43a6      	bics	r6, r4
 80008bc:	4331      	orrs	r1, r6
 80008be:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c2:	2403      	movs	r4, #3
 80008c4:	230f      	movs	r3, #15
 80008c6:	b2c0      	uxtb	r0, r0
 80008c8:	4003      	ands	r3, r0
 80008ca:	4020      	ands	r0, r4
 80008cc:	40a0      	lsls	r0, r4
 80008ce:	34fc      	adds	r4, #252	; 0xfc
 80008d0:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d2:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	3b08      	subs	r3, #8
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <HAL_NVIC_SetPriority+0x5c>)
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	189b      	adds	r3, r3, r2
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	43aa      	bics	r2, r5
 80008e6:	4311      	orrs	r1, r2
 80008e8:	61d9      	str	r1, [r3, #28]
 80008ea:	e7e9      	b.n	80008c0 <HAL_NVIC_SetPriority+0x2c>
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008f4:	2800      	cmp	r0, #0
 80008f6:	db05      	blt.n	8000904 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f8:	231f      	movs	r3, #31
 80008fa:	4018      	ands	r0, r3
 80008fc:	3b1e      	subs	r3, #30
 80008fe:	4083      	lsls	r3, r0
 8000900:	4a01      	ldr	r2, [pc, #4]	; (8000908 <HAL_NVIC_EnableIRQ+0x14>)
 8000902:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	e000e100 	.word	0xe000e100

0800090c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_SYSTICK_Config+0x28>)
 800090e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000910:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000912:	4293      	cmp	r3, r2
 8000914:	d80d      	bhi.n	8000932 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000916:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	6a03      	ldr	r3, [r0, #32]
 8000920:	0609      	lsls	r1, r1, #24
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	430b      	orrs	r3, r1
 8000928:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000930:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000932:	4770      	bx	lr
 8000934:	00ffffff 	.word	0x00ffffff
 8000938:	e000e010 	.word	0xe000e010
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000940:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000942:	680b      	ldr	r3, [r1, #0]
{ 
 8000944:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 8000948:	2300      	movs	r3, #0
{ 
 800094a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094c:	9a02      	ldr	r2, [sp, #8]
 800094e:	40da      	lsrs	r2, r3
 8000950:	d101      	bne.n	8000956 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000952:	b007      	add	sp, #28
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000956:	2201      	movs	r2, #1
 8000958:	409a      	lsls	r2, r3
 800095a:	9203      	str	r2, [sp, #12]
 800095c:	9903      	ldr	r1, [sp, #12]
 800095e:	9a02      	ldr	r2, [sp, #8]
 8000960:	400a      	ands	r2, r1
 8000962:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_Init+0x28>
 8000966:	e08c      	b.n	8000a82 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000968:	9a01      	ldr	r2, [sp, #4]
 800096a:	2110      	movs	r1, #16
 800096c:	6852      	ldr	r2, [r2, #4]
 800096e:	0016      	movs	r6, r2
 8000970:	438e      	bics	r6, r1
 8000972:	2e02      	cmp	r6, #2
 8000974:	d10e      	bne.n	8000994 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000976:	2507      	movs	r5, #7
 8000978:	401d      	ands	r5, r3
 800097a:	00ad      	lsls	r5, r5, #2
 800097c:	3901      	subs	r1, #1
 800097e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000980:	08dc      	lsrs	r4, r3, #3
 8000982:	00a4      	lsls	r4, r4, #2
 8000984:	1904      	adds	r4, r0, r4
 8000986:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000988:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800098a:	9901      	ldr	r1, [sp, #4]
 800098c:	6909      	ldr	r1, [r1, #16]
 800098e:	40a9      	lsls	r1, r5
 8000990:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000992:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000994:	2403      	movs	r4, #3
 8000996:	005f      	lsls	r7, r3, #1
 8000998:	40bc      	lsls	r4, r7
 800099a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800099c:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009a0:	4025      	ands	r5, r4
 80009a2:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a4:	2503      	movs	r5, #3
 80009a6:	4015      	ands	r5, r2
 80009a8:	40bd      	lsls	r5, r7
 80009aa:	4661      	mov	r1, ip
 80009ac:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80009ae:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b0:	2e01      	cmp	r6, #1
 80009b2:	d80f      	bhi.n	80009d4 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 80009b6:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b8:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ba:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	40bd      	lsls	r5, r7
 80009be:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80009c0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80009c2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c4:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009c6:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c8:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ca:	2101      	movs	r1, #1
 80009cc:	400d      	ands	r5, r1
 80009ce:	409d      	lsls	r5, r3
 80009d0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80009d2:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80009d4:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009d6:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009d8:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009da:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009de:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e0:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009e2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80009e4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e6:	420a      	tst	r2, r1
 80009e8:	d04b      	beq.n	8000a82 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2101      	movs	r1, #1
 80009ec:	4c26      	ldr	r4, [pc, #152]	; (8000a88 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ee:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f0:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f2:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f4:	430d      	orrs	r5, r1
 80009f6:	61a5      	str	r5, [r4, #24]
 80009f8:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80009fa:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fc:	400c      	ands	r4, r1
 80009fe:	9405      	str	r4, [sp, #20]
 8000a00:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a02:	240f      	movs	r4, #15
 8000a04:	4921      	ldr	r1, [pc, #132]	; (8000a8c <HAL_GPIO_Init+0x14c>)
 8000a06:	00ad      	lsls	r5, r5, #2
 8000a08:	00b6      	lsls	r6, r6, #2
 8000a0a:	186d      	adds	r5, r5, r1
 8000a0c:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a0e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a10:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a12:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a14:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a16:	2400      	movs	r4, #0
 8000a18:	4288      	cmp	r0, r1
 8000a1a:	d00c      	beq.n	8000a36 <HAL_GPIO_Init+0xf6>
 8000a1c:	491c      	ldr	r1, [pc, #112]	; (8000a90 <HAL_GPIO_Init+0x150>)
 8000a1e:	3401      	adds	r4, #1
 8000a20:	4288      	cmp	r0, r1
 8000a22:	d008      	beq.n	8000a36 <HAL_GPIO_Init+0xf6>
 8000a24:	491b      	ldr	r1, [pc, #108]	; (8000a94 <HAL_GPIO_Init+0x154>)
 8000a26:	3401      	adds	r4, #1
 8000a28:	4288      	cmp	r0, r1
 8000a2a:	d004      	beq.n	8000a36 <HAL_GPIO_Init+0xf6>
 8000a2c:	491a      	ldr	r1, [pc, #104]	; (8000a98 <HAL_GPIO_Init+0x158>)
 8000a2e:	3403      	adds	r4, #3
 8000a30:	4288      	cmp	r0, r1
 8000a32:	d100      	bne.n	8000a36 <HAL_GPIO_Init+0xf6>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 8000a38:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a3a:	433c      	orrs	r4, r7
          temp |= iocurrent;
 8000a3c:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3e:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000a40:	4c16      	ldr	r4, [pc, #88]	; (8000a9c <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000a42:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000a44:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 8000a46:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a48:	03d1      	lsls	r1, r2, #15
 8000a4a:	d401      	bmi.n	8000a50 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 8000a4c:	003e      	movs	r6, r7
 8000a4e:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000a50:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000a52:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000a54:	9e00      	ldr	r6, [sp, #0]
 8000a56:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a58:	0391      	lsls	r1, r2, #14
 8000a5a:	d401      	bmi.n	8000a60 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000a5c:	003e      	movs	r6, r7
 8000a5e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000a60:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000a62:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000a64:	9e00      	ldr	r6, [sp, #0]
 8000a66:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	02d1      	lsls	r1, r2, #11
 8000a6a:	d401      	bmi.n	8000a70 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8000a6c:	003e      	movs	r6, r7
 8000a6e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000a70:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000a72:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000a74:	9f00      	ldr	r7, [sp, #0]
 8000a76:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a78:	0292      	lsls	r2, r2, #10
 8000a7a:	d401      	bmi.n	8000a80 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8000a7c:	402e      	ands	r6, r5
 8000a7e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000a80:	60e7      	str	r7, [r4, #12]
    position++;
 8000a82:	3301      	adds	r3, #1
 8000a84:	e762      	b.n	800094c <HAL_GPIO_Init+0xc>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	48000400 	.word	0x48000400
 8000a94:	48000800 	.word	0x48000800
 8000a98:	48000c00 	.word	0x48000c00
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aa0:	6900      	ldr	r0, [r0, #16]
 8000aa2:	4008      	ands	r0, r1
 8000aa4:	1e41      	subs	r1, r0, #1
 8000aa6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000aa8:	b2c0      	uxtb	r0, r0
  }
 8000aaa:	4770      	bx	lr

08000aac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ab0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000ab6:	e7fc      	b.n	8000ab2 <HAL_GPIO_WritePin+0x6>

08000ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	0004      	movs	r4, r0
 8000abc:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d102      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ac2:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000ac4:	b005      	add	sp, #20
 8000ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	07db      	lsls	r3, r3, #31
 8000acc:	d42e      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	079b      	lsls	r3, r3, #30
 8000ad2:	d47e      	bmi.n	8000bd2 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	071b      	lsls	r3, r3, #28
 8000ad8:	d500      	bpl.n	8000adc <HAL_RCC_OscConfig+0x24>
 8000ada:	e0ba      	b.n	8000c52 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	075b      	lsls	r3, r3, #29
 8000ae0:	d500      	bpl.n	8000ae4 <HAL_RCC_OscConfig+0x2c>
 8000ae2:	e0dd      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	06db      	lsls	r3, r3, #27
 8000ae8:	d51a      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000aea:	6962      	ldr	r2, [r4, #20]
 8000aec:	4db4      	ldr	r5, [pc, #720]	; (8000dc0 <HAL_RCC_OscConfig+0x308>)
 8000aee:	2304      	movs	r3, #4
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	d000      	beq.n	8000af6 <HAL_RCC_OscConfig+0x3e>
 8000af4:	e149      	b.n	8000d8a <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000af6:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000af8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000afa:	430b      	orrs	r3, r1
 8000afc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000afe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b00:	431a      	orrs	r2, r3
 8000b02:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b04:	f7ff fbe0 	bl	80002c8 <HAL_GetTick>
 8000b08:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b0c:	4233      	tst	r3, r6
 8000b0e:	d100      	bne.n	8000b12 <HAL_RCC_OscConfig+0x5a>
 8000b10:	e134      	b.n	8000d7c <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b12:	21f8      	movs	r1, #248	; 0xf8
 8000b14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b16:	69a3      	ldr	r3, [r4, #24]
 8000b18:	438a      	bics	r2, r1
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b20:	6a23      	ldr	r3, [r4, #32]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d000      	beq.n	8000b28 <HAL_RCC_OscConfig+0x70>
 8000b26:	e157      	b.n	8000dd8 <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e7cb      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	4da4      	ldr	r5, [pc, #656]	; (8000dc0 <HAL_RCC_OscConfig+0x308>)
 8000b30:	686a      	ldr	r2, [r5, #4]
 8000b32:	400a      	ands	r2, r1
 8000b34:	2a04      	cmp	r2, #4
 8000b36:	d006      	beq.n	8000b46 <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b38:	686b      	ldr	r3, [r5, #4]
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d109      	bne.n	8000b54 <HAL_RCC_OscConfig+0x9c>
 8000b40:	686b      	ldr	r3, [r5, #4]
 8000b42:	03db      	lsls	r3, r3, #15
 8000b44:	d506      	bpl.n	8000b54 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	039b      	lsls	r3, r3, #14
 8000b4a:	d5c0      	bpl.n	8000ace <HAL_RCC_OscConfig+0x16>
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1bd      	bne.n	8000ace <HAL_RCC_OscConfig+0x16>
 8000b52:	e7b6      	b.n	8000ac2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b54:	6863      	ldr	r3, [r4, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d113      	bne.n	8000b82 <HAL_RCC_OscConfig+0xca>
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	682a      	ldr	r2, [r5, #0]
 8000b5e:	025b      	lsls	r3, r3, #9
 8000b60:	4313      	orrs	r3, r2
 8000b62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b64:	f7ff fbb0 	bl	80002c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b68:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6c:	02b6      	lsls	r6, r6, #10
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	4233      	tst	r3, r6
 8000b72:	d1ac      	bne.n	8000ace <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fba8 	bl	80002c8 <HAL_GetTick>
 8000b78:	1bc0      	subs	r0, r0, r7
 8000b7a:	2864      	cmp	r0, #100	; 0x64
 8000b7c:	d9f7      	bls.n	8000b6e <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000b7e:	2003      	movs	r0, #3
 8000b80:	e7a0      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d115      	bne.n	8000bb2 <HAL_RCC_OscConfig+0xfa>
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	4a8e      	ldr	r2, [pc, #568]	; (8000dc4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b8a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	602b      	str	r3, [r5, #0]
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	4a8d      	ldr	r2, [pc, #564]	; (8000dc8 <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b94:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	4013      	ands	r3, r2
 8000b98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fb95 	bl	80002c8 <HAL_GetTick>
 8000b9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba0:	682b      	ldr	r3, [r5, #0]
 8000ba2:	4233      	tst	r3, r6
 8000ba4:	d093      	beq.n	8000ace <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba6:	f7ff fb8f 	bl	80002c8 <HAL_GetTick>
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	2864      	cmp	r0, #100	; 0x64
 8000bae:	d9f7      	bls.n	8000ba0 <HAL_RCC_OscConfig+0xe8>
 8000bb0:	e7e5      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	d105      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x10a>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	682a      	ldr	r2, [r5, #0]
 8000bba:	02db      	lsls	r3, r3, #11
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	602b      	str	r3, [r5, #0]
 8000bc0:	e7cb      	b.n	8000b5a <HAL_RCC_OscConfig+0xa2>
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	4a7f      	ldr	r2, [pc, #508]	; (8000dc4 <HAL_RCC_OscConfig+0x30c>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	602b      	str	r3, [r5, #0]
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	4a7e      	ldr	r2, [pc, #504]	; (8000dc8 <HAL_RCC_OscConfig+0x310>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	e7c7      	b.n	8000b62 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	4d7a      	ldr	r5, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x308>)
 8000bd6:	686b      	ldr	r3, [r5, #4]
 8000bd8:	4213      	tst	r3, r2
 8000bda:	d006      	beq.n	8000bea <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bdc:	686b      	ldr	r3, [r5, #4]
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b08      	cmp	r3, #8
 8000be2:	d111      	bne.n	8000c08 <HAL_RCC_OscConfig+0x150>
 8000be4:	686b      	ldr	r3, [r5, #4]
 8000be6:	03db      	lsls	r3, r3, #15
 8000be8:	d40e      	bmi.n	8000c08 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	079b      	lsls	r3, r3, #30
 8000bee:	d503      	bpl.n	8000bf8 <HAL_RCC_OscConfig+0x140>
 8000bf0:	68e3      	ldr	r3, [r4, #12]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d000      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x140>
 8000bf6:	e764      	b.n	8000ac2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf8:	21f8      	movs	r1, #248	; 0xf8
 8000bfa:	682a      	ldr	r2, [r5, #0]
 8000bfc:	6923      	ldr	r3, [r4, #16]
 8000bfe:	438a      	bics	r2, r1
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	602b      	str	r3, [r5, #0]
 8000c06:	e765      	b.n	8000ad4 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c08:	68e2      	ldr	r2, [r4, #12]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d00f      	beq.n	8000c30 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000c10:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c12:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c14:	4313      	orrs	r3, r2
 8000c16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c18:	f7ff fb56 	bl	80002c8 <HAL_GetTick>
 8000c1c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	4233      	tst	r3, r6
 8000c22:	d1e9      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c24:	f7ff fb50 	bl	80002c8 <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	2802      	cmp	r0, #2
 8000c2c:	d9f7      	bls.n	8000c1e <HAL_RCC_OscConfig+0x166>
 8000c2e:	e7a6      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000c30:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c32:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c34:	439a      	bics	r2, r3
 8000c36:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000c38:	f7ff fb46 	bl	80002c8 <HAL_GetTick>
 8000c3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	4233      	tst	r3, r6
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x18e>
 8000c44:	e746      	b.n	8000ad4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c46:	f7ff fb3f 	bl	80002c8 <HAL_GetTick>
 8000c4a:	1bc0      	subs	r0, r0, r7
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d9f6      	bls.n	8000c3e <HAL_RCC_OscConfig+0x186>
 8000c50:	e795      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c52:	69e2      	ldr	r2, [r4, #28]
 8000c54:	2301      	movs	r3, #1
 8000c56:	4d5a      	ldr	r5, [pc, #360]	; (8000dc0 <HAL_RCC_OscConfig+0x308>)
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	d010      	beq.n	8000c7e <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000c5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c60:	4313      	orrs	r3, r2
 8000c62:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c64:	f7ff fb30 	bl	80002c8 <HAL_GetTick>
 8000c68:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c6c:	4233      	tst	r3, r6
 8000c6e:	d000      	beq.n	8000c72 <HAL_RCC_OscConfig+0x1ba>
 8000c70:	e734      	b.n	8000adc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c72:	f7ff fb29 	bl	80002c8 <HAL_GetTick>
 8000c76:	1bc0      	subs	r0, r0, r7
 8000c78:	2802      	cmp	r0, #2
 8000c7a:	d9f6      	bls.n	8000c6a <HAL_RCC_OscConfig+0x1b2>
 8000c7c:	e77f      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000c7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c80:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c82:	439a      	bics	r2, r3
 8000c84:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c86:	f7ff fb1f 	bl	80002c8 <HAL_GetTick>
 8000c8a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c8e:	4233      	tst	r3, r6
 8000c90:	d100      	bne.n	8000c94 <HAL_RCC_OscConfig+0x1dc>
 8000c92:	e723      	b.n	8000adc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c94:	f7ff fb18 	bl	80002c8 <HAL_GetTick>
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9f6      	bls.n	8000c8c <HAL_RCC_OscConfig+0x1d4>
 8000c9e:	e76e      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ca2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca4:	4d46      	ldr	r5, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x308>)
 8000ca6:	0552      	lsls	r2, r2, #21
 8000ca8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000caa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cac:	4213      	tst	r3, r2
 8000cae:	d108      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb0:	69eb      	ldr	r3, [r5, #28]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61eb      	str	r3, [r5, #28]
 8000cb6:	69eb      	ldr	r3, [r5, #28]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	9303      	str	r3, [sp, #12]
 8000cbc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc2:	2780      	movs	r7, #128	; 0x80
 8000cc4:	4e41      	ldr	r6, [pc, #260]	; (8000dcc <HAL_RCC_OscConfig+0x314>)
 8000cc6:	007f      	lsls	r7, r7, #1
 8000cc8:	6833      	ldr	r3, [r6, #0]
 8000cca:	423b      	tst	r3, r7
 8000ccc:	d006      	beq.n	8000cdc <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cce:	68a3      	ldr	r3, [r4, #8]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d113      	bne.n	8000cfc <HAL_RCC_OscConfig+0x244>
 8000cd4:	6a2a      	ldr	r2, [r5, #32]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	622b      	str	r3, [r5, #32]
 8000cda:	e030      	b.n	8000d3e <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cdc:	6833      	ldr	r3, [r6, #0]
 8000cde:	433b      	orrs	r3, r7
 8000ce0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ce2:	f7ff faf1 	bl	80002c8 <HAL_GetTick>
 8000ce6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	423b      	tst	r3, r7
 8000cec:	d1ef      	bne.n	8000cce <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cee:	f7ff faeb 	bl	80002c8 <HAL_GetTick>
 8000cf2:	9b01      	ldr	r3, [sp, #4]
 8000cf4:	1ac0      	subs	r0, r0, r3
 8000cf6:	2864      	cmp	r0, #100	; 0x64
 8000cf8:	d9f6      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x230>
 8000cfa:	e740      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
 8000cfc:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d114      	bne.n	8000d2c <HAL_RCC_OscConfig+0x274>
 8000d02:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d04:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d06:	4393      	bics	r3, r2
 8000d08:	622b      	str	r3, [r5, #32]
 8000d0a:	6a2b      	ldr	r3, [r5, #32]
 8000d0c:	3203      	adds	r2, #3
 8000d0e:	4393      	bics	r3, r2
 8000d10:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d12:	f7ff fad9 	bl	80002c8 <HAL_GetTick>
 8000d16:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d18:	6a2b      	ldr	r3, [r5, #32]
 8000d1a:	423b      	tst	r3, r7
 8000d1c:	d025      	beq.n	8000d6a <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fad3 	bl	80002c8 <HAL_GetTick>
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_RCC_OscConfig+0x318>)
 8000d24:	1b80      	subs	r0, r0, r6
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d9f6      	bls.n	8000d18 <HAL_RCC_OscConfig+0x260>
 8000d2a:	e728      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d10b      	bne.n	8000d48 <HAL_RCC_OscConfig+0x290>
 8000d30:	6a29      	ldr	r1, [r5, #32]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	430b      	orrs	r3, r1
 8000d36:	622b      	str	r3, [r5, #32]
 8000d38:	6a2b      	ldr	r3, [r5, #32]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fac3 	bl	80002c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d42:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d44:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d46:	e00d      	b.n	8000d64 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d48:	6a2b      	ldr	r3, [r5, #32]
 8000d4a:	4393      	bics	r3, r2
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	622b      	str	r3, [r5, #32]
 8000d50:	6a2b      	ldr	r3, [r5, #32]
 8000d52:	4393      	bics	r3, r2
 8000d54:	e7c0      	b.n	8000cd8 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d56:	f7ff fab7 	bl	80002c8 <HAL_GetTick>
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_RCC_OscConfig+0x318>)
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d900      	bls.n	8000d64 <HAL_RCC_OscConfig+0x2ac>
 8000d62:	e70c      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d64:	6a2b      	ldr	r3, [r5, #32]
 8000d66:	423b      	tst	r3, r7
 8000d68:	d0f5      	beq.n	8000d56 <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000d6a:	9b00      	ldr	r3, [sp, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d000      	beq.n	8000d72 <HAL_RCC_OscConfig+0x2ba>
 8000d70:	e6b8      	b.n	8000ae4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d72:	69eb      	ldr	r3, [r5, #28]
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_RCC_OscConfig+0x31c>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	61eb      	str	r3, [r5, #28]
 8000d7a:	e6b3      	b.n	8000ae4 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d7c:	f7ff faa4 	bl	80002c8 <HAL_GetTick>
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d800      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x2d0>
 8000d86:	e6c0      	b.n	8000b0a <HAL_RCC_OscConfig+0x52>
 8000d88:	e6f9      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d8a:	3205      	adds	r2, #5
 8000d8c:	d103      	bne.n	8000d96 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d8e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d90:	439a      	bics	r2, r3
 8000d92:	636a      	str	r2, [r5, #52]	; 0x34
 8000d94:	e6bd      	b.n	8000b12 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d96:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d98:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d9a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d9c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d9e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000da0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000da2:	4393      	bics	r3, r2
 8000da4:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000da6:	f7ff fa8f 	bl	80002c8 <HAL_GetTick>
 8000daa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000dac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dae:	4233      	tst	r3, r6
 8000db0:	d100      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2fc>
 8000db2:	e6b5      	b.n	8000b20 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000db4:	f7ff fa88 	bl	80002c8 <HAL_GetTick>
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCC_OscConfig+0x2f4>
 8000dbe:	e6de      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	fffeffff 	.word	0xfffeffff
 8000dc8:	fffbffff 	.word	0xfffbffff
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	00001388 	.word	0x00001388
 8000dd4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd8:	200c      	movs	r0, #12
 8000dda:	4a35      	ldr	r2, [pc, #212]	; (8000eb0 <HAL_RCC_OscConfig+0x3f8>)
 8000ddc:	6851      	ldr	r1, [r2, #4]
 8000dde:	0015      	movs	r5, r2
 8000de0:	4001      	ands	r1, r0
 8000de2:	2908      	cmp	r1, #8
 8000de4:	d047      	beq.n	8000e76 <HAL_RCC_OscConfig+0x3be>
 8000de6:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d132      	bne.n	8000e52 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8000dec:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dee:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000df0:	4013      	ands	r3, r2
 8000df2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000df4:	f7ff fa68 	bl	80002c8 <HAL_GetTick>
 8000df8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfa:	04b6      	lsls	r6, r6, #18
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	4233      	tst	r3, r6
 8000e00:	d121      	bne.n	8000e46 <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e02:	220f      	movs	r2, #15
 8000e04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e06:	4393      	bics	r3, r2
 8000e08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e12:	686a      	ldr	r2, [r5, #4]
 8000e14:	430b      	orrs	r3, r1
 8000e16:	4928      	ldr	r1, [pc, #160]	; (8000eb8 <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e18:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	682a      	ldr	r2, [r5, #0]
 8000e24:	045b      	lsls	r3, r3, #17
 8000e26:	4313      	orrs	r3, r2
 8000e28:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fa4d 	bl	80002c8 <HAL_GetTick>
 8000e2e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e30:	04a4      	lsls	r4, r4, #18
 8000e32:	682b      	ldr	r3, [r5, #0]
 8000e34:	4223      	tst	r3, r4
 8000e36:	d000      	beq.n	8000e3a <HAL_RCC_OscConfig+0x382>
 8000e38:	e676      	b.n	8000b28 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3a:	f7ff fa45 	bl	80002c8 <HAL_GetTick>
 8000e3e:	1b80      	subs	r0, r0, r6
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f6      	bls.n	8000e32 <HAL_RCC_OscConfig+0x37a>
 8000e44:	e69b      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e46:	f7ff fa3f 	bl	80002c8 <HAL_GetTick>
 8000e4a:	1bc0      	subs	r0, r0, r7
 8000e4c:	2802      	cmp	r0, #2
 8000e4e:	d9d5      	bls.n	8000dfc <HAL_RCC_OscConfig+0x344>
 8000e50:	e695      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8000e52:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e54:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000e56:	4013      	ands	r3, r2
 8000e58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fa35 	bl	80002c8 <HAL_GetTick>
 8000e5e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e60:	04a4      	lsls	r4, r4, #18
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	4223      	tst	r3, r4
 8000e66:	d100      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3b2>
 8000e68:	e65e      	b.n	8000b28 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6a:	f7ff fa2d 	bl	80002c8 <HAL_GetTick>
 8000e6e:	1b80      	subs	r0, r0, r6
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x3aa>
 8000e74:	e683      	b.n	8000b7e <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 8000e76:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d100      	bne.n	8000e7e <HAL_RCC_OscConfig+0x3c6>
 8000e7c:	e622      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e7e:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8000e80:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000e84:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8000e86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e88:	4019      	ands	r1, r3
        return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8c:	42a9      	cmp	r1, r5
 8000e8e:	d000      	beq.n	8000e92 <HAL_RCC_OscConfig+0x3da>
 8000e90:	e618      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e92:	210f      	movs	r1, #15
 8000e94:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e98:	428a      	cmp	r2, r1
 8000e9a:	d000      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3e6>
 8000e9c:	e612      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e9e:	20f0      	movs	r0, #240	; 0xf0
 8000ea0:	0380      	lsls	r0, r0, #14
 8000ea2:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ea4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ea6:	1a1b      	subs	r3, r3, r0
 8000ea8:	1e58      	subs	r0, r3, #1
 8000eaa:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	e609      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	feffffff 	.word	0xfeffffff
 8000eb8:	ffc2ffff 	.word	0xffc2ffff

08000ebc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ebc:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ebe:	4c14      	ldr	r4, [pc, #80]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000ec0:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	0021      	movs	r1, r4
 8000ec6:	4668      	mov	r0, sp
 8000ec8:	f001 facc 	bl	8002464 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000ecc:	0021      	movs	r1, r4
 8000ece:	ad04      	add	r5, sp, #16
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	3110      	adds	r1, #16
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	f001 fac5 	bl	8002464 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eda:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000edc:	4e0d      	ldr	r6, [pc, #52]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ede:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	2a08      	cmp	r2, #8
 8000ee4:	d111      	bne.n	8000f0a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	466a      	mov	r2, sp
 8000eea:	0c99      	lsrs	r1, r3, #18
 8000eec:	4001      	ands	r1, r0
 8000eee:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ef0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000ef2:	4002      	ands	r2, r0
 8000ef4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ef6:	03db      	lsls	r3, r3, #15
 8000ef8:	d505      	bpl.n	8000f06 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000efc:	f7ff f918 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f00:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f02:	b008      	add	sp, #32
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_RCC_GetSysClockFreq+0x60>)
 8000f08:	e7fa      	b.n	8000f00 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000f0c:	e7f9      	b.n	8000f02 <HAL_RCC_GetSysClockFreq+0x46>
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	08003768 	.word	0x08003768
 8000f14:	40021000 	.word	0x40021000
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	003d0900 	.word	0x003d0900

08000f20 <HAL_RCC_ClockConfig>:
{
 8000f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f22:	0005      	movs	r5, r0
 8000f24:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
}
 8000f2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4c37      	ldr	r4, [pc, #220]	; (8001010 <HAL_RCC_ClockConfig+0xf0>)
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	4013      	ands	r3, r2
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d31c      	bcc.n	8000f74 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f3a:	6829      	ldr	r1, [r5, #0]
 8000f3c:	078b      	lsls	r3, r1, #30
 8000f3e:	d422      	bmi.n	8000f86 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f40:	07cb      	lsls	r3, r1, #31
 8000f42:	d42f      	bmi.n	8000fa4 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f44:	2301      	movs	r3, #1
 8000f46:	6822      	ldr	r2, [r4, #0]
 8000f48:	401a      	ands	r2, r3
 8000f4a:	4297      	cmp	r7, r2
 8000f4c:	d351      	bcc.n	8000ff2 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4e:	682b      	ldr	r3, [r5, #0]
 8000f50:	4c30      	ldr	r4, [pc, #192]	; (8001014 <HAL_RCC_ClockConfig+0xf4>)
 8000f52:	075b      	lsls	r3, r3, #29
 8000f54:	d454      	bmi.n	8001000 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f56:	f7ff ffb1 	bl	8000ebc <HAL_RCC_GetSysClockFreq>
 8000f5a:	6863      	ldr	r3, [r4, #4]
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_RCC_ClockConfig+0xf8>)
 8000f5e:	061b      	lsls	r3, r3, #24
 8000f60:	0f1b      	lsrs	r3, r3, #28
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	40d8      	lsrs	r0, r3
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_RCC_ClockConfig+0xfc>)
 8000f68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff f96c 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7db      	b.n	8000f2c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	4393      	bics	r3, r2
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	4299      	cmp	r1, r3
 8000f82:	d1d2      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xa>
 8000f84:	e7d9      	b.n	8000f3a <HAL_RCC_ClockConfig+0x1a>
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f88:	074b      	lsls	r3, r1, #29
 8000f8a:	d504      	bpl.n	8000f96 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f8c:	23e0      	movs	r3, #224	; 0xe0
 8000f8e:	6850      	ldr	r0, [r2, #4]
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4303      	orrs	r3, r0
 8000f94:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f96:	20f0      	movs	r0, #240	; 0xf0
 8000f98:	6853      	ldr	r3, [r2, #4]
 8000f9a:	4383      	bics	r3, r0
 8000f9c:	68a8      	ldr	r0, [r5, #8]
 8000f9e:	4303      	orrs	r3, r0
 8000fa0:	6053      	str	r3, [r2, #4]
 8000fa2:	e7cd      	b.n	8000f40 <HAL_RCC_ClockConfig+0x20>
 8000fa4:	4e1b      	ldr	r6, [pc, #108]	; (8001014 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa6:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d119      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	039b      	lsls	r3, r3, #14
 8000fb0:	d5bb      	bpl.n	8000f2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	6873      	ldr	r3, [r6, #4]
 8000fb6:	438b      	bics	r3, r1
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000fbc:	f7ff f984 	bl	80002c8 <HAL_GetTick>
 8000fc0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	6872      	ldr	r2, [r6, #4]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	686b      	ldr	r3, [r5, #4]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d0b9      	beq.n	8000f44 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd0:	f7ff f97a 	bl	80002c8 <HAL_GetTick>
 8000fd4:	9b01      	ldr	r3, [sp, #4]
 8000fd6:	1ac0      	subs	r0, r0, r3
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_RCC_ClockConfig+0x100>)
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9f1      	bls.n	8000fc2 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e7a4      	b.n	8000f2c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fe2:	2a02      	cmp	r2, #2
 8000fe4:	d102      	bne.n	8000fec <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe6:	019b      	lsls	r3, r3, #6
 8000fe8:	d4e3      	bmi.n	8000fb2 <HAL_RCC_ClockConfig+0x92>
 8000fea:	e79e      	b.n	8000f2a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fec:	079b      	lsls	r3, r3, #30
 8000fee:	d4e0      	bmi.n	8000fb2 <HAL_RCC_ClockConfig+0x92>
 8000ff0:	e79b      	b.n	8000f2a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	439a      	bics	r2, r3
 8000ff6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff8:	6822      	ldr	r2, [r4, #0]
 8000ffa:	421a      	tst	r2, r3
 8000ffc:	d195      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xa>
 8000ffe:	e7a6      	b.n	8000f4e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_RCC_ClockConfig+0x104>)
 8001004:	4013      	ands	r3, r2
 8001006:	68ea      	ldr	r2, [r5, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	6063      	str	r3, [r4, #4]
 800100c:	e7a3      	b.n	8000f56 <HAL_RCC_ClockConfig+0x36>
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40022000 	.word	0x40022000
 8001014:	40021000 	.word	0x40021000
 8001018:	0800379f 	.word	0x0800379f
 800101c:	20000034 	.word	0x20000034
 8001020:	00001388 	.word	0x00001388
 8001024:	fffff8ff 	.word	0xfffff8ff

08001028 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_RCC_GetPCLK1Freq+0x14>)
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_RCC_GetPCLK1Freq+0x18>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	055b      	lsls	r3, r3, #21
 8001030:	0f5b      	lsrs	r3, r3, #29
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	40d8      	lsrs	r0, r3
}    
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	080037af 	.word	0x080037af
 8001044:	20000034 	.word	0x20000034

08001048 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001048:	2201      	movs	r2, #1
 800104a:	6a03      	ldr	r3, [r0, #32]
{
 800104c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800104e:	4393      	bics	r3, r2
 8001050:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001052:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001054:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001056:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001058:	3272      	adds	r2, #114	; 0x72
 800105a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800105c:	680a      	ldr	r2, [r1, #0]
 800105e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001060:	2202      	movs	r2, #2
 8001062:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001064:	688a      	ldr	r2, [r1, #8]
 8001066:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <TIM_OC1_SetConfig+0x74>)
 800106a:	4290      	cmp	r0, r2
 800106c:	d008      	beq.n	8001080 <TIM_OC1_SetConfig+0x38>
 800106e:	4e14      	ldr	r6, [pc, #80]	; (80010c0 <TIM_OC1_SetConfig+0x78>)
 8001070:	42b0      	cmp	r0, r6
 8001072:	d005      	beq.n	8001080 <TIM_OC1_SetConfig+0x38>
 8001074:	4e13      	ldr	r6, [pc, #76]	; (80010c4 <TIM_OC1_SetConfig+0x7c>)
 8001076:	42b0      	cmp	r0, r6
 8001078:	d002      	beq.n	8001080 <TIM_OC1_SetConfig+0x38>
 800107a:	4e13      	ldr	r6, [pc, #76]	; (80010c8 <TIM_OC1_SetConfig+0x80>)
 800107c:	42b0      	cmp	r0, r6
 800107e:	d116      	bne.n	80010ae <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001080:	2608      	movs	r6, #8
 8001082:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001084:	68ce      	ldr	r6, [r1, #12]
 8001086:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001088:	2604      	movs	r6, #4
 800108a:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800108c:	4290      	cmp	r0, r2
 800108e:	d008      	beq.n	80010a2 <TIM_OC1_SetConfig+0x5a>
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <TIM_OC1_SetConfig+0x78>)
 8001092:	4290      	cmp	r0, r2
 8001094:	d005      	beq.n	80010a2 <TIM_OC1_SetConfig+0x5a>
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <TIM_OC1_SetConfig+0x7c>)
 8001098:	4290      	cmp	r0, r2
 800109a:	d002      	beq.n	80010a2 <TIM_OC1_SetConfig+0x5a>
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <TIM_OC1_SetConfig+0x80>)
 800109e:	4290      	cmp	r0, r2
 80010a0:	d105      	bne.n	80010ae <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010a4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010a6:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80010a8:	694c      	ldr	r4, [r1, #20]
 80010aa:	4334      	orrs	r4, r6
 80010ac:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010ae:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80010b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80010b2:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80010b4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010b6:	6203      	str	r3, [r0, #32]
}
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40014000 	.word	0x40014000
 80010c4:	40014400 	.word	0x40014400
 80010c8:	40014800 	.word	0x40014800
 80010cc:	fffffcff 	.word	0xfffffcff

080010d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80010d2:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010d4:	6a03      	ldr	r3, [r0, #32]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <TIM_OC3_SetConfig+0x64>)
 80010d8:	4013      	ands	r3, r2
 80010da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80010dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80010de:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80010e0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80010e2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010e4:	680d      	ldr	r5, [r1, #0]
 80010e6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80010e8:	4d13      	ldr	r5, [pc, #76]	; (8001138 <TIM_OC3_SetConfig+0x68>)
 80010ea:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80010ec:	688d      	ldr	r5, [r1, #8]
 80010ee:	022d      	lsls	r5, r5, #8
 80010f0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80010f2:	4d12      	ldr	r5, [pc, #72]	; (800113c <TIM_OC3_SetConfig+0x6c>)
 80010f4:	42a8      	cmp	r0, r5
 80010f6:	d10e      	bne.n	8001116 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80010f8:	4d11      	ldr	r5, [pc, #68]	; (8001140 <TIM_OC3_SetConfig+0x70>)
 80010fa:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010fc:	68cb      	ldr	r3, [r1, #12]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001102:	4d10      	ldr	r5, [pc, #64]	; (8001144 <TIM_OC3_SetConfig+0x74>)
 8001104:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001106:	4d10      	ldr	r5, [pc, #64]	; (8001148 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001108:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800110a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800110c:	698a      	ldr	r2, [r1, #24]
 800110e:	4332      	orrs	r2, r6
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	432a      	orrs	r2, r5
 8001114:	e008      	b.n	8001128 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001116:	4d0d      	ldr	r5, [pc, #52]	; (800114c <TIM_OC3_SetConfig+0x7c>)
 8001118:	42a8      	cmp	r0, r5
 800111a:	d0f4      	beq.n	8001106 <TIM_OC3_SetConfig+0x36>
 800111c:	4d0c      	ldr	r5, [pc, #48]	; (8001150 <TIM_OC3_SetConfig+0x80>)
 800111e:	42a8      	cmp	r0, r5
 8001120:	d0f1      	beq.n	8001106 <TIM_OC3_SetConfig+0x36>
 8001122:	4d0c      	ldr	r5, [pc, #48]	; (8001154 <TIM_OC3_SetConfig+0x84>)
 8001124:	42a8      	cmp	r0, r5
 8001126:	d0ee      	beq.n	8001106 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001128:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800112a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800112c:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800112e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001130:	6203      	str	r3, [r0, #32]
}
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	fffffeff 	.word	0xfffffeff
 8001138:	fffffdff 	.word	0xfffffdff
 800113c:	40012c00 	.word	0x40012c00
 8001140:	fffff7ff 	.word	0xfffff7ff
 8001144:	fffffbff 	.word	0xfffffbff
 8001148:	ffffcfff 	.word	0xffffcfff
 800114c:	40014000 	.word	0x40014000
 8001150:	40014400 	.word	0x40014400
 8001154:	40014800 	.word	0x40014800

08001158 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001158:	6a03      	ldr	r3, [r0, #32]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <TIM_OC4_SetConfig+0x54>)
{
 800115c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800115e:	4013      	ands	r3, r2
 8001160:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001162:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001164:	4c12      	ldr	r4, [pc, #72]	; (80011b0 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8001166:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001168:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800116a:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800116c:	680c      	ldr	r4, [r1, #0]
 800116e:	0224      	lsls	r4, r4, #8
 8001170:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001172:	4c10      	ldr	r4, [pc, #64]	; (80011b4 <TIM_OC4_SetConfig+0x5c>)
 8001174:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001176:	688c      	ldr	r4, [r1, #8]
 8001178:	0324      	lsls	r4, r4, #12
 800117a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800117c:	4c0e      	ldr	r4, [pc, #56]	; (80011b8 <TIM_OC4_SetConfig+0x60>)
 800117e:	42a0      	cmp	r0, r4
 8001180:	d008      	beq.n	8001194 <TIM_OC4_SetConfig+0x3c>
 8001182:	4c0e      	ldr	r4, [pc, #56]	; (80011bc <TIM_OC4_SetConfig+0x64>)
 8001184:	42a0      	cmp	r0, r4
 8001186:	d005      	beq.n	8001194 <TIM_OC4_SetConfig+0x3c>
 8001188:	4c0d      	ldr	r4, [pc, #52]	; (80011c0 <TIM_OC4_SetConfig+0x68>)
 800118a:	42a0      	cmp	r0, r4
 800118c:	d002      	beq.n	8001194 <TIM_OC4_SetConfig+0x3c>
 800118e:	4c0d      	ldr	r4, [pc, #52]	; (80011c4 <TIM_OC4_SetConfig+0x6c>)
 8001190:	42a0      	cmp	r0, r4
 8001192:	d104      	bne.n	800119e <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001194:	4c0c      	ldr	r4, [pc, #48]	; (80011c8 <TIM_OC4_SetConfig+0x70>)
 8001196:	4023      	ands	r3, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001198:	694c      	ldr	r4, [r1, #20]
 800119a:	01a4      	lsls	r4, r4, #6
 800119c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800119e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011a0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80011a2:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80011a4:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011a6:	6202      	str	r2, [r0, #32]
}
 80011a8:	bd30      	pop	{r4, r5, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	ffffefff 	.word	0xffffefff
 80011b0:	ffff8cff 	.word	0xffff8cff
 80011b4:	ffffdfff 	.word	0xffffdfff
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40014000 	.word	0x40014000
 80011c0:	40014400 	.word	0x40014400
 80011c4:	40014800 	.word	0x40014800
 80011c8:	ffffbfff 	.word	0xffffbfff

080011cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011cc:	2201      	movs	r2, #1
 80011ce:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011d0:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011d2:	68d9      	ldr	r1, [r3, #12]
 80011d4:	4311      	orrs	r1, r2
 80011d6:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011d8:	6899      	ldr	r1, [r3, #8]
 80011da:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80011dc:	2906      	cmp	r1, #6
 80011de:	d002      	beq.n	80011e6 <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
}
 80011e6:	2000      	movs	r0, #0
 80011e8:	4770      	bx	lr

080011ea <HAL_TIM_PWM_MspInit>:
 80011ea:	4770      	bx	lr

080011ec <HAL_TIM_PeriodElapsedCallback>:
 80011ec:	4770      	bx	lr

080011ee <HAL_TIM_OC_DelayElapsedCallback>:
 80011ee:	4770      	bx	lr

080011f0 <HAL_TIM_IC_CaptureCallback>:
 80011f0:	4770      	bx	lr

080011f2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80011f2:	4770      	bx	lr

080011f4 <HAL_TIM_TriggerCallback>:
 80011f4:	4770      	bx	lr

080011f6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011f6:	2202      	movs	r2, #2
 80011f8:	6803      	ldr	r3, [r0, #0]
{
 80011fa:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011fc:	6919      	ldr	r1, [r3, #16]
{
 80011fe:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001200:	4211      	tst	r1, r2
 8001202:	d00e      	beq.n	8001222 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001204:	68d9      	ldr	r1, [r3, #12]
 8001206:	4211      	tst	r1, r2
 8001208:	d00b      	beq.n	8001222 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800120a:	3a05      	subs	r2, #5
 800120c:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800120e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001210:	3204      	adds	r2, #4
 8001212:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001214:	079b      	lsls	r3, r3, #30
 8001216:	d100      	bne.n	800121a <HAL_TIM_IRQHandler+0x24>
 8001218:	e079      	b.n	800130e <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 800121a:	f7ff ffe9 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800121e:	2300      	movs	r3, #0
 8001220:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001222:	2204      	movs	r2, #4
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	6919      	ldr	r1, [r3, #16]
 8001228:	4211      	tst	r1, r2
 800122a:	d010      	beq.n	800124e <HAL_TIM_IRQHandler+0x58>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800122c:	68d9      	ldr	r1, [r3, #12]
 800122e:	4211      	tst	r1, r2
 8001230:	d00d      	beq.n	800124e <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001232:	3a09      	subs	r2, #9
 8001234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001236:	3207      	adds	r2, #7
 8001238:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	23c0      	movs	r3, #192	; 0xc0
 800123e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001240:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001242:	421a      	tst	r2, r3
 8001244:	d069      	beq.n	800131a <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001246:	f7ff ffd3 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800124a:	2300      	movs	r3, #0
 800124c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800124e:	2208      	movs	r2, #8
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	4211      	tst	r1, r2
 8001256:	d00e      	beq.n	8001276 <HAL_TIM_IRQHandler+0x80>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001258:	68d9      	ldr	r1, [r3, #12]
 800125a:	4211      	tst	r1, r2
 800125c:	d00b      	beq.n	8001276 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800125e:	3a11      	subs	r2, #17
 8001260:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001262:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001264:	320d      	adds	r2, #13
 8001266:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001268:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800126a:	079b      	lsls	r3, r3, #30
 800126c:	d05b      	beq.n	8001326 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800126e:	f7ff ffbf 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001272:	2300      	movs	r3, #0
 8001274:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001276:	2210      	movs	r2, #16
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	6919      	ldr	r1, [r3, #16]
 800127c:	4211      	tst	r1, r2
 800127e:	d010      	beq.n	80012a2 <HAL_TIM_IRQHandler+0xac>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	4211      	tst	r1, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001286:	3a21      	subs	r2, #33	; 0x21
 8001288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800128a:	3219      	adds	r2, #25
 800128c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001294:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001296:	421a      	tst	r2, r3
 8001298:	d04b      	beq.n	8001332 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 800129a:	f7ff ffa9 	bl	80011f0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129e:	2300      	movs	r3, #0
 80012a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012a2:	2201      	movs	r2, #1
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	6919      	ldr	r1, [r3, #16]
 80012a8:	4211      	tst	r1, r2
 80012aa:	d007      	beq.n	80012bc <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012ac:	68d9      	ldr	r1, [r3, #12]
 80012ae:	4211      	tst	r1, r2
 80012b0:	d004      	beq.n	80012bc <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012b2:	3a03      	subs	r2, #3
 80012b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012b6:	0020      	movs	r0, r4
 80012b8:	f7ff ff98 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	6919      	ldr	r1, [r3, #16]
 80012c2:	4211      	tst	r1, r2
 80012c4:	d008      	beq.n	80012d8 <HAL_TIM_IRQHandler+0xe2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	4211      	tst	r1, r2
 80012ca:	d005      	beq.n	80012d8 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012cc:	3a02      	subs	r2, #2
 80012ce:	3aff      	subs	r2, #255	; 0xff
 80012d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012d2:	0020      	movs	r0, r4
 80012d4:	f000 fa69 	bl	80017aa <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012d8:	2240      	movs	r2, #64	; 0x40
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	6919      	ldr	r1, [r3, #16]
 80012de:	4211      	tst	r1, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012e2:	68d9      	ldr	r1, [r3, #12]
 80012e4:	4211      	tst	r1, r2
 80012e6:	d004      	beq.n	80012f2 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012e8:	3a81      	subs	r2, #129	; 0x81
 80012ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80012ec:	0020      	movs	r0, r4
 80012ee:	f7ff ff81 	bl	80011f4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012f2:	2220      	movs	r2, #32
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	6919      	ldr	r1, [r3, #16]
 80012f8:	4211      	tst	r1, r2
 80012fa:	d007      	beq.n	800130c <HAL_TIM_IRQHandler+0x116>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80012fc:	68d9      	ldr	r1, [r3, #12]
 80012fe:	4211      	tst	r1, r2
 8001300:	d004      	beq.n	800130c <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001302:	3a41      	subs	r2, #65	; 0x41
 8001304:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001306:	0020      	movs	r0, r4
 8001308:	f000 fa4e 	bl	80017a8 <HAL_TIMEx_CommutCallback>
}
 800130c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800130e:	f7ff ff6e 	bl	80011ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001312:	0020      	movs	r0, r4
 8001314:	f7ff ff6d 	bl	80011f2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001318:	e781      	b.n	800121e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800131a:	f7ff ff68 	bl	80011ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800131e:	0020      	movs	r0, r4
 8001320:	f7ff ff67 	bl	80011f2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001324:	e791      	b.n	800124a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001326:	f7ff ff62 	bl	80011ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800132a:	0020      	movs	r0, r4
 800132c:	f7ff ff61 	bl	80011f2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001330:	e79f      	b.n	8001272 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001332:	f7ff ff5c 	bl	80011ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001336:	0020      	movs	r0, r4
 8001338:	f7ff ff5b 	bl	80011f2 <HAL_TIM_PWM_PulseFinishedCallback>
 800133c:	e7af      	b.n	800129e <HAL_TIM_IRQHandler+0xa8>
	...

08001340 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <TIM_Base_SetConfig+0x74>)
{
 8001342:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001344:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001346:	4290      	cmp	r0, r2
 8001348:	d002      	beq.n	8001350 <TIM_Base_SetConfig+0x10>
 800134a:	4c1b      	ldr	r4, [pc, #108]	; (80013b8 <TIM_Base_SetConfig+0x78>)
 800134c:	42a0      	cmp	r0, r4
 800134e:	d108      	bne.n	8001362 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001350:	2470      	movs	r4, #112	; 0x70
 8001352:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001354:	684c      	ldr	r4, [r1, #4]
 8001356:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001358:	4290      	cmp	r0, r2
 800135a:	d00e      	beq.n	800137a <TIM_Base_SetConfig+0x3a>
 800135c:	4c16      	ldr	r4, [pc, #88]	; (80013b8 <TIM_Base_SetConfig+0x78>)
 800135e:	42a0      	cmp	r0, r4
 8001360:	d00b      	beq.n	800137a <TIM_Base_SetConfig+0x3a>
 8001362:	4c16      	ldr	r4, [pc, #88]	; (80013bc <TIM_Base_SetConfig+0x7c>)
 8001364:	42a0      	cmp	r0, r4
 8001366:	d008      	beq.n	800137a <TIM_Base_SetConfig+0x3a>
 8001368:	4c15      	ldr	r4, [pc, #84]	; (80013c0 <TIM_Base_SetConfig+0x80>)
 800136a:	42a0      	cmp	r0, r4
 800136c:	d005      	beq.n	800137a <TIM_Base_SetConfig+0x3a>
 800136e:	4c15      	ldr	r4, [pc, #84]	; (80013c4 <TIM_Base_SetConfig+0x84>)
 8001370:	42a0      	cmp	r0, r4
 8001372:	d002      	beq.n	800137a <TIM_Base_SetConfig+0x3a>
 8001374:	4c14      	ldr	r4, [pc, #80]	; (80013c8 <TIM_Base_SetConfig+0x88>)
 8001376:	42a0      	cmp	r0, r4
 8001378:	d103      	bne.n	8001382 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 800137a:	4c14      	ldr	r4, [pc, #80]	; (80013cc <TIM_Base_SetConfig+0x8c>)
 800137c:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800137e:	68cc      	ldr	r4, [r1, #12]
 8001380:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001382:	2480      	movs	r4, #128	; 0x80
 8001384:	43a3      	bics	r3, r4
 8001386:	694c      	ldr	r4, [r1, #20]
 8001388:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800138a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800138c:	688b      	ldr	r3, [r1, #8]
 800138e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001390:	680b      	ldr	r3, [r1, #0]
 8001392:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001394:	4290      	cmp	r0, r2
 8001396:	d008      	beq.n	80013aa <TIM_Base_SetConfig+0x6a>
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <TIM_Base_SetConfig+0x80>)
 800139a:	4298      	cmp	r0, r3
 800139c:	d005      	beq.n	80013aa <TIM_Base_SetConfig+0x6a>
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <TIM_Base_SetConfig+0x84>)
 80013a0:	4298      	cmp	r0, r3
 80013a2:	d002      	beq.n	80013aa <TIM_Base_SetConfig+0x6a>
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <TIM_Base_SetConfig+0x88>)
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d101      	bne.n	80013ae <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80013aa:	690b      	ldr	r3, [r1, #16]
 80013ac:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80013ae:	2301      	movs	r3, #1
 80013b0:	6143      	str	r3, [r0, #20]
}
 80013b2:	bd10      	pop	{r4, pc}
 80013b4:	40012c00 	.word	0x40012c00
 80013b8:	40000400 	.word	0x40000400
 80013bc:	40002000 	.word	0x40002000
 80013c0:	40014000 	.word	0x40014000
 80013c4:	40014400 	.word	0x40014400
 80013c8:	40014800 	.word	0x40014800
 80013cc:	fffffcff 	.word	0xfffffcff

080013d0 <HAL_TIM_Base_Init>:
{
 80013d0:	b570      	push	{r4, r5, r6, lr}
 80013d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
  if (htim == NULL)
 80013d6:	2c00      	cmp	r4, #0
 80013d8:	d014      	beq.n	8001404 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013da:	0025      	movs	r5, r4
 80013dc:	353d      	adds	r5, #61	; 0x3d
 80013de:	782b      	ldrb	r3, [r5, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80013e6:	0022      	movs	r2, r4
 80013e8:	323c      	adds	r2, #60	; 0x3c
 80013ea:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80013ec:	0020      	movs	r0, r4
 80013ee:	f000 fec1 	bl	8002174 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80013f2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013f6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f8:	1d21      	adds	r1, r4, #4
 80013fa:	f7ff ffa1 	bl	8001340 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80013fe:	2301      	movs	r3, #1
  return HAL_OK;
 8001400:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001402:	702b      	strb	r3, [r5, #0]
}
 8001404:	bd70      	pop	{r4, r5, r6, pc}

08001406 <HAL_TIM_PWM_Init>:
{
 8001406:	b570      	push	{r4, r5, r6, lr}
 8001408:	0004      	movs	r4, r0
    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
  if (htim == NULL)
 800140c:	2c00      	cmp	r4, #0
 800140e:	d014      	beq.n	800143a <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001410:	0025      	movs	r5, r4
 8001412:	353d      	adds	r5, #61	; 0x3d
 8001414:	782b      	ldrb	r3, [r5, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800141c:	0022      	movs	r2, r4
 800141e:	323c      	adds	r2, #60	; 0x3c
 8001420:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001422:	0020      	movs	r0, r4
 8001424:	f7ff fee1 	bl	80011ea <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001428:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800142e:	1d21      	adds	r1, r4, #4
 8001430:	f7ff ff86 	bl	8001340 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001434:	2301      	movs	r3, #1
  return HAL_OK;
 8001436:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001438:	702b      	strb	r3, [r5, #0]
}
 800143a:	bd70      	pop	{r4, r5, r6, pc}

0800143c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800143c:	2210      	movs	r2, #16
 800143e:	6a03      	ldr	r3, [r0, #32]
{
 8001440:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001442:	4393      	bics	r3, r2
 8001444:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001446:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001448:	4d16      	ldr	r5, [pc, #88]	; (80014a4 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800144a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800144c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800144e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001450:	680d      	ldr	r5, [r1, #0]
 8001452:	022d      	lsls	r5, r5, #8
 8001454:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8001456:	2520      	movs	r5, #32
 8001458:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800145a:	688d      	ldr	r5, [r1, #8]
 800145c:	012d      	lsls	r5, r5, #4
 800145e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001460:	4d11      	ldr	r5, [pc, #68]	; (80014a8 <TIM_OC2_SetConfig+0x6c>)
 8001462:	42a8      	cmp	r0, r5
 8001464:	d10f      	bne.n	8001486 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001466:	2580      	movs	r5, #128	; 0x80
 8001468:	43aa      	bics	r2, r5
 800146a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800146c:	68ca      	ldr	r2, [r1, #12]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001472:	2540      	movs	r5, #64	; 0x40
 8001474:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001476:	4d0d      	ldr	r5, [pc, #52]	; (80014ac <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001478:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800147a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800147c:	698b      	ldr	r3, [r1, #24]
 800147e:	4333      	orrs	r3, r6
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	432b      	orrs	r3, r5
 8001484:	e008      	b.n	8001498 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001486:	4d0a      	ldr	r5, [pc, #40]	; (80014b0 <TIM_OC2_SetConfig+0x74>)
 8001488:	42a8      	cmp	r0, r5
 800148a:	d0f4      	beq.n	8001476 <TIM_OC2_SetConfig+0x3a>
 800148c:	4d09      	ldr	r5, [pc, #36]	; (80014b4 <TIM_OC2_SetConfig+0x78>)
 800148e:	42a8      	cmp	r0, r5
 8001490:	d0f1      	beq.n	8001476 <TIM_OC2_SetConfig+0x3a>
 8001492:	4d09      	ldr	r5, [pc, #36]	; (80014b8 <TIM_OC2_SetConfig+0x7c>)
 8001494:	42a8      	cmp	r0, r5
 8001496:	d0ee      	beq.n	8001476 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001498:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800149a:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800149c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800149e:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80014a0:	6202      	str	r2, [r0, #32]
}
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
 80014a4:	ffff8cff 	.word	0xffff8cff
 80014a8:	40012c00 	.word	0x40012c00
 80014ac:	fffff3ff 	.word	0xfffff3ff
 80014b0:	40014000 	.word	0x40014000
 80014b4:	40014400 	.word	0x40014400
 80014b8:	40014800 	.word	0x40014800

080014bc <HAL_TIM_PWM_ConfigChannel>:
{
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80014be:	0006      	movs	r6, r0
 80014c0:	2302      	movs	r3, #2
 80014c2:	363c      	adds	r6, #60	; 0x3c
{
 80014c4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80014c6:	7831      	ldrb	r1, [r6, #0]
{
 80014c8:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80014ca:	0018      	movs	r0, r3
 80014cc:	2901      	cmp	r1, #1
 80014ce:	d025      	beq.n	800151c <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80014d0:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80014d2:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80014d4:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80014d6:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014d8:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80014da:	2a0c      	cmp	r2, #12
 80014dc:	d81a      	bhi.n	8001514 <HAL_TIM_PWM_ConfigChannel+0x58>
 80014de:	0010      	movs	r0, r2
 80014e0:	f7fe fe1c 	bl	800011c <__gnu_thumb1_case_uqi>
 80014e4:	18181807 	.word	0x18181807
 80014e8:	1818181d 	.word	0x1818181d
 80014ec:	1818182f 	.word	0x1818182f
 80014f0:	41          	.byte	0x41
 80014f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80014f2:	0029      	movs	r1, r5
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	f7ff fda7 	bl	8001048 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80014fa:	2208      	movs	r2, #8
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	6999      	ldr	r1, [r3, #24]
 8001500:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001502:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001504:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	438a      	bics	r2, r1
 800150a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001510:	430a      	orrs	r2, r1
 8001512:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001514:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001516:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001518:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800151a:	7030      	strb	r0, [r6, #0]
}
 800151c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800151e:	0029      	movs	r1, r5
 8001520:	6820      	ldr	r0, [r4, #0]
 8001522:	f7ff ff8b 	bl	800143c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	6999      	ldr	r1, [r3, #24]
 800152e:	430a      	orrs	r2, r1
 8001530:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001532:	699a      	ldr	r2, [r3, #24]
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001536:	400a      	ands	r2, r1
 8001538:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800153a:	692a      	ldr	r2, [r5, #16]
 800153c:	6999      	ldr	r1, [r3, #24]
 800153e:	0212      	lsls	r2, r2, #8
 8001540:	e7e6      	b.n	8001510 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001542:	0029      	movs	r1, r5
 8001544:	6820      	ldr	r0, [r4, #0]
 8001546:	f7ff fdc3 	bl	80010d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800154a:	2208      	movs	r2, #8
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	69d9      	ldr	r1, [r3, #28]
 8001550:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001552:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	438a      	bics	r2, r1
 800155a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001560:	430a      	orrs	r2, r1
 8001562:	61da      	str	r2, [r3, #28]
      break;
 8001564:	e7d6      	b.n	8001514 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001566:	0029      	movs	r1, r5
 8001568:	6820      	ldr	r0, [r4, #0]
 800156a:	f7ff fdf5 	bl	8001158 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	69d9      	ldr	r1, [r3, #28]
 8001576:	430a      	orrs	r2, r1
 8001578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800157e:	400a      	ands	r2, r1
 8001580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001582:	692a      	ldr	r2, [r5, #16]
 8001584:	69d9      	ldr	r1, [r3, #28]
 8001586:	0212      	lsls	r2, r2, #8
 8001588:	e7ea      	b.n	8001560 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	fffffbff 	.word	0xfffffbff

08001590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001590:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001592:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001594:	4d03      	ldr	r5, [pc, #12]	; (80015a4 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001596:	430a      	orrs	r2, r1
 8001598:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800159a:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800159c:	4313      	orrs	r3, r2
 800159e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015a0:	6083      	str	r3, [r0, #8]
}
 80015a2:	bd30      	pop	{r4, r5, pc}
 80015a4:	ffff00ff 	.word	0xffff00ff

080015a8 <HAL_TIM_ConfigClockSource>:
{
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80015aa:	0005      	movs	r5, r0
 80015ac:	2302      	movs	r3, #2
 80015ae:	353c      	adds	r5, #60	; 0x3c
 80015b0:	782a      	ldrb	r2, [r5, #0]
{
 80015b2:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80015b4:	0018      	movs	r0, r3
 80015b6:	2a01      	cmp	r2, #1
 80015b8:	d016      	beq.n	80015e8 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80015ba:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80015bc:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80015be:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80015c2:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80015c4:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80015c6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015c8:	4a40      	ldr	r2, [pc, #256]	; (80016cc <HAL_TIM_ConfigClockSource+0x124>)
 80015ca:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80015cc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80015ce:	680b      	ldr	r3, [r1, #0]
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d065      	beq.n	80016a0 <HAL_TIM_ConfigClockSource+0xf8>
 80015d4:	d814      	bhi.n	8001600 <HAL_TIM_ConfigClockSource+0x58>
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d00b      	beq.n	80015f2 <HAL_TIM_ConfigClockSource+0x4a>
 80015da:	d806      	bhi.n	80015ea <HAL_TIM_ConfigClockSource+0x42>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80015e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015e4:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80015e6:	7028      	strb	r0, [r5, #0]
}
 80015e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80015ea:	2b20      	cmp	r3, #32
 80015ec:	d001      	beq.n	80015f2 <HAL_TIM_ConfigClockSource+0x4a>
 80015ee:	2b30      	cmp	r3, #48	; 0x30
 80015f0:	d1f6      	bne.n	80015e0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr &= ~TIM_SMCR_TS;
 80015f2:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80015f4:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015f6:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015f8:	3a69      	subs	r2, #105	; 0x69
 80015fa:	4313      	orrs	r3, r2
 80015fc:	430b      	orrs	r3, r1
 80015fe:	e01a      	b.n	8001636 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001600:	2b60      	cmp	r3, #96	; 0x60
 8001602:	d035      	beq.n	8001670 <HAL_TIM_ConfigClockSource+0xc8>
 8001604:	d819      	bhi.n	800163a <HAL_TIM_ConfigClockSource+0x92>
 8001606:	2b50      	cmp	r3, #80	; 0x50
 8001608:	d1ea      	bne.n	80015e0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800160a:	684a      	ldr	r2, [r1, #4]
 800160c:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800160e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001610:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001612:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001614:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001616:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001618:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800161a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800161c:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800161e:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001620:	240a      	movs	r4, #10
 8001622:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001624:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001626:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001628:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800162a:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800162c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800162e:	4393      	bics	r3, r2
 8001630:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001632:	2357      	movs	r3, #87	; 0x57
 8001634:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001636:	6083      	str	r3, [r0, #8]
 8001638:	e7d2      	b.n	80015e0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800163a:	2b70      	cmp	r3, #112	; 0x70
 800163c:	d00d      	beq.n	800165a <HAL_TIM_ConfigClockSource+0xb2>
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	4293      	cmp	r3, r2
 8001644:	d1cc      	bne.n	80015e0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8001646:	68cb      	ldr	r3, [r1, #12]
 8001648:	684a      	ldr	r2, [r1, #4]
 800164a:	6889      	ldr	r1, [r1, #8]
 800164c:	f7ff ffa0 	bl	8001590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	01db      	lsls	r3, r3, #7
 8001656:	6891      	ldr	r1, [r2, #8]
 8001658:	e007      	b.n	800166a <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800165a:	68cb      	ldr	r3, [r1, #12]
 800165c:	684a      	ldr	r2, [r1, #4]
 800165e:	6889      	ldr	r1, [r1, #8]
 8001660:	f7ff ff96 	bl	8001590 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001664:	2377      	movs	r3, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8001666:	6822      	ldr	r2, [r4, #0]
 8001668:	6891      	ldr	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800166a:	430b      	orrs	r3, r1
 800166c:	6093      	str	r3, [r2, #8]
      break;
 800166e:	e7b7      	b.n	80015e0 <HAL_TIM_ConfigClockSource+0x38>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001670:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001672:	684b      	ldr	r3, [r1, #4]
 8001674:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001676:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001678:	4f15      	ldr	r7, [pc, #84]	; (80016d0 <HAL_TIM_ConfigClockSource+0x128>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800167a:	43a1      	bics	r1, r4
 800167c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800167e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001680:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001682:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001684:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001686:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001688:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800168a:	6182      	str	r2, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800168c:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800168e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8001694:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001696:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001698:	4393      	bics	r3, r2
 800169a:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800169c:	2367      	movs	r3, #103	; 0x67
 800169e:	e7c9      	b.n	8001634 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016a0:	684a      	ldr	r2, [r1, #4]
 80016a2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80016a4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016a6:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016a8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016aa:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016ac:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ae:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016b0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016b2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016b4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016b6:	240a      	movs	r4, #10
 80016b8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80016ba:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80016bc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80016be:	6202      	str	r2, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016c0:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80016c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80016c4:	4393      	bics	r3, r2
 80016c6:	001a      	movs	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016c8:	2347      	movs	r3, #71	; 0x47
 80016ca:	e7b3      	b.n	8001634 <HAL_TIM_ConfigClockSource+0x8c>
 80016cc:	ffff0088 	.word	0xffff0088
 80016d0:	ffff0fff 	.word	0xffff0fff

080016d4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80016d4:	231f      	movs	r3, #31
{
 80016d6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80016d8:	2401      	movs	r4, #1
 80016da:	4019      	ands	r1, r3
 80016dc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80016de:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80016e0:	6a03      	ldr	r3, [r0, #32]
 80016e2:	43a3      	bics	r3, r4
 80016e4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80016e6:	6a03      	ldr	r3, [r0, #32]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	6202      	str	r2, [r0, #32]
}
 80016ec:	bd10      	pop	{r4, pc}
	...

080016f0 <HAL_TIM_PWM_Start>:
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6800      	ldr	r0, [r0, #0]
 80016f8:	f7ff ffec 	bl	80016d4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_TIM_PWM_Start+0x48>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d013      	beq.n	800172c <HAL_TIM_PWM_Start+0x3c>
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_TIM_PWM_Start+0x4c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d010      	beq.n	800172c <HAL_TIM_PWM_Start+0x3c>
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_TIM_PWM_Start+0x50>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_TIM_PWM_Start+0x3c>
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_TIM_PWM_Start+0x54>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00a      	beq.n	800172c <HAL_TIM_PWM_Start+0x3c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001716:	2107      	movs	r1, #7
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171c:	2a06      	cmp	r2, #6
 800171e:	d003      	beq.n	8001728 <HAL_TIM_PWM_Start+0x38>
    __HAL_TIM_ENABLE(htim);
 8001720:	2201      	movs	r2, #1
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	2000      	movs	r0, #0
 800172a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001730:	0212      	lsls	r2, r2, #8
 8001732:	430a      	orrs	r2, r1
 8001734:	645a      	str	r2, [r3, #68]	; 0x44
 8001736:	e7ee      	b.n	8001716 <HAL_TIM_PWM_Start+0x26>
 8001738:	40012c00 	.word	0x40012c00
 800173c:	40014000 	.word	0x40014000
 8001740:	40014400 	.word	0x40014400
 8001744:	40014800 	.word	0x40014800

08001748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800174a:	0004      	movs	r4, r0
 800174c:	2202      	movs	r2, #2
 800174e:	343c      	adds	r4, #60	; 0x3c
 8001750:	7825      	ldrb	r5, [r4, #0]
{
 8001752:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001754:	0010      	movs	r0, r2
 8001756:	2d01      	cmp	r5, #1
 8001758:	d01e      	beq.n	8001798 <HAL_TIMEx_MasterConfigSynchronization+0x50>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800175c:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 800175e:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8001760:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001762:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8001764:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001766:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001768:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800176a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800176c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800176e:	680e      	ldr	r6, [r1, #0]
 8001770:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001772:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8001776:	4283      	cmp	r3, r0
 8001778:	d005      	beq.n	8001786 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800177a:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800177c:	4283      	cmp	r3, r0
 800177e:	d002      	beq.n	8001786 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8001780:	4808      	ldr	r0, [pc, #32]	; (80017a4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8001782:	4283      	cmp	r3, r0
 8001784:	d104      	bne.n	8001790 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001786:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001788:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800178a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800178c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800178e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001790:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001792:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001794:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001796:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001798:	bd70      	pop	{r4, r5, r6, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40014000 	.word	0x40014000

080017a8 <HAL_TIMEx_CommutCallback>:
 80017a8:	4770      	bx	lr

080017aa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017aa:	4770      	bx	lr

080017ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017b0:	6925      	ldr	r5, [r4, #16]
 80017b2:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017b4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017b6:	432b      	orrs	r3, r5
 80017b8:	6965      	ldr	r5, [r4, #20]
 80017ba:	69c1      	ldr	r1, [r0, #28]
 80017bc:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017be:	6810      	ldr	r0, [r2, #0]
 80017c0:	4d43      	ldr	r5, [pc, #268]	; (80018d0 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017c2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017c4:	4028      	ands	r0, r5
 80017c6:	4303      	orrs	r3, r0
 80017c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017ca:	6853      	ldr	r3, [r2, #4]
 80017cc:	4841      	ldr	r0, [pc, #260]	; (80018d4 <UART_SetConfig+0x128>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80017ce:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017d0:	4003      	ands	r3, r0
 80017d2:	68e0      	ldr	r0, [r4, #12]
 80017d4:	4303      	orrs	r3, r0
 80017d6:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80017d8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017da:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80017dc:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017de:	4d3e      	ldr	r5, [pc, #248]	; (80018d8 <UART_SetConfig+0x12c>)
 80017e0:	4028      	ands	r0, r5
 80017e2:	4303      	orrs	r3, r0
 80017e4:	6093      	str	r3, [r2, #8]
 80017e6:	2380      	movs	r3, #128	; 0x80


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017e8:	483c      	ldr	r0, [pc, #240]	; (80018dc <UART_SetConfig+0x130>)
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4282      	cmp	r2, r0
 80017ee:	d110      	bne.n	8001812 <UART_SetConfig+0x66>
 80017f0:	2003      	movs	r0, #3
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <UART_SetConfig+0x134>)
 80017f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f6:	4002      	ands	r2, r0
 80017f8:	483a      	ldr	r0, [pc, #232]	; (80018e4 <UART_SetConfig+0x138>)
 80017fa:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017fc:	4299      	cmp	r1, r3
 80017fe:	d013      	beq.n	8001828 <UART_SetConfig+0x7c>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001800:	2808      	cmp	r0, #8
 8001802:	d828      	bhi.n	8001856 <UART_SetConfig+0xaa>
 8001804:	f7fe fc8a 	bl	800011c <__gnu_thumb1_case_uqi>
 8001808:	27462741 	.word	0x27462741
 800180c:	27272757 	.word	0x27272757
 8001810:	5a          	.byte	0x5a
 8001811:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001812:	4835      	ldr	r0, [pc, #212]	; (80018e8 <UART_SetConfig+0x13c>)
 8001814:	4282      	cmp	r2, r0
 8001816:	d156      	bne.n	80018c6 <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001818:	4299      	cmp	r1, r3
 800181a:	d136      	bne.n	800188a <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 800181c:	f7ff fc04 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	0040      	lsls	r0, r0, #1
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	e00b      	b.n	8001840 <UART_SetConfig+0x94>
    switch (clocksource)
 8001828:	2808      	cmp	r0, #8
 800182a:	d81e      	bhi.n	800186a <UART_SetConfig+0xbe>
 800182c:	f7fe fc6c 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001830:	1d051df6 	.word	0x1d051df6
 8001834:	1d1d1d15 	.word	0x1d1d1d15
 8001838:	18          	.byte	0x18
 8001839:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	0858      	lsrs	r0, r3, #1
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001840:	18c0      	adds	r0, r0, r3
 8001842:	6861      	ldr	r1, [r4, #4]
 8001844:	f7fe fc74 	bl	8000130 <__udivsi3>
 8001848:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800184a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800184c:	001a      	movs	r2, r3
 800184e:	4928      	ldr	r1, [pc, #160]	; (80018f0 <UART_SetConfig+0x144>)
 8001850:	3a10      	subs	r2, #16
 8001852:	428a      	cmp	r2, r1
 8001854:	d90c      	bls.n	8001870 <UART_SetConfig+0xc4>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e013      	b.n	8001882 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 800185a:	f7ff fb2f 	bl	8000ebc <HAL_RCC_GetSysClockFreq>
 800185e:	e7df      	b.n	8001820 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001860:	6863      	ldr	r3, [r4, #4]
 8001862:	0858      	lsrs	r0, r3, #1
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	025b      	lsls	r3, r3, #9
 8001868:	e7ea      	b.n	8001840 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800186a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800186c:	2300      	movs	r3, #0
 800186e:	e7ed      	b.n	800184c <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001870:	220f      	movs	r2, #15
 8001872:	0019      	movs	r1, r3
 8001874:	4391      	bics	r1, r2
 8001876:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001878:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 800187a:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800187c:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001886:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001888:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800188a:	f7ff fbcd 	bl	8001028 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	e002      	b.n	800189a <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	0858      	lsrs	r0, r3, #1
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800189a:	18c0      	adds	r0, r0, r3
 800189c:	6861      	ldr	r1, [r4, #4]
 800189e:	f7fe fc47 	bl	8000130 <__udivsi3>
 80018a2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80018a4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018a6:	001a      	movs	r2, r3
 80018a8:	4911      	ldr	r1, [pc, #68]	; (80018f0 <UART_SetConfig+0x144>)
 80018aa:	3a10      	subs	r2, #16
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d8d2      	bhi.n	8001856 <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	60d3      	str	r3, [r2, #12]
 80018b4:	e7e5      	b.n	8001882 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 80018b6:	f7ff fb01 	bl	8000ebc <HAL_RCC_GetSysClockFreq>
 80018ba:	e7e8      	b.n	800188e <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	0858      	lsrs	r0, r3, #1
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	e7e9      	b.n	800189a <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018c6:	4299      	cmp	r1, r3
 80018c8:	d0cf      	beq.n	800186a <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 80018ca:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e7ea      	b.n	80018a6 <UART_SetConfig+0xfa>
 80018d0:	ffff69f3 	.word	0xffff69f3
 80018d4:	ffffcfff 	.word	0xffffcfff
 80018d8:	fffff4ff 	.word	0xfffff4ff
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08003788 	.word	0x08003788
 80018e8:	40004400 	.word	0x40004400
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	0000ffef 	.word	0x0000ffef
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80018fa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018fc:	07da      	lsls	r2, r3, #31
 80018fe:	d506      	bpl.n	800190e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001900:	6801      	ldr	r1, [r0, #0]
 8001902:	4c28      	ldr	r4, [pc, #160]	; (80019a4 <UART_AdvFeatureConfig+0xac>)
 8001904:	684a      	ldr	r2, [r1, #4]
 8001906:	4022      	ands	r2, r4
 8001908:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800190a:	4322      	orrs	r2, r4
 800190c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800190e:	079a      	lsls	r2, r3, #30
 8001910:	d506      	bpl.n	8001920 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001912:	6801      	ldr	r1, [r0, #0]
 8001914:	4c24      	ldr	r4, [pc, #144]	; (80019a8 <UART_AdvFeatureConfig+0xb0>)
 8001916:	684a      	ldr	r2, [r1, #4]
 8001918:	4022      	ands	r2, r4
 800191a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800191c:	4322      	orrs	r2, r4
 800191e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001920:	075a      	lsls	r2, r3, #29
 8001922:	d506      	bpl.n	8001932 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001924:	6801      	ldr	r1, [r0, #0]
 8001926:	4c21      	ldr	r4, [pc, #132]	; (80019ac <UART_AdvFeatureConfig+0xb4>)
 8001928:	684a      	ldr	r2, [r1, #4]
 800192a:	4022      	ands	r2, r4
 800192c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800192e:	4322      	orrs	r2, r4
 8001930:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001932:	071a      	lsls	r2, r3, #28
 8001934:	d506      	bpl.n	8001944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001936:	6801      	ldr	r1, [r0, #0]
 8001938:	4c1d      	ldr	r4, [pc, #116]	; (80019b0 <UART_AdvFeatureConfig+0xb8>)
 800193a:	684a      	ldr	r2, [r1, #4]
 800193c:	4022      	ands	r2, r4
 800193e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001940:	4322      	orrs	r2, r4
 8001942:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001944:	06da      	lsls	r2, r3, #27
 8001946:	d506      	bpl.n	8001956 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001948:	6801      	ldr	r1, [r0, #0]
 800194a:	4c1a      	ldr	r4, [pc, #104]	; (80019b4 <UART_AdvFeatureConfig+0xbc>)
 800194c:	688a      	ldr	r2, [r1, #8]
 800194e:	4022      	ands	r2, r4
 8001950:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001952:	4322      	orrs	r2, r4
 8001954:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001956:	069a      	lsls	r2, r3, #26
 8001958:	d506      	bpl.n	8001968 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800195a:	6801      	ldr	r1, [r0, #0]
 800195c:	4c16      	ldr	r4, [pc, #88]	; (80019b8 <UART_AdvFeatureConfig+0xc0>)
 800195e:	688a      	ldr	r2, [r1, #8]
 8001960:	4022      	ands	r2, r4
 8001962:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001964:	4322      	orrs	r2, r4
 8001966:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001968:	065a      	lsls	r2, r3, #25
 800196a:	d510      	bpl.n	800198e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800196c:	6801      	ldr	r1, [r0, #0]
 800196e:	4d13      	ldr	r5, [pc, #76]	; (80019bc <UART_AdvFeatureConfig+0xc4>)
 8001970:	684a      	ldr	r2, [r1, #4]
 8001972:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001974:	402a      	ands	r2, r5
 8001976:	4322      	orrs	r2, r4
 8001978:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	0352      	lsls	r2, r2, #13
 800197e:	4294      	cmp	r4, r2
 8001980:	d105      	bne.n	800198e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001982:	684a      	ldr	r2, [r1, #4]
 8001984:	4c0e      	ldr	r4, [pc, #56]	; (80019c0 <UART_AdvFeatureConfig+0xc8>)
 8001986:	4022      	ands	r2, r4
 8001988:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800198a:	4322      	orrs	r2, r4
 800198c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800198e:	061b      	lsls	r3, r3, #24
 8001990:	d506      	bpl.n	80019a0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001992:	6802      	ldr	r2, [r0, #0]
 8001994:	490b      	ldr	r1, [pc, #44]	; (80019c4 <UART_AdvFeatureConfig+0xcc>)
 8001996:	6853      	ldr	r3, [r2, #4]
 8001998:	400b      	ands	r3, r1
 800199a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800199c:	430b      	orrs	r3, r1
 800199e:	6053      	str	r3, [r2, #4]
  }
}
 80019a0:	bd30      	pop	{r4, r5, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fffdffff 	.word	0xfffdffff
 80019a8:	fffeffff 	.word	0xfffeffff
 80019ac:	fffbffff 	.word	0xfffbffff
 80019b0:	ffff7fff 	.word	0xffff7fff
 80019b4:	ffffefff 	.word	0xffffefff
 80019b8:	ffffdfff 	.word	0xffffdfff
 80019bc:	ffefffff 	.word	0xffefffff
 80019c0:	ff9fffff 	.word	0xff9fffff
 80019c4:	fff7ffff 	.word	0xfff7ffff

080019c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80019c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019ca:	2780      	movs	r7, #128	; 0x80
{
 80019cc:	0004      	movs	r4, r0
 80019ce:	000e      	movs	r6, r1
 80019d0:	0015      	movs	r5, r2
 80019d2:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019d4:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	69d3      	ldr	r3, [r2, #28]
 80019da:	4033      	ands	r3, r6
 80019dc:	1b9b      	subs	r3, r3, r6
 80019de:	4259      	negs	r1, r3
 80019e0:	414b      	adcs	r3, r1
 80019e2:	42ab      	cmp	r3, r5
 80019e4:	d001      	beq.n	80019ea <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e01c      	b.n	8001a24 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80019ea:	9b08      	ldr	r3, [sp, #32]
 80019ec:	3301      	adds	r3, #1
 80019ee:	d0f3      	beq.n	80019d8 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f0:	f7fe fc6a 	bl	80002c8 <HAL_GetTick>
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	9a08      	ldr	r2, [sp, #32]
 80019f8:	1ac0      	subs	r0, r0, r3
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	4282      	cmp	r2, r0
 80019fe:	d301      	bcc.n	8001a04 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001a00:	2a00      	cmp	r2, #0
 8001a02:	d110      	bne.n	8001a26 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	31a3      	adds	r1, #163	; 0xa3
 8001a10:	31ff      	adds	r1, #255	; 0xff
 8001a12:	438a      	bics	r2, r1
 8001a14:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001a16:	2320      	movs	r3, #32
 8001a18:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001a1a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001a1c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001a20:	3470      	adds	r4, #112	; 0x70
 8001a22:	7023      	strb	r3, [r4, #0]
}
 8001a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001a26:	2104      	movs	r1, #4
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	420a      	tst	r2, r1
 8001a2c:	d0d3      	beq.n	80019d6 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	423a      	tst	r2, r7
 8001a32:	d0d0      	beq.n	80019d6 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a34:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4906      	ldr	r1, [pc, #24]	; (8001a54 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	31a3      	adds	r1, #163	; 0xa3
 8001a42:	31ff      	adds	r1, #255	; 0xff
 8001a44:	438a      	bics	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001a4c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a4e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001a50:	e7e4      	b.n	8001a1c <UART_WaitOnFlagUntilTimeout+0x54>
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	fffffe5f 	.word	0xfffffe5f

08001a58 <HAL_UART_Transmit>:
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001a60:	0004      	movs	r4, r0
 8001a62:	000d      	movs	r5, r1
 8001a64:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001a66:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d149      	bne.n	8001b00 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001a6c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001a6e:	2900      	cmp	r1, #0
 8001a70:	d046      	beq.n	8001b00 <HAL_UART_Transmit+0xa8>
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d044      	beq.n	8001b00 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	68a2      	ldr	r2, [r4, #8]
 8001a7a:	015b      	lsls	r3, r3, #5
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d104      	bne.n	8001a8a <HAL_UART_Transmit+0x32>
 8001a80:	6923      	ldr	r3, [r4, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a86:	4201      	tst	r1, r0
 8001a88:	d13a      	bne.n	8001b00 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001a8a:	0023      	movs	r3, r4
 8001a8c:	3370      	adds	r3, #112	; 0x70
 8001a8e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001a90:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001a92:	2a01      	cmp	r2, #1
 8001a94:	d034      	beq.n	8001b00 <HAL_UART_Transmit+0xa8>
 8001a96:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a98:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001a9a:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a9c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9e:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa0:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001aa2:	f7fe fc11 	bl	80002c8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001aa6:	0023      	movs	r3, r4
 8001aa8:	3350      	adds	r3, #80	; 0x50
 8001aaa:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001aac:	3302      	adds	r3, #2
 8001aae:	9303      	str	r3, [sp, #12]
 8001ab0:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001ab6:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab8:	015b      	lsls	r3, r3, #5
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d104      	bne.n	8001ac8 <HAL_UART_Transmit+0x70>
 8001abe:	6923      	ldr	r3, [r4, #16]
 8001ac0:	42b3      	cmp	r3, r6
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x70>
 8001ac4:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001ac6:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001ac8:	0023      	movs	r3, r4
 8001aca:	3352      	adds	r3, #82	; 0x52
 8001acc:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ace:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001ad0:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001ad6:	2a00      	cmp	r2, #0
 8001ad8:	d10a      	bne.n	8001af0 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	0020      	movs	r0, r4
 8001ade:	f7ff ff73 	bl	80019c8 <UART_WaitOnFlagUntilTimeout>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d10b      	bne.n	8001afe <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001ae6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001ae8:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001aea:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001aec:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001aee:	e007      	b.n	8001b00 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001af0:	2200      	movs	r2, #0
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0020      	movs	r0, r4
 8001af6:	f7ff ff67 	bl	80019c8 <UART_WaitOnFlagUntilTimeout>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001afe:	2003      	movs	r0, #3
}
 8001b00:	b007      	add	sp, #28
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b04:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001b06:	2d00      	cmp	r5, #0
 8001b08:	d10b      	bne.n	8001b22 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b0a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001b0c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b0e:	05db      	lsls	r3, r3, #23
 8001b10:	0ddb      	lsrs	r3, r3, #23
 8001b12:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001b14:	9b03      	ldr	r3, [sp, #12]
 8001b16:	9a03      	ldr	r2, [sp, #12]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	8013      	strh	r3, [r2, #0]
 8001b20:	e7d2      	b.n	8001ac8 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b22:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001b24:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b26:	8513      	strh	r3, [r2, #40]	; 0x28
 8001b28:	e7f4      	b.n	8001b14 <HAL_UART_Transmit+0xbc>
	...

08001b2c <UART_CheckIdleState>:
{
 8001b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2e:	2600      	movs	r6, #0
{
 8001b30:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b32:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b34:	f7fe fbc8 	bl	80002c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b38:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b3a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	071b      	lsls	r3, r3, #28
 8001b40:	d415      	bmi.n	8001b6e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	075b      	lsls	r3, r3, #29
 8001b48:	d50a      	bpl.n	8001b60 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <UART_CheckIdleState+0x5c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	03c9      	lsls	r1, r1, #15
 8001b54:	002b      	movs	r3, r5
 8001b56:	0020      	movs	r0, r4
 8001b58:	f7ff ff36 	bl	80019c8 <UART_WaitOnFlagUntilTimeout>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d111      	bne.n	8001b84 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001b60:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b62:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b64:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b66:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001b68:	3470      	adds	r4, #112	; 0x70
 8001b6a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001b6c:	e00b      	b.n	8001b86 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <UART_CheckIdleState+0x5c>)
 8001b72:	0032      	movs	r2, r6
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	0389      	lsls	r1, r1, #14
 8001b78:	0003      	movs	r3, r0
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	f7ff ff24 	bl	80019c8 <UART_WaitOnFlagUntilTimeout>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d0de      	beq.n	8001b42 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
}
 8001b86:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001b88:	01ffffff 	.word	0x01ffffff

08001b8c <HAL_UART_Init>:
{
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
}
 8001b94:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b96:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	3270      	adds	r2, #112	; 0x70
 8001ba0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001ba2:	f000 fb6b 	bl	800227c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ba6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001bac:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001bae:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001bb2:	438b      	bics	r3, r1
 8001bb4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb6:	f7ff fdf9 	bl	80017ac <UART_SetConfig>
 8001bba:	2801      	cmp	r0, #1
 8001bbc:	d0e9      	beq.n	8001b92 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	f7ff fe97 	bl	80018f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <HAL_UART_Init+0x60>)
 8001bce:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001bd0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bd2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bd4:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	438a      	bics	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bde:	2201      	movs	r2, #1
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001be6:	f7ff ffa1 	bl	8001b2c <UART_CheckIdleState>
 8001bea:	e7d3      	b.n	8001b94 <HAL_UART_Init+0x8>
 8001bec:	fffff7ff 	.word	0xfffff7ff

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf2:	2510      	movs	r5, #16
{
 8001bf4:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	2230      	movs	r2, #48	; 0x30
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	a804      	add	r0, sp, #16
 8001bfc:	f000 fc3b 	bl	8002476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	002a      	movs	r2, r5
 8001c02:	2100      	movs	r1, #0
 8001c04:	4668      	mov	r0, sp
 8001c06:	f000 fc36 	bl	8002476 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c0e:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c12:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c14:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c16:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c18:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c1c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1e:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c20:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c22:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c24:	f7fe ff48 	bl	8000ab8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	2307      	movs	r3, #7
 8001c2a:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c2e:	0021      	movs	r1, r4
 8001c30:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c32:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c36:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c38:	f7ff f972 	bl	8000f20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c3c:	b011      	add	sp, #68	; 0x44
 8001c3e:	bd30      	pop	{r4, r5, pc}

08001c40 <main>:
{
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001c44:	f7fe fb24 	bl	8000290 <HAL_Init>
  SystemClock_Config();
 8001c48:	f7ff ffd2 	bl	8001bf0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	2214      	movs	r2, #20
 8001c4e:	2100      	movs	r1, #0
 8001c50:	a80d      	add	r0, sp, #52	; 0x34
 8001c52:	f000 fc10 	bl	8002476 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	2080      	movs	r0, #128	; 0x80
 8001c58:	4bcf      	ldr	r3, [pc, #828]	; (8001f98 <main+0x358>)
 8001c5a:	0300      	lsls	r0, r0, #12
 8001c5c:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|L_595_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	4301      	orrs	r1, r0
 8001c62:	6159      	str	r1, [r3, #20]
 8001c64:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c66:	2411      	movs	r4, #17
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	9203      	str	r2, [sp, #12]
 8001c6e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c70:	6959      	ldr	r1, [r3, #20]
 8001c72:	03c0      	lsls	r0, r0, #15
 8001c74:	4301      	orrs	r1, r0
 8001c76:	6159      	str	r1, [r3, #20]
 8001c78:	695a      	ldr	r2, [r3, #20]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7a:	270c      	movs	r7, #12
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c7c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c80:	9204      	str	r2, [sp, #16]
 8001c82:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	6959      	ldr	r1, [r3, #20]
 8001c86:	0280      	lsls	r0, r0, #10
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4002      	ands	r2, r0
 8001c94:	9205      	str	r2, [sp, #20]
 8001c96:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|CLK_595_Pin|D_595_Pin, GPIO_PIN_RESET);
 8001c9a:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|CLK_595_Pin|D_595_Pin, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|CLK_595_Pin|D_595_Pin, GPIO_PIN_RESET);
 8001ca6:	21d8      	movs	r1, #216	; 0xd8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|CLK_595_Pin|D_595_Pin, GPIO_PIN_RESET);
 8001caa:	0089      	lsls	r1, r1, #2
 8001cac:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|CLK_595_Pin|D_595_Pin, GPIO_PIN_RESET);
 8001cb0:	f7fe fefc 	bl	8000aac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|L_595_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2168      	movs	r1, #104	; 0x68
 8001cb8:	48b8      	ldr	r0, [pc, #736]	; (8001f9c <main+0x35c>)
 8001cba:	f7fe fef7 	bl	8000aac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cc4:	4bb6      	ldr	r3, [pc, #728]	; (8001fa0 <main+0x360>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	a90d      	add	r1, sp, #52	; 0x34
 8001cc8:	48b6      	ldr	r0, [pc, #728]	; (8001fa4 <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cca:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f7fe fe37 	bl	8000940 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001cd4:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	a90d      	add	r1, sp, #52	; 0x34
 8001cd8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001cda:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cdc:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f7fe fe2e 	bl	8000940 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001ce6:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	a90d      	add	r1, sp, #52	; 0x34
 8001cea:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001cec:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001cee:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f7fe fe24 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cf8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	a90d      	add	r1, sp, #52	; 0x34
 8001cfc:	48a7      	ldr	r0, [pc, #668]	; (8001f9c <main+0x35c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cfe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	f7fe fe1c 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_595_Pin D_595_Pin */
  GPIO_InitStruct.Pin = CLK_595_Pin|D_595_Pin;
 8001d08:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = CLK_595_Pin|D_595_Pin;
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	a90d      	add	r1, sp, #52	; 0x34
 8001d14:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f7fe fe10 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001d20:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	a90d      	add	r1, sp, #52	; 0x34
 8001d24:	489d      	ldr	r0, [pc, #628]	; (8001f9c <main+0x35c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001d26:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d28:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f7fe fe07 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_595_Pin */
  GPIO_InitStruct.Pin = L_595_Pin;
 8001d32:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(L_595_GPIO_Port, &GPIO_InitStruct);
 8001d34:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = L_595_Pin;
 8001d36:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(L_595_GPIO_Port, &GPIO_InitStruct);
 8001d38:	4898      	ldr	r0, [pc, #608]	; (8001f9c <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	3b1f      	subs	r3, #31
 8001d3c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(L_595_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f7fe fdfd 	bl	8000940 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001d46:	4898      	ldr	r0, [pc, #608]	; (8001fa8 <main+0x368>)
 8001d48:	4b98      	ldr	r3, [pc, #608]	; (8001fac <main+0x36c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	2680      	movs	r6, #128	; 0x80
  huart2.Instance = USART2;
 8001d4c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8001d4e:	2396      	movs	r3, #150	; 0x96
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d54:	6085      	str	r5, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d56:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d58:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5a:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5c:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5e:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d60:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d62:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d64:	f7ff ff12 	bl	8001b8c <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d68:	0029      	movs	r1, r5
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	a809      	add	r0, sp, #36	; 0x24
 8001d6e:	f000 fb82 	bl	8002476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d72:	0029      	movs	r1, r5
 8001d74:	2208      	movs	r2, #8
 8001d76:	a807      	add	r0, sp, #28
 8001d78:	f000 fb7d 	bl	8002476 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	221c      	movs	r2, #28
 8001d7e:	0029      	movs	r1, r5
 8001d80:	a80d      	add	r0, sp, #52	; 0x34
 8001d82:	f000 fb78 	bl	8002476 <memset>
  htim3.Instance = TIM3;
 8001d86:	4c8a      	ldr	r4, [pc, #552]	; (8001fb0 <main+0x370>)
 8001d88:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <main+0x374>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d8a:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8001d8c:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 0;
 8001d8e:	6065      	str	r5, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 0;
 8001d92:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	61a5      	str	r5, [r4, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d98:	0176      	lsls	r6, r6, #5
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d9a:	f7ff fb19 	bl	80013d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d9e:	a909      	add	r1, sp, #36	; 0x24
 8001da0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001da4:	f7ff fc00 	bl	80015a8 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da8:	0020      	movs	r0, r4
 8001daa:	f7ff fb2c 	bl	8001406 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dae:	a907      	add	r1, sp, #28
 8001db0:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db2:	9507      	str	r5, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	9508      	str	r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db6:	f7ff fcc7 	bl	8001748 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dba:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbc:	002a      	movs	r2, r5
 8001dbe:	a90d      	add	r1, sp, #52	; 0x34
 8001dc0:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001dc4:	950e      	str	r5, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc8:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	f7ff fb77 	bl	80014bc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f000 fa12 	bl	80021f8 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dd4:	003a      	movs	r2, r7
 8001dd6:	0029      	movs	r1, r5
 8001dd8:	a80d      	add	r0, sp, #52	; 0x34
 8001dda:	f000 fb4c 	bl	8002476 <memset>
  hadc.Instance = ADC1;
 8001dde:	4c76      	ldr	r4, [pc, #472]	; (8001fb8 <main+0x378>)
 8001de0:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <main+0x37c>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001de2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8001de4:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001de6:	2301      	movs	r3, #1
 8001de8:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dea:	3303      	adds	r3, #3
 8001dec:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dee:	23c2      	movs	r3, #194	; 0xc2
 8001df0:	33ff      	adds	r3, #255	; 0xff
 8001df2:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001df4:	1d63      	adds	r3, r4, #5
 8001df6:	77dd      	strb	r5, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001df8:	2301      	movs	r3, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001dfa:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfc:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dfe:	60e5      	str	r5, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e00:	7625      	strb	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e02:	7665      	strb	r5, [r4, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001e04:	76a5      	strb	r5, [r4, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e06:	76e5      	strb	r5, [r4, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e08:	6225      	str	r5, [r4, #32]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e0a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e0c:	f7fe fb24 	bl	8000458 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e10:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e12:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e14:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e16:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001e18:	950d      	str	r5, [sp, #52]	; 0x34
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e1a:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e1c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e1e:	f7fe fc6f 	bl	8000700 <HAL_ADC_ConfigChannel>
  htim6.Instance = TIM6;
 8001e22:	4f67      	ldr	r7, [pc, #412]	; (8001fc0 <main+0x380>)
 8001e24:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <main+0x384>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e26:	0038      	movs	r0, r7
  htim6.Instance = TIM6;
 8001e28:	603b      	str	r3, [r7, #0]
  htim6.Init.Prescaler = 47999;
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <main+0x388>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2c:	60bd      	str	r5, [r7, #8]
  htim6.Init.Prescaler = 47999;
 8001e2e:	607b      	str	r3, [r7, #4]
  htim6.Init.Period = 1;
 8001e30:	2301      	movs	r3, #1
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	61bd      	str	r5, [r7, #24]
  htim6.Init.Period = 1;
 8001e34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e36:	f7ff facb 	bl	80013d0 <HAL_TIM_Base_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3a:	0029      	movs	r1, r5
 8001e3c:	221c      	movs	r2, #28
 8001e3e:	a80d      	add	r0, sp, #52	; 0x34
 8001e40:	f000 fb19 	bl	8002476 <memset>
  htim14.Instance = TIM14;
 8001e44:	4e61      	ldr	r6, [pc, #388]	; (8001fcc <main+0x38c>)
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <main+0x390>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e48:	0030      	movs	r0, r6
  htim14.Instance = TIM14;
 8001e4a:	6033      	str	r3, [r6, #0]
  htim14.Init.Period = 65535;
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <main+0x394>)
  htim14.Init.Prescaler = 0;
 8001e4e:	6075      	str	r5, [r6, #4]
  htim14.Init.Period = 65535;
 8001e50:	60f3      	str	r3, [r6, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e52:	60b5      	str	r5, [r6, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	6135      	str	r5, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e56:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e58:	f7ff faba 	bl	80013d0 <HAL_TIM_Base_Init>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e5c:	0030      	movs	r0, r6
 8001e5e:	f7ff fad2 	bl	8001406 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e64:	002a      	movs	r2, r5
 8001e66:	a90d      	add	r1, sp, #52	; 0x34
 8001e68:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001e6c:	950e      	str	r5, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e72:	f7ff fb23 	bl	80014bc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim14);
 8001e76:	0030      	movs	r0, r6
 8001e78:	f000 f9be 	bl	80021f8 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim6);
 8001e7c:	0038      	movs	r0, r7
 8001e7e:	f7ff f9a5 	bl	80011cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001e82:	0029      	movs	r1, r5
 8001e84:	0030      	movs	r0, r6
 8001e86:	f7ff fc33 	bl	80016f0 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc);
 8001e8a:	0020      	movs	r0, r4
 8001e8c:	f7fe fcae 	bl	80007ec <HAL_ADCEx_Calibration_Start>
  printf("Start system\r\n");
 8001e90:	4851      	ldr	r0, [pc, #324]	; (8001fd8 <main+0x398>)
 8001e92:	f000 fb73 	bl	800257c <puts>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e96:	002a      	movs	r2, r5
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001e98:	2590      	movs	r5, #144	; 0x90
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	483f      	ldr	r0, [pc, #252]	; (8001f9c <main+0x35c>)
 8001e9e:	f7fe fe05 	bl	8000aac <HAL_GPIO_WritePin>
  HAL_Delay(150);
 8001ea2:	2096      	movs	r0, #150	; 0x96
 8001ea4:	f7fe fa16 	bl	80002d4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2108      	movs	r1, #8
 8001eac:	483b      	ldr	r0, [pc, #236]	; (8001f9c <main+0x35c>)
 8001eae:	f7fe fdfd 	bl	8000aac <HAL_GPIO_WritePin>
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <main+0x390>)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001eb4:	05ed      	lsls	r5, r5, #23
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <main+0x394>)
 8001eba:	9301      	str	r3, [sp, #4]
	  HAL_ADC_Start(&hadc);
 8001ebc:	0020      	movs	r0, r4
 8001ebe:	f7fe fb73 	bl	80005a8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100);
 8001ec2:	2164      	movs	r1, #100	; 0x64
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	f7fe fbb9 	bl	800063c <HAL_ADC_PollForConversion>
	  adc = HAL_ADC_GetValue(&hadc);
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f7fe fc14 	bl	80006f8 <HAL_ADC_GetValue>
 8001ed0:	4e42      	ldr	r6, [pc, #264]	; (8001fdc <main+0x39c>)
 8001ed2:	8030      	strh	r0, [r6, #0]
	  HAL_ADC_Stop(&hadc);
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	f7fe fb93 	bl	8000600 <HAL_ADC_Stop>
	  TIM14->CCR1 = 65535-(adc*16);
 8001eda:	8832      	ldrh	r2, [r6, #0]
 8001edc:	9901      	ldr	r1, [sp, #4]
 8001ede:	0113      	lsls	r3, r2, #4
 8001ee0:	1acb      	subs	r3, r1, r3
	  sprintf(str,"%d\r\n",adc);
 8001ee2:	4f3f      	ldr	r7, [pc, #252]	; (8001fe0 <main+0x3a0>)
	  TIM14->CCR1 = 65535-(adc*16);
 8001ee4:	9900      	ldr	r1, [sp, #0]
	  sprintf(str,"%d\r\n",adc);
 8001ee6:	0038      	movs	r0, r7
	  TIM14->CCR1 = 65535-(adc*16);
 8001ee8:	634b      	str	r3, [r1, #52]	; 0x34
	  sprintf(str,"%d\r\n",adc);
 8001eea:	493e      	ldr	r1, [pc, #248]	; (8001fe4 <main+0x3a4>)
 8001eec:	f000 fb50 	bl	8002590 <siprintf>
	  printf(str);
 8001ef0:	0038      	movs	r0, r7
 8001ef2:	f000 fac9 	bl	8002488 <iprintf>
	  if(adc>=2000){
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <main+0x3a8>)
 8001ef8:	8832      	ldrh	r2, [r6, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d944      	bls.n	8001f88 <main+0x348>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2120      	movs	r1, #32
 8001f02:	0028      	movs	r0, r5
 8001f04:	f7fe fdd2 	bl	8000aac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2140      	movs	r1, #64	; 0x40
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f0c:	0028      	movs	r0, r5
 8001f0e:	f7fe fdcd 	bl	8000aac <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8001f12:	2102      	movs	r1, #2
 8001f14:	0028      	movs	r0, r5
 8001f16:	f7fe fdc3 	bl	8000aa0 <HAL_GPIO_ReadPin>
 8001f1a:	1e02      	subs	r2, r0, #0
 8001f1c:	d10b      	bne.n	8001f36 <main+0x2f6>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f1e:	2108      	movs	r1, #8
 8001f20:	481e      	ldr	r0, [pc, #120]	; (8001f9c <main+0x35c>)
 8001f22:	f7fe fdc3 	bl	8000aac <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8001f26:	2096      	movs	r0, #150	; 0x96
 8001f28:	f7fe f9d4 	bl	80002d4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2108      	movs	r1, #8
 8001f30:	481a      	ldr	r0, [pc, #104]	; (8001f9c <main+0x35c>)
 8001f32:	f7fe fdbb 	bl	8000aac <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001f36:	2110      	movs	r1, #16
 8001f38:	0028      	movs	r0, r5
 8001f3a:	f7fe fdb1 	bl	8000aa0 <HAL_GPIO_ReadPin>
 8001f3e:	1e02      	subs	r2, r0, #0
 8001f40:	d10b      	bne.n	8001f5a <main+0x31a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f42:	2108      	movs	r1, #8
 8001f44:	4815      	ldr	r0, [pc, #84]	; (8001f9c <main+0x35c>)
 8001f46:	f7fe fdb1 	bl	8000aac <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8001f4a:	2096      	movs	r0, #150	; 0x96
 8001f4c:	f7fe f9c2 	bl	80002d4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2108      	movs	r1, #8
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <main+0x35c>)
 8001f56:	f7fe fda9 	bl	8000aac <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	480f      	ldr	r0, [pc, #60]	; (8001f9c <main+0x35c>)
 8001f5e:	f7fe fd9f 	bl	8000aa0 <HAL_GPIO_ReadPin>
 8001f62:	1e02      	subs	r2, r0, #0
 8001f64:	d10b      	bne.n	8001f7e <main+0x33e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f66:	2108      	movs	r1, #8
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <main+0x35c>)
 8001f6a:	f7fe fd9f 	bl	8000aac <HAL_GPIO_WritePin>
		  HAL_Delay(150);
 8001f6e:	2096      	movs	r0, #150	; 0x96
 8001f70:	f7fe f9b0 	bl	80002d4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2108      	movs	r1, #8
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <main+0x35c>)
 8001f7a:	f7fe fd97 	bl	8000aac <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001f7e:	20fa      	movs	r0, #250	; 0xfa
 8001f80:	0080      	lsls	r0, r0, #2
 8001f82:	f7fe f9a7 	bl	80002d4 <HAL_Delay>
  {
 8001f86:	e799      	b.n	8001ebc <main+0x27c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2140      	movs	r1, #64	; 0x40
 8001f8c:	0028      	movs	r0, r5
 8001f8e:	f7fe fd8d 	bl	8000aac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2120      	movs	r1, #32
 8001f96:	e7b9      	b.n	8001f0c <main+0x2cc>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	10210000 	.word	0x10210000
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	2000017c 	.word	0x2000017c
 8001fac:	40004400 	.word	0x40004400
 8001fb0:	200000fc 	.word	0x200000fc
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	2000023c 	.word	0x2000023c
 8001fbc:	40012400 	.word	0x40012400
 8001fc0:	2000013c 	.word	0x2000013c
 8001fc4:	40001000 	.word	0x40001000
 8001fc8:	0000bb7f 	.word	0x0000bb7f
 8001fcc:	200001fc 	.word	0x200001fc
 8001fd0:	40002000 	.word	0x40002000
 8001fd4:	0000ffff 	.word	0x0000ffff
 8001fd8:	0800378c 	.word	0x0800378c
 8001fdc:	200000b8 	.word	0x200000b8
 8001fe0:	200000ba 	.word	0x200000ba
 8001fe4:	0800379a 	.word	0x0800379a
 8001fe8:	000007cf 	.word	0x000007cf

08001fec <__io_putchar>:

}

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8001fec:	b507      	push	{r0, r1, r2, lr}
	 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__io_putchar+0x14>)
int __io_putchar(int ch){
 8001ff0:	9001      	str	r0, [sp, #4]
	 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	a901      	add	r1, sp, #4
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <__io_putchar+0x18>)
 8001ff8:	f7ff fd2e 	bl	8001a58 <HAL_UART_Transmit>
	return ch;
}
 8001ffc:	9801      	ldr	r0, [sp, #4]
 8001ffe:	bd0e      	pop	{r1, r2, r3, pc}
 8002000:	0000ffff 	.word	0x0000ffff
 8002004:	2000017c 	.word	0x2000017c

08002008 <Shift>:
	0x10	//4
};
uint8_t d=0;


void Shift(uint16_t tim, uint8_t d){
 8002008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800200a:	000f      	movs	r7, r1

	uint8_t r[4] = {tim/1000%10,tim/100%10,tim/10%10,0};
 800200c:	21fa      	movs	r1, #250	; 0xfa
 800200e:	0089      	lsls	r1, r1, #2
void Shift(uint16_t tim, uint8_t d){
 8002010:	0004      	movs	r4, r0
	uint8_t r[4] = {tim/1000%10,tim/100%10,tim/10%10,0};
 8002012:	f7fe f88d 	bl	8000130 <__udivsi3>
 8002016:	210a      	movs	r1, #10
 8002018:	b280      	uxth	r0, r0
 800201a:	f7fe f90f 	bl	800023c <__aeabi_uidivmod>
 800201e:	ad01      	add	r5, sp, #4
 8002020:	7029      	strb	r1, [r5, #0]
 8002022:	0020      	movs	r0, r4
 8002024:	2164      	movs	r1, #100	; 0x64
 8002026:	f7fe f883 	bl	8000130 <__udivsi3>
 800202a:	210a      	movs	r1, #10
 800202c:	b280      	uxth	r0, r0
 800202e:	f7fe f905 	bl	800023c <__aeabi_uidivmod>
 8002032:	0020      	movs	r0, r4
 8002034:	7069      	strb	r1, [r5, #1]
 8002036:	210a      	movs	r1, #10
 8002038:	f7fe f87a 	bl	8000130 <__udivsi3>
 800203c:	210a      	movs	r1, #10
 800203e:	b280      	uxth	r0, r0
 8002040:	f7fe f8fc 	bl	800023c <__aeabi_uidivmod>
 8002044:	2400      	movs	r4, #0
		for(uint8_t i=0; i<8; i++){
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002046:	2690      	movs	r6, #144	; 0x90
	uint8_t r[4] = {tim/1000%10,tim/100%10,tim/10%10,0};
 8002048:	70a9      	strb	r1, [r5, #2]
 800204a:	70ec      	strb	r4, [r5, #3]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800204c:	05f6      	lsls	r6, r6, #23
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	2200      	movs	r2, #0
 8002052:	0049      	lsls	r1, r1, #1
 8002054:	0030      	movs	r0, r6
 8002056:	f7fe fd29 	bl	8000aac <HAL_GPIO_WritePin>
			if(digits[r[d]] & (1 << i )){
 800205a:	5deb      	ldrb	r3, [r5, r7]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <Shift+0xd4>)
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	5a9b      	ldrh	r3, [r3, r2]
 8002062:	2201      	movs	r2, #1
 8002064:	4123      	asrs	r3, r4
 8002066:	4213      	tst	r3, r2
 8002068:	d000      	beq.n	800206c <Shift+0x64>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); 
 800206a:	2200      	movs	r2, #0
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0030      	movs	r0, r6
 8002070:	0089      	lsls	r1, r1, #2
 8002072:	f7fe fd1b 	bl	8000aac <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	2201      	movs	r2, #1
 800207a:	0049      	lsls	r1, r1, #1
 800207c:	0030      	movs	r0, r6
 800207e:	3401      	adds	r4, #1
 8002080:	f7fe fd14 	bl	8000aac <HAL_GPIO_WritePin>
		for(uint8_t i=0; i<8; i++){
 8002084:	2c08      	cmp	r4, #8
 8002086:	d1e2      	bne.n	800204e <Shift+0x46>
		}		
		for(uint8_t i=0; i<8; i++){
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002088:	2680      	movs	r6, #128	; 0x80
 800208a:	2590      	movs	r5, #144	; 0x90
 800208c:	2400      	movs	r4, #0
 800208e:	0076      	lsls	r6, r6, #1
 8002090:	05ed      	lsls	r5, r5, #23
 8002092:	2200      	movs	r2, #0
 8002094:	0031      	movs	r1, r6
 8002096:	0028      	movs	r0, r5
 8002098:	f7fe fd08 	bl	8000aac <HAL_GPIO_WritePin>
			if(seg[d] & (1 << i )){
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <Shift+0xd8>)
 800209e:	007a      	lsls	r2, r7, #1
 80020a0:	5ad2      	ldrh	r2, [r2, r3]
 80020a2:	2101      	movs	r1, #1
 80020a4:	4122      	asrs	r2, r4
 80020a6:	400a      	ands	r2, r1
 80020a8:	d000      	beq.n	80020ac <Shift+0xa4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); 
 80020aa:	000a      	movs	r2, r1
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0028      	movs	r0, r5
 80020b0:	0089      	lsls	r1, r1, #2
 80020b2:	f7fe fcfb 	bl	8000aac <HAL_GPIO_WritePin>
 80020b6:	3401      	adds	r4, #1
			}
			
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
 80020b8:	2201      	movs	r2, #1
 80020ba:	0031      	movs	r1, r6
 80020bc:	0028      	movs	r0, r5
 80020be:	f7fe fcf5 	bl	8000aac <HAL_GPIO_WritePin>
		for(uint8_t i=0; i<8; i++){
 80020c2:	2c08      	cmp	r4, #8
 80020c4:	d1e5      	bne.n	8002092 <Shift+0x8a>
		}			
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2120      	movs	r1, #32
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <Shift+0xdc>)
 80020cc:	f7fe fcee 	bl	8000aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2120      	movs	r1, #32
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <Shift+0xdc>)
 80020d6:	f7fe fce9 	bl	8000aac <HAL_GPIO_WritePin>
	d++;
	if(d>=4){d=0;}
	
	}
 80020da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80020dc:	20000008 	.word	0x20000008
 80020e0:	2000002c 	.word	0x2000002c
 80020e4:	48000400 	.word	0x48000400

080020e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	2001      	movs	r0, #1
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_MspInit+0x2c>)
{
 80020ec:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	6999      	ldr	r1, [r3, #24]
 80020f0:	4301      	orrs	r1, r0
 80020f2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4002      	ands	r2, r0
 80020fc:	9200      	str	r2, [sp, #0]
 80020fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	430a      	orrs	r2, r1
 8002104:	61da      	str	r2, [r3, #28]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	400b      	ands	r3, r1
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	b002      	add	sp, #8
 8002110:	4770      	bx	lr
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002118:	b510      	push	{r4, lr}
 800211a:	0004      	movs	r4, r0
 800211c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211e:	2214      	movs	r2, #20
 8002120:	2100      	movs	r1, #0
 8002122:	a803      	add	r0, sp, #12
 8002124:	f000 f9a7 	bl	8002476 <memset>
  if(hadc->Instance==ADC1)
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_ADC_MspInit+0x54>)
 800212a:	6822      	ldr	r2, [r4, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d11b      	bne.n	8002168 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002130:	2080      	movs	r0, #128	; 0x80
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_ADC_MspInit+0x58>)
 8002134:	0080      	lsls	r0, r0, #2
 8002136:	6999      	ldr	r1, [r3, #24]
 8002138:	4301      	orrs	r1, r0
 800213a:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800213e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002142:	4002      	ands	r2, r0
 8002144:	9201      	str	r2, [sp, #4]
 8002146:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
 8002150:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	400b      	ands	r3, r1
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002160:	3302      	adds	r3, #2
 8002162:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f7fe fbec 	bl	8000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002168:	b008      	add	sp, #32
 800216a:	bd10      	pop	{r4, pc}
 800216c:	40012400 	.word	0x40012400
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM3)
 8002176:	6803      	ldr	r3, [r0, #0]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_TIM_Base_MspInit+0x74>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10a      	bne.n	8002194 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217e:	2002      	movs	r0, #2
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_TIM_Base_MspInit+0x78>)
 8002182:	69d1      	ldr	r1, [r2, #28]
 8002184:	4301      	orrs	r1, r0
 8002186:	61d1      	str	r1, [r2, #28]
 8002188:	69d3      	ldr	r3, [r2, #28]
 800218a:	4003      	ands	r3, r0
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002190:	b005      	add	sp, #20
 8002192:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM6)
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <HAL_TIM_Base_MspInit+0x7c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800219a:	2010      	movs	r0, #16
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_TIM_Base_MspInit+0x78>)
 800219e:	69d1      	ldr	r1, [r2, #28]
 80021a0:	4301      	orrs	r1, r0
 80021a2:	61d1      	str	r1, [r2, #28]
 80021a4:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021a8:	4003      	ands	r3, r0
 80021aa:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80021ac:	3001      	adds	r0, #1
 80021ae:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021b0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80021b2:	f7fe fb6f 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80021b6:	2011      	movs	r0, #17
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80021b8:	f7fe fb9c 	bl	80008f4 <HAL_NVIC_EnableIRQ>
}
 80021bc:	e7e8      	b.n	8002190 <HAL_TIM_Base_MspInit+0x1c>
  else if(htim_base->Instance==TIM14)
 80021be:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_TIM_Base_MspInit+0x80>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d1e5      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021c4:	2080      	movs	r0, #128	; 0x80
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_TIM_Base_MspInit+0x78>)
 80021c8:	0040      	lsls	r0, r0, #1
 80021ca:	69d1      	ldr	r1, [r2, #28]
 80021cc:	4301      	orrs	r1, r0
 80021ce:	61d1      	str	r1, [r2, #28]
 80021d0:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021d4:	4003      	ands	r3, r0
 80021d6:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80021d8:	38ed      	subs	r0, #237	; 0xed
 80021da:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021dc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80021de:	f7fe fb59 	bl	8000894 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80021e2:	2013      	movs	r0, #19
 80021e4:	e7e8      	b.n	80021b8 <HAL_TIM_Base_MspInit+0x44>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40001000 	.word	0x40001000
 80021f4:	40002000 	.word	0x40002000

080021f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f8:	b510      	push	{r4, lr}
 80021fa:	0004      	movs	r4, r0
 80021fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fe:	2214      	movs	r2, #20
 8002200:	2100      	movs	r1, #0
 8002202:	a803      	add	r0, sp, #12
 8002204:	f000 f937 	bl	8002476 <memset>
  if(htim->Instance==TIM3)
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_TIM_MspPostInit+0x74>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d115      	bne.n	800223c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	2080      	movs	r0, #128	; 0x80
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_MspPostInit+0x78>)
 8002214:	02c0      	lsls	r0, r0, #11
 8002216:	6951      	ldr	r1, [r2, #20]
 8002218:	4301      	orrs	r1, r0
 800221a:	6151      	str	r1, [r2, #20]
 800221c:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002220:	4003      	ands	r3, r0
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002226:	2310      	movs	r3, #16
 8002228:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	3b0e      	subs	r3, #14
 800222c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	4811      	ldr	r0, [pc, #68]	; (8002274 <HAL_TIM_MspPostInit+0x7c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002230:	3b01      	subs	r3, #1
 8002232:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f7fe fb84 	bl	8000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002238:	b008      	add	sp, #32
 800223a:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM14)
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_TIM_MspPostInit+0x80>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d1fa      	bne.n	8002238 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_TIM_MspPostInit+0x78>)
 8002246:	0280      	lsls	r0, r0, #10
 8002248:	6951      	ldr	r1, [r2, #20]
 800224a:	4301      	orrs	r1, r0
 800224c:	6151      	str	r1, [r2, #20]
 800224e:	6953      	ldr	r3, [r2, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	4003      	ands	r3, r0
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002258:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	3b7e      	subs	r3, #126	; 0x7e
 8002260:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002262:	3302      	adds	r3, #2
 8002264:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	05c0      	lsls	r0, r0, #23
 8002268:	e7e4      	b.n	8002234 <HAL_TIM_MspPostInit+0x3c>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	40000400 	.word	0x40000400
 8002270:	40021000 	.word	0x40021000
 8002274:	48000400 	.word	0x48000400
 8002278:	40002000 	.word	0x40002000

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b510      	push	{r4, lr}
 800227e:	0004      	movs	r4, r0
 8002280:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002282:	2214      	movs	r2, #20
 8002284:	2100      	movs	r1, #0
 8002286:	a803      	add	r0, sp, #12
 8002288:	f000 f8f5 	bl	8002476 <memset>
  if(huart->Instance==USART2)
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_UART_MspInit+0x54>)
 800228e:	6822      	ldr	r2, [r4, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d11b      	bne.n	80022cc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_UART_MspInit+0x58>)
 8002298:	0292      	lsls	r2, r2, #10
 800229a:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800229e:	4311      	orrs	r1, r2
 80022a0:	61d9      	str	r1, [r3, #28]
 80022a2:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a6:	4011      	ands	r1, r2
 80022a8:	9101      	str	r1, [sp, #4]
 80022aa:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ac:	6959      	ldr	r1, [r3, #20]
 80022ae:	4311      	orrs	r1, r2
 80022b0:	6159      	str	r1, [r3, #20]
 80022b2:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	401a      	ands	r2, r3
 80022b8:	9202      	str	r2, [sp, #8]
 80022ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022bc:	230c      	movs	r3, #12
 80022be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	3b0a      	subs	r3, #10
 80022c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80022c4:	3b01      	subs	r3, #1
 80022c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f7fe fb3a 	bl	8000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022cc:	b008      	add	sp, #32
 80022ce:	bd10      	pop	{r4, pc}
 80022d0:	40004400 	.word	0x40004400
 80022d4:	40021000 	.word	0x40021000

080022d8 <NMI_Handler>:
 80022d8:	4770      	bx	lr

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	e7fe      	b.n	80022da <HardFault_Handler>

080022dc <SVC_Handler>:
 80022dc:	4770      	bx	lr

080022de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	4770      	bx	lr

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e2:	f7fd ffe5 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e6:	bd10      	pop	{r4, pc}

080022e8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80022e8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022ea:	480b      	ldr	r0, [pc, #44]	; (8002318 <TIM6_IRQHandler+0x30>)
 80022ec:	f7fe ff83 	bl	80011f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
	Shift(HAL_ADC_GetValue(&hadc),k);
 80022f0:	4d0a      	ldr	r5, [pc, #40]	; (800231c <TIM6_IRQHandler+0x34>)
 80022f2:	0028      	movs	r0, r5
 80022f4:	f7fe fa00 	bl	80006f8 <HAL_ADC_GetValue>
 80022f8:	4c09      	ldr	r4, [pc, #36]	; (8002320 <TIM6_IRQHandler+0x38>)
 80022fa:	7821      	ldrb	r1, [r4, #0]
 80022fc:	f7ff fe84 	bl	8002008 <Shift>
	HAL_ADC_Stop(&hadc);
 8002300:	0028      	movs	r0, r5
 8002302:	f7fe f97d 	bl	8000600 <HAL_ADC_Stop>
	k++;
 8002306:	7823      	ldrb	r3, [r4, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	b2db      	uxtb	r3, r3
	if(k>=4)k=0;
 800230c:	2b03      	cmp	r3, #3
 800230e:	d801      	bhi.n	8002314 <TIM6_IRQHandler+0x2c>
 8002310:	7023      	strb	r3, [r4, #0]
  /* USER CODE END TIM6_IRQn 1 */
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
	if(k>=4)k=0;
 8002314:	2300      	movs	r3, #0
 8002316:	e7fb      	b.n	8002310 <TIM6_IRQHandler+0x28>
 8002318:	2000013c 	.word	0x2000013c
 800231c:	2000023c 	.word	0x2000023c
 8002320:	2000027c 	.word	0x2000027c

08002324 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002324:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002326:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM14_IRQHandler+0xc>)
 8002328:	f7fe ff65 	bl	80011f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800232c:	bd10      	pop	{r4, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	200001fc 	.word	0x200001fc

08002334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	000e      	movs	r6, r1
 8002338:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	000c      	movs	r4, r1
 800233c:	1ba3      	subs	r3, r4, r6
 800233e:	429d      	cmp	r5, r3
 8002340:	dc01      	bgt.n	8002346 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002342:	0028      	movs	r0, r5
 8002344:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002346:	e000      	b.n	800234a <_read+0x16>
 8002348:	bf00      	nop
 800234a:	7020      	strb	r0, [r4, #0]
 800234c:	3401      	adds	r4, #1
 800234e:	e7f5      	b.n	800233c <_read+0x8>

08002350 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	000e      	movs	r6, r1
 8002354:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	000c      	movs	r4, r1
 8002358:	1ba3      	subs	r3, r4, r6
 800235a:	429d      	cmp	r5, r3
 800235c:	dc01      	bgt.n	8002362 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800235e:	0028      	movs	r0, r5
 8002360:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002362:	7820      	ldrb	r0, [r4, #0]
 8002364:	f7ff fe42 	bl	8001fec <__io_putchar>
 8002368:	3401      	adds	r4, #1
 800236a:	e7f5      	b.n	8002358 <_write+0x8>

0800236c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <_sbrk+0x2c>)
{
 800236e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002370:	6819      	ldr	r1, [r3, #0]
{
 8002372:	0002      	movs	r2, r0
	if (heap_end == 0)
 8002374:	2900      	cmp	r1, #0
 8002376:	d101      	bne.n	800237c <_sbrk+0x10>
		heap_end = &end;
 8002378:	4908      	ldr	r1, [pc, #32]	; (800239c <_sbrk+0x30>)
 800237a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800237c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800237e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002380:	1882      	adds	r2, r0, r2
 8002382:	428a      	cmp	r2, r1
 8002384:	d906      	bls.n	8002394 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002386:	f000 f843 	bl	8002410 <__errno>
 800238a:	230c      	movs	r3, #12
 800238c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800238e:	2001      	movs	r0, #1
 8002390:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002392:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002394:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002396:	e7fc      	b.n	8002392 <_sbrk+0x26>
 8002398:	200000ec 	.word	0x200000ec
 800239c:	20000284 	.word	0x20000284

080023a0 <_close>:

int _close(int file)
{
	return -1;
}
 80023a0:	2001      	movs	r0, #1
 80023a2:	4240      	negs	r0, r0
 80023a4:	4770      	bx	lr

080023a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	019b      	lsls	r3, r3, #6
	return 0;
}
 80023aa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80023ac:	604b      	str	r3, [r1, #4]
}
 80023ae:	4770      	bx	lr

080023b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80023b0:	2001      	movs	r0, #1
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	4770      	bx	lr

080023b8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80023b8:	4770      	bx	lr
	...

080023bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023c2:	490e      	ldr	r1, [pc, #56]	; (80023fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <LoopForever+0xe>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d8:	4c0b      	ldr	r4, [pc, #44]	; (8002408 <LoopForever+0x16>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023e6:	f7ff ffe7 	bl	80023b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80023ea:	f000 f817 	bl	800241c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ee:	f7ff fc27 	bl	8001c40 <main>

080023f2 <LoopForever>:

LoopForever:
    b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   r0, =_estack
 80023f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002400:	08003858 	.word	0x08003858
  ldr r2, =_sbss
 8002404:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002408:	20000284 	.word	0x20000284

0800240c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_IRQHandler>
	...

08002410 <__errno>:
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <__errno+0x8>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	4770      	bx	lr
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	20000038 	.word	0x20000038

0800241c <__libc_init_array>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	2600      	movs	r6, #0
 8002420:	4d0c      	ldr	r5, [pc, #48]	; (8002454 <__libc_init_array+0x38>)
 8002422:	4c0d      	ldr	r4, [pc, #52]	; (8002458 <__libc_init_array+0x3c>)
 8002424:	1b64      	subs	r4, r4, r5
 8002426:	10a4      	asrs	r4, r4, #2
 8002428:	42a6      	cmp	r6, r4
 800242a:	d109      	bne.n	8002440 <__libc_init_array+0x24>
 800242c:	2600      	movs	r6, #0
 800242e:	f001 f98f 	bl	8003750 <_init>
 8002432:	4d0a      	ldr	r5, [pc, #40]	; (800245c <__libc_init_array+0x40>)
 8002434:	4c0a      	ldr	r4, [pc, #40]	; (8002460 <__libc_init_array+0x44>)
 8002436:	1b64      	subs	r4, r4, r5
 8002438:	10a4      	asrs	r4, r4, #2
 800243a:	42a6      	cmp	r6, r4
 800243c:	d105      	bne.n	800244a <__libc_init_array+0x2e>
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	00b3      	lsls	r3, r6, #2
 8002442:	58eb      	ldr	r3, [r5, r3]
 8002444:	4798      	blx	r3
 8002446:	3601      	adds	r6, #1
 8002448:	e7ee      	b.n	8002428 <__libc_init_array+0xc>
 800244a:	00b3      	lsls	r3, r6, #2
 800244c:	58eb      	ldr	r3, [r5, r3]
 800244e:	4798      	blx	r3
 8002450:	3601      	adds	r6, #1
 8002452:	e7f2      	b.n	800243a <__libc_init_array+0x1e>
 8002454:	08003850 	.word	0x08003850
 8002458:	08003850 	.word	0x08003850
 800245c:	08003850 	.word	0x08003850
 8002460:	08003854 	.word	0x08003854

08002464 <memcpy>:
 8002464:	2300      	movs	r3, #0
 8002466:	b510      	push	{r4, lr}
 8002468:	429a      	cmp	r2, r3
 800246a:	d100      	bne.n	800246e <memcpy+0xa>
 800246c:	bd10      	pop	{r4, pc}
 800246e:	5ccc      	ldrb	r4, [r1, r3]
 8002470:	54c4      	strb	r4, [r0, r3]
 8002472:	3301      	adds	r3, #1
 8002474:	e7f8      	b.n	8002468 <memcpy+0x4>

08002476 <memset>:
 8002476:	0003      	movs	r3, r0
 8002478:	1882      	adds	r2, r0, r2
 800247a:	4293      	cmp	r3, r2
 800247c:	d100      	bne.n	8002480 <memset+0xa>
 800247e:	4770      	bx	lr
 8002480:	7019      	strb	r1, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	e7f9      	b.n	800247a <memset+0x4>
	...

08002488 <iprintf>:
 8002488:	b40f      	push	{r0, r1, r2, r3}
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <iprintf+0x30>)
 800248c:	b513      	push	{r0, r1, r4, lr}
 800248e:	681c      	ldr	r4, [r3, #0]
 8002490:	2c00      	cmp	r4, #0
 8002492:	d005      	beq.n	80024a0 <iprintf+0x18>
 8002494:	69a3      	ldr	r3, [r4, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <iprintf+0x18>
 800249a:	0020      	movs	r0, r4
 800249c:	f000 fa5e 	bl	800295c <__sinit>
 80024a0:	ab05      	add	r3, sp, #20
 80024a2:	9a04      	ldr	r2, [sp, #16]
 80024a4:	68a1      	ldr	r1, [r4, #8]
 80024a6:	0020      	movs	r0, r4
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f000 fd8f 	bl	8002fcc <_vfiprintf_r>
 80024ae:	bc16      	pop	{r1, r2, r4}
 80024b0:	bc08      	pop	{r3}
 80024b2:	b004      	add	sp, #16
 80024b4:	4718      	bx	r3
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000038 	.word	0x20000038

080024bc <_puts_r>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	0005      	movs	r5, r0
 80024c0:	000e      	movs	r6, r1
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d004      	beq.n	80024d0 <_puts_r+0x14>
 80024c6:	6983      	ldr	r3, [r0, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <_puts_r+0x14>
 80024cc:	f000 fa46 	bl	800295c <__sinit>
 80024d0:	69ab      	ldr	r3, [r5, #24]
 80024d2:	68ac      	ldr	r4, [r5, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_puts_r+0x22>
 80024d8:	0028      	movs	r0, r5
 80024da:	f000 fa3f 	bl	800295c <__sinit>
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <_puts_r+0xb4>)
 80024e0:	429c      	cmp	r4, r3
 80024e2:	d10f      	bne.n	8002504 <_puts_r+0x48>
 80024e4:	686c      	ldr	r4, [r5, #4]
 80024e6:	89a3      	ldrh	r3, [r4, #12]
 80024e8:	071b      	lsls	r3, r3, #28
 80024ea:	d502      	bpl.n	80024f2 <_puts_r+0x36>
 80024ec:	6923      	ldr	r3, [r4, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d120      	bne.n	8002534 <_puts_r+0x78>
 80024f2:	0021      	movs	r1, r4
 80024f4:	0028      	movs	r0, r5
 80024f6:	f000 f8c3 	bl	8002680 <__swsetup_r>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d01a      	beq.n	8002534 <_puts_r+0x78>
 80024fe:	2001      	movs	r0, #1
 8002500:	4240      	negs	r0, r0
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <_puts_r+0xb8>)
 8002506:	429c      	cmp	r4, r3
 8002508:	d101      	bne.n	800250e <_puts_r+0x52>
 800250a:	68ac      	ldr	r4, [r5, #8]
 800250c:	e7eb      	b.n	80024e6 <_puts_r+0x2a>
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <_puts_r+0xbc>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d1e8      	bne.n	80024e6 <_puts_r+0x2a>
 8002514:	68ec      	ldr	r4, [r5, #12]
 8002516:	e7e6      	b.n	80024e6 <_puts_r+0x2a>
 8002518:	3b01      	subs	r3, #1
 800251a:	3601      	adds	r6, #1
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da04      	bge.n	800252c <_puts_r+0x70>
 8002522:	69a2      	ldr	r2, [r4, #24]
 8002524:	4293      	cmp	r3, r2
 8002526:	db16      	blt.n	8002556 <_puts_r+0x9a>
 8002528:	290a      	cmp	r1, #10
 800252a:	d014      	beq.n	8002556 <_puts_r+0x9a>
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	6022      	str	r2, [r4, #0]
 8002532:	7019      	strb	r1, [r3, #0]
 8002534:	7831      	ldrb	r1, [r6, #0]
 8002536:	68a3      	ldr	r3, [r4, #8]
 8002538:	2900      	cmp	r1, #0
 800253a:	d1ed      	bne.n	8002518 <_puts_r+0x5c>
 800253c:	3b01      	subs	r3, #1
 800253e:	60a3      	str	r3, [r4, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da0f      	bge.n	8002564 <_puts_r+0xa8>
 8002544:	0022      	movs	r2, r4
 8002546:	310a      	adds	r1, #10
 8002548:	0028      	movs	r0, r5
 800254a:	f000 f843 	bl	80025d4 <__swbuf_r>
 800254e:	1c43      	adds	r3, r0, #1
 8002550:	d0d5      	beq.n	80024fe <_puts_r+0x42>
 8002552:	200a      	movs	r0, #10
 8002554:	e7d5      	b.n	8002502 <_puts_r+0x46>
 8002556:	0022      	movs	r2, r4
 8002558:	0028      	movs	r0, r5
 800255a:	f000 f83b 	bl	80025d4 <__swbuf_r>
 800255e:	1c43      	adds	r3, r0, #1
 8002560:	d1e8      	bne.n	8002534 <_puts_r+0x78>
 8002562:	e7cc      	b.n	80024fe <_puts_r+0x42>
 8002564:	200a      	movs	r0, #10
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	6022      	str	r2, [r4, #0]
 800256c:	7018      	strb	r0, [r3, #0]
 800256e:	e7c8      	b.n	8002502 <_puts_r+0x46>
 8002570:	080037dc 	.word	0x080037dc
 8002574:	080037fc 	.word	0x080037fc
 8002578:	080037bc 	.word	0x080037bc

0800257c <puts>:
 800257c:	b510      	push	{r4, lr}
 800257e:	4b03      	ldr	r3, [pc, #12]	; (800258c <puts+0x10>)
 8002580:	0001      	movs	r1, r0
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f7ff ff9a 	bl	80024bc <_puts_r>
 8002588:	bd10      	pop	{r4, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	20000038 	.word	0x20000038

08002590 <siprintf>:
 8002590:	b40e      	push	{r1, r2, r3}
 8002592:	b510      	push	{r4, lr}
 8002594:	b09d      	sub	sp, #116	; 0x74
 8002596:	a902      	add	r1, sp, #8
 8002598:	9002      	str	r0, [sp, #8]
 800259a:	6108      	str	r0, [r1, #16]
 800259c:	480b      	ldr	r0, [pc, #44]	; (80025cc <siprintf+0x3c>)
 800259e:	2482      	movs	r4, #130	; 0x82
 80025a0:	6088      	str	r0, [r1, #8]
 80025a2:	6148      	str	r0, [r1, #20]
 80025a4:	2001      	movs	r0, #1
 80025a6:	4240      	negs	r0, r0
 80025a8:	ab1f      	add	r3, sp, #124	; 0x7c
 80025aa:	81c8      	strh	r0, [r1, #14]
 80025ac:	4808      	ldr	r0, [pc, #32]	; (80025d0 <siprintf+0x40>)
 80025ae:	cb04      	ldmia	r3!, {r2}
 80025b0:	00a4      	lsls	r4, r4, #2
 80025b2:	6800      	ldr	r0, [r0, #0]
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	818c      	strh	r4, [r1, #12]
 80025b8:	f000 fbdc 	bl	8002d74 <_svfiprintf_r>
 80025bc:	2300      	movs	r3, #0
 80025be:	9a02      	ldr	r2, [sp, #8]
 80025c0:	7013      	strb	r3, [r2, #0]
 80025c2:	b01d      	add	sp, #116	; 0x74
 80025c4:	bc10      	pop	{r4}
 80025c6:	bc08      	pop	{r3}
 80025c8:	b003      	add	sp, #12
 80025ca:	4718      	bx	r3
 80025cc:	7fffffff 	.word	0x7fffffff
 80025d0:	20000038 	.word	0x20000038

080025d4 <__swbuf_r>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	0005      	movs	r5, r0
 80025d8:	000e      	movs	r6, r1
 80025da:	0014      	movs	r4, r2
 80025dc:	2800      	cmp	r0, #0
 80025de:	d004      	beq.n	80025ea <__swbuf_r+0x16>
 80025e0:	6983      	ldr	r3, [r0, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <__swbuf_r+0x16>
 80025e6:	f000 f9b9 	bl	800295c <__sinit>
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <__swbuf_r+0xa0>)
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d12d      	bne.n	800264c <__swbuf_r+0x78>
 80025f0:	686c      	ldr	r4, [r5, #4]
 80025f2:	69a3      	ldr	r3, [r4, #24]
 80025f4:	60a3      	str	r3, [r4, #8]
 80025f6:	89a3      	ldrh	r3, [r4, #12]
 80025f8:	071b      	lsls	r3, r3, #28
 80025fa:	d531      	bpl.n	8002660 <__swbuf_r+0x8c>
 80025fc:	6923      	ldr	r3, [r4, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02e      	beq.n	8002660 <__swbuf_r+0x8c>
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	6922      	ldr	r2, [r4, #16]
 8002606:	b2f7      	uxtb	r7, r6
 8002608:	1a98      	subs	r0, r3, r2
 800260a:	6963      	ldr	r3, [r4, #20]
 800260c:	b2f6      	uxtb	r6, r6
 800260e:	4298      	cmp	r0, r3
 8002610:	db05      	blt.n	800261e <__swbuf_r+0x4a>
 8002612:	0021      	movs	r1, r4
 8002614:	0028      	movs	r0, r5
 8002616:	f000 f933 	bl	8002880 <_fflush_r>
 800261a:	2800      	cmp	r0, #0
 800261c:	d126      	bne.n	800266c <__swbuf_r+0x98>
 800261e:	68a3      	ldr	r3, [r4, #8]
 8002620:	3001      	adds	r0, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	60a3      	str	r3, [r4, #8]
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	6022      	str	r2, [r4, #0]
 800262c:	701f      	strb	r7, [r3, #0]
 800262e:	6963      	ldr	r3, [r4, #20]
 8002630:	4298      	cmp	r0, r3
 8002632:	d004      	beq.n	800263e <__swbuf_r+0x6a>
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	07db      	lsls	r3, r3, #31
 8002638:	d51a      	bpl.n	8002670 <__swbuf_r+0x9c>
 800263a:	2e0a      	cmp	r6, #10
 800263c:	d118      	bne.n	8002670 <__swbuf_r+0x9c>
 800263e:	0021      	movs	r1, r4
 8002640:	0028      	movs	r0, r5
 8002642:	f000 f91d 	bl	8002880 <_fflush_r>
 8002646:	2800      	cmp	r0, #0
 8002648:	d012      	beq.n	8002670 <__swbuf_r+0x9c>
 800264a:	e00f      	b.n	800266c <__swbuf_r+0x98>
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <__swbuf_r+0xa4>)
 800264e:	429c      	cmp	r4, r3
 8002650:	d101      	bne.n	8002656 <__swbuf_r+0x82>
 8002652:	68ac      	ldr	r4, [r5, #8]
 8002654:	e7cd      	b.n	80025f2 <__swbuf_r+0x1e>
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <__swbuf_r+0xa8>)
 8002658:	429c      	cmp	r4, r3
 800265a:	d1ca      	bne.n	80025f2 <__swbuf_r+0x1e>
 800265c:	68ec      	ldr	r4, [r5, #12]
 800265e:	e7c8      	b.n	80025f2 <__swbuf_r+0x1e>
 8002660:	0021      	movs	r1, r4
 8002662:	0028      	movs	r0, r5
 8002664:	f000 f80c 	bl	8002680 <__swsetup_r>
 8002668:	2800      	cmp	r0, #0
 800266a:	d0ca      	beq.n	8002602 <__swbuf_r+0x2e>
 800266c:	2601      	movs	r6, #1
 800266e:	4276      	negs	r6, r6
 8002670:	0030      	movs	r0, r6
 8002672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002674:	080037dc 	.word	0x080037dc
 8002678:	080037fc 	.word	0x080037fc
 800267c:	080037bc 	.word	0x080037bc

08002680 <__swsetup_r>:
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <__swsetup_r+0xdc>)
 8002682:	b570      	push	{r4, r5, r6, lr}
 8002684:	681d      	ldr	r5, [r3, #0]
 8002686:	0006      	movs	r6, r0
 8002688:	000c      	movs	r4, r1
 800268a:	2d00      	cmp	r5, #0
 800268c:	d005      	beq.n	800269a <__swsetup_r+0x1a>
 800268e:	69ab      	ldr	r3, [r5, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <__swsetup_r+0x1a>
 8002694:	0028      	movs	r0, r5
 8002696:	f000 f961 	bl	800295c <__sinit>
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <__swsetup_r+0xe0>)
 800269c:	429c      	cmp	r4, r3
 800269e:	d10f      	bne.n	80026c0 <__swsetup_r+0x40>
 80026a0:	686c      	ldr	r4, [r5, #4]
 80026a2:	230c      	movs	r3, #12
 80026a4:	5ee2      	ldrsh	r2, [r4, r3]
 80026a6:	b293      	uxth	r3, r2
 80026a8:	0719      	lsls	r1, r3, #28
 80026aa:	d42d      	bmi.n	8002708 <__swsetup_r+0x88>
 80026ac:	06d9      	lsls	r1, r3, #27
 80026ae:	d411      	bmi.n	80026d4 <__swsetup_r+0x54>
 80026b0:	2309      	movs	r3, #9
 80026b2:	2001      	movs	r0, #1
 80026b4:	6033      	str	r3, [r6, #0]
 80026b6:	3337      	adds	r3, #55	; 0x37
 80026b8:	4313      	orrs	r3, r2
 80026ba:	81a3      	strh	r3, [r4, #12]
 80026bc:	4240      	negs	r0, r0
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	4b28      	ldr	r3, [pc, #160]	; (8002764 <__swsetup_r+0xe4>)
 80026c2:	429c      	cmp	r4, r3
 80026c4:	d101      	bne.n	80026ca <__swsetup_r+0x4a>
 80026c6:	68ac      	ldr	r4, [r5, #8]
 80026c8:	e7eb      	b.n	80026a2 <__swsetup_r+0x22>
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <__swsetup_r+0xe8>)
 80026cc:	429c      	cmp	r4, r3
 80026ce:	d1e8      	bne.n	80026a2 <__swsetup_r+0x22>
 80026d0:	68ec      	ldr	r4, [r5, #12]
 80026d2:	e7e6      	b.n	80026a2 <__swsetup_r+0x22>
 80026d4:	075b      	lsls	r3, r3, #29
 80026d6:	d513      	bpl.n	8002700 <__swsetup_r+0x80>
 80026d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026da:	2900      	cmp	r1, #0
 80026dc:	d008      	beq.n	80026f0 <__swsetup_r+0x70>
 80026de:	0023      	movs	r3, r4
 80026e0:	3344      	adds	r3, #68	; 0x44
 80026e2:	4299      	cmp	r1, r3
 80026e4:	d002      	beq.n	80026ec <__swsetup_r+0x6c>
 80026e6:	0030      	movs	r0, r6
 80026e8:	f000 fa3a 	bl	8002b60 <_free_r>
 80026ec:	2300      	movs	r3, #0
 80026ee:	6363      	str	r3, [r4, #52]	; 0x34
 80026f0:	2224      	movs	r2, #36	; 0x24
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	4393      	bics	r3, r2
 80026f6:	81a3      	strh	r3, [r4, #12]
 80026f8:	2300      	movs	r3, #0
 80026fa:	6063      	str	r3, [r4, #4]
 80026fc:	6923      	ldr	r3, [r4, #16]
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	2308      	movs	r3, #8
 8002702:	89a2      	ldrh	r2, [r4, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	81a3      	strh	r3, [r4, #12]
 8002708:	6923      	ldr	r3, [r4, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <__swsetup_r+0xa6>
 800270e:	21a0      	movs	r1, #160	; 0xa0
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	89a3      	ldrh	r3, [r4, #12]
 8002714:	0089      	lsls	r1, r1, #2
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	400b      	ands	r3, r1
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <__swsetup_r+0xa6>
 800271e:	0021      	movs	r1, r4
 8002720:	0030      	movs	r0, r6
 8002722:	f000 f9d9 	bl	8002ad8 <__smakebuf_r>
 8002726:	2301      	movs	r3, #1
 8002728:	89a2      	ldrh	r2, [r4, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	d011      	beq.n	8002752 <__swsetup_r+0xd2>
 800272e:	2300      	movs	r3, #0
 8002730:	60a3      	str	r3, [r4, #8]
 8002732:	6963      	ldr	r3, [r4, #20]
 8002734:	425b      	negs	r3, r3
 8002736:	61a3      	str	r3, [r4, #24]
 8002738:	2000      	movs	r0, #0
 800273a:	6923      	ldr	r3, [r4, #16]
 800273c:	4283      	cmp	r3, r0
 800273e:	d1be      	bne.n	80026be <__swsetup_r+0x3e>
 8002740:	230c      	movs	r3, #12
 8002742:	5ee2      	ldrsh	r2, [r4, r3]
 8002744:	0613      	lsls	r3, r2, #24
 8002746:	d5ba      	bpl.n	80026be <__swsetup_r+0x3e>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	4313      	orrs	r3, r2
 800274c:	81a3      	strh	r3, [r4, #12]
 800274e:	3801      	subs	r0, #1
 8002750:	e7b5      	b.n	80026be <__swsetup_r+0x3e>
 8002752:	0792      	lsls	r2, r2, #30
 8002754:	d400      	bmi.n	8002758 <__swsetup_r+0xd8>
 8002756:	6963      	ldr	r3, [r4, #20]
 8002758:	60a3      	str	r3, [r4, #8]
 800275a:	e7ed      	b.n	8002738 <__swsetup_r+0xb8>
 800275c:	20000038 	.word	0x20000038
 8002760:	080037dc 	.word	0x080037dc
 8002764:	080037fc 	.word	0x080037fc
 8002768:	080037bc 	.word	0x080037bc

0800276c <__sflush_r>:
 800276c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800276e:	898a      	ldrh	r2, [r1, #12]
 8002770:	0005      	movs	r5, r0
 8002772:	000c      	movs	r4, r1
 8002774:	0713      	lsls	r3, r2, #28
 8002776:	d460      	bmi.n	800283a <__sflush_r+0xce>
 8002778:	684b      	ldr	r3, [r1, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	dc04      	bgt.n	8002788 <__sflush_r+0x1c>
 800277e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	dc01      	bgt.n	8002788 <__sflush_r+0x1c>
 8002784:	2000      	movs	r0, #0
 8002786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002788:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800278a:	2f00      	cmp	r7, #0
 800278c:	d0fa      	beq.n	8002784 <__sflush_r+0x18>
 800278e:	2300      	movs	r3, #0
 8002790:	682e      	ldr	r6, [r5, #0]
 8002792:	602b      	str	r3, [r5, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	401a      	ands	r2, r3
 800279a:	d034      	beq.n	8002806 <__sflush_r+0x9a>
 800279c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	075b      	lsls	r3, r3, #29
 80027a2:	d506      	bpl.n	80027b2 <__sflush_r+0x46>
 80027a4:	6863      	ldr	r3, [r4, #4]
 80027a6:	1ac0      	subs	r0, r0, r3
 80027a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <__sflush_r+0x46>
 80027ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027b0:	1ac0      	subs	r0, r0, r3
 80027b2:	0002      	movs	r2, r0
 80027b4:	6a21      	ldr	r1, [r4, #32]
 80027b6:	2300      	movs	r3, #0
 80027b8:	0028      	movs	r0, r5
 80027ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80027bc:	47b8      	blx	r7
 80027be:	89a1      	ldrh	r1, [r4, #12]
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d106      	bne.n	80027d2 <__sflush_r+0x66>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	2b1d      	cmp	r3, #29
 80027c8:	d831      	bhi.n	800282e <__sflush_r+0xc2>
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <__sflush_r+0x110>)
 80027cc:	40da      	lsrs	r2, r3
 80027ce:	07d3      	lsls	r3, r2, #31
 80027d0:	d52d      	bpl.n	800282e <__sflush_r+0xc2>
 80027d2:	2300      	movs	r3, #0
 80027d4:	6063      	str	r3, [r4, #4]
 80027d6:	6923      	ldr	r3, [r4, #16]
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	04cb      	lsls	r3, r1, #19
 80027dc:	d505      	bpl.n	80027ea <__sflush_r+0x7e>
 80027de:	1c43      	adds	r3, r0, #1
 80027e0:	d102      	bne.n	80027e8 <__sflush_r+0x7c>
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d100      	bne.n	80027ea <__sflush_r+0x7e>
 80027e8:	6560      	str	r0, [r4, #84]	; 0x54
 80027ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027ec:	602e      	str	r6, [r5, #0]
 80027ee:	2900      	cmp	r1, #0
 80027f0:	d0c8      	beq.n	8002784 <__sflush_r+0x18>
 80027f2:	0023      	movs	r3, r4
 80027f4:	3344      	adds	r3, #68	; 0x44
 80027f6:	4299      	cmp	r1, r3
 80027f8:	d002      	beq.n	8002800 <__sflush_r+0x94>
 80027fa:	0028      	movs	r0, r5
 80027fc:	f000 f9b0 	bl	8002b60 <_free_r>
 8002800:	2000      	movs	r0, #0
 8002802:	6360      	str	r0, [r4, #52]	; 0x34
 8002804:	e7bf      	b.n	8002786 <__sflush_r+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	6a21      	ldr	r1, [r4, #32]
 800280a:	0028      	movs	r0, r5
 800280c:	47b8      	blx	r7
 800280e:	1c43      	adds	r3, r0, #1
 8002810:	d1c5      	bne.n	800279e <__sflush_r+0x32>
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0c2      	beq.n	800279e <__sflush_r+0x32>
 8002818:	2b1d      	cmp	r3, #29
 800281a:	d001      	beq.n	8002820 <__sflush_r+0xb4>
 800281c:	2b16      	cmp	r3, #22
 800281e:	d101      	bne.n	8002824 <__sflush_r+0xb8>
 8002820:	602e      	str	r6, [r5, #0]
 8002822:	e7af      	b.n	8002784 <__sflush_r+0x18>
 8002824:	2340      	movs	r3, #64	; 0x40
 8002826:	89a2      	ldrh	r2, [r4, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	81a3      	strh	r3, [r4, #12]
 800282c:	e7ab      	b.n	8002786 <__sflush_r+0x1a>
 800282e:	2340      	movs	r3, #64	; 0x40
 8002830:	430b      	orrs	r3, r1
 8002832:	2001      	movs	r0, #1
 8002834:	81a3      	strh	r3, [r4, #12]
 8002836:	4240      	negs	r0, r0
 8002838:	e7a5      	b.n	8002786 <__sflush_r+0x1a>
 800283a:	690f      	ldr	r7, [r1, #16]
 800283c:	2f00      	cmp	r7, #0
 800283e:	d0a1      	beq.n	8002784 <__sflush_r+0x18>
 8002840:	680b      	ldr	r3, [r1, #0]
 8002842:	600f      	str	r7, [r1, #0]
 8002844:	1bdb      	subs	r3, r3, r7
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	0792      	lsls	r2, r2, #30
 800284c:	d100      	bne.n	8002850 <__sflush_r+0xe4>
 800284e:	694b      	ldr	r3, [r1, #20]
 8002850:	60a3      	str	r3, [r4, #8]
 8002852:	9b01      	ldr	r3, [sp, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dc00      	bgt.n	800285a <__sflush_r+0xee>
 8002858:	e794      	b.n	8002784 <__sflush_r+0x18>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	003a      	movs	r2, r7
 800285e:	6a21      	ldr	r1, [r4, #32]
 8002860:	0028      	movs	r0, r5
 8002862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002864:	47b0      	blx	r6
 8002866:	2800      	cmp	r0, #0
 8002868:	dc03      	bgt.n	8002872 <__sflush_r+0x106>
 800286a:	2340      	movs	r3, #64	; 0x40
 800286c:	89a2      	ldrh	r2, [r4, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	e7df      	b.n	8002832 <__sflush_r+0xc6>
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	183f      	adds	r7, r7, r0
 8002876:	1a1b      	subs	r3, r3, r0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	e7ea      	b.n	8002852 <__sflush_r+0xe6>
 800287c:	20400001 	.word	0x20400001

08002880 <_fflush_r>:
 8002880:	690b      	ldr	r3, [r1, #16]
 8002882:	b570      	push	{r4, r5, r6, lr}
 8002884:	0005      	movs	r5, r0
 8002886:	000c      	movs	r4, r1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <_fflush_r+0x10>
 800288c:	2000      	movs	r0, #0
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	2800      	cmp	r0, #0
 8002892:	d004      	beq.n	800289e <_fflush_r+0x1e>
 8002894:	6983      	ldr	r3, [r0, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <_fflush_r+0x1e>
 800289a:	f000 f85f 	bl	800295c <__sinit>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <_fflush_r+0x4c>)
 80028a0:	429c      	cmp	r4, r3
 80028a2:	d109      	bne.n	80028b8 <_fflush_r+0x38>
 80028a4:	686c      	ldr	r4, [r5, #4]
 80028a6:	220c      	movs	r2, #12
 80028a8:	5ea3      	ldrsh	r3, [r4, r2]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <_fflush_r+0xc>
 80028ae:	0021      	movs	r1, r4
 80028b0:	0028      	movs	r0, r5
 80028b2:	f7ff ff5b 	bl	800276c <__sflush_r>
 80028b6:	e7ea      	b.n	800288e <_fflush_r+0xe>
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <_fflush_r+0x50>)
 80028ba:	429c      	cmp	r4, r3
 80028bc:	d101      	bne.n	80028c2 <_fflush_r+0x42>
 80028be:	68ac      	ldr	r4, [r5, #8]
 80028c0:	e7f1      	b.n	80028a6 <_fflush_r+0x26>
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <_fflush_r+0x54>)
 80028c4:	429c      	cmp	r4, r3
 80028c6:	d1ee      	bne.n	80028a6 <_fflush_r+0x26>
 80028c8:	68ec      	ldr	r4, [r5, #12]
 80028ca:	e7ec      	b.n	80028a6 <_fflush_r+0x26>
 80028cc:	080037dc 	.word	0x080037dc
 80028d0:	080037fc 	.word	0x080037fc
 80028d4:	080037bc 	.word	0x080037bc

080028d8 <_cleanup_r>:
 80028d8:	b510      	push	{r4, lr}
 80028da:	4902      	ldr	r1, [pc, #8]	; (80028e4 <_cleanup_r+0xc>)
 80028dc:	f000 f8b2 	bl	8002a44 <_fwalk_reent>
 80028e0:	bd10      	pop	{r4, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	08002881 	.word	0x08002881

080028e8 <std.isra.0>:
 80028e8:	2300      	movs	r3, #0
 80028ea:	b510      	push	{r4, lr}
 80028ec:	0004      	movs	r4, r0
 80028ee:	6003      	str	r3, [r0, #0]
 80028f0:	6043      	str	r3, [r0, #4]
 80028f2:	6083      	str	r3, [r0, #8]
 80028f4:	8181      	strh	r1, [r0, #12]
 80028f6:	6643      	str	r3, [r0, #100]	; 0x64
 80028f8:	81c2      	strh	r2, [r0, #14]
 80028fa:	6103      	str	r3, [r0, #16]
 80028fc:	6143      	str	r3, [r0, #20]
 80028fe:	6183      	str	r3, [r0, #24]
 8002900:	0019      	movs	r1, r3
 8002902:	2208      	movs	r2, #8
 8002904:	305c      	adds	r0, #92	; 0x5c
 8002906:	f7ff fdb6 	bl	8002476 <memset>
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <std.isra.0+0x38>)
 800290c:	6224      	str	r4, [r4, #32]
 800290e:	6263      	str	r3, [r4, #36]	; 0x24
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <std.isra.0+0x3c>)
 8002912:	62a3      	str	r3, [r4, #40]	; 0x28
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <std.isra.0+0x40>)
 8002916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <std.isra.0+0x44>)
 800291a:	6323      	str	r3, [r4, #48]	; 0x30
 800291c:	bd10      	pop	{r4, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	08003539 	.word	0x08003539
 8002924:	08003561 	.word	0x08003561
 8002928:	08003599 	.word	0x08003599
 800292c:	080035c5 	.word	0x080035c5

08002930 <__sfmoreglue>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	2568      	movs	r5, #104	; 0x68
 8002934:	1e4a      	subs	r2, r1, #1
 8002936:	4355      	muls	r5, r2
 8002938:	000e      	movs	r6, r1
 800293a:	0029      	movs	r1, r5
 800293c:	3174      	adds	r1, #116	; 0x74
 800293e:	f000 f959 	bl	8002bf4 <_malloc_r>
 8002942:	1e04      	subs	r4, r0, #0
 8002944:	d008      	beq.n	8002958 <__sfmoreglue+0x28>
 8002946:	2100      	movs	r1, #0
 8002948:	002a      	movs	r2, r5
 800294a:	6001      	str	r1, [r0, #0]
 800294c:	6046      	str	r6, [r0, #4]
 800294e:	300c      	adds	r0, #12
 8002950:	60a0      	str	r0, [r4, #8]
 8002952:	3268      	adds	r2, #104	; 0x68
 8002954:	f7ff fd8f 	bl	8002476 <memset>
 8002958:	0020      	movs	r0, r4
 800295a:	bd70      	pop	{r4, r5, r6, pc}

0800295c <__sinit>:
 800295c:	6983      	ldr	r3, [r0, #24]
 800295e:	b513      	push	{r0, r1, r4, lr}
 8002960:	0004      	movs	r4, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d128      	bne.n	80029b8 <__sinit+0x5c>
 8002966:	6483      	str	r3, [r0, #72]	; 0x48
 8002968:	64c3      	str	r3, [r0, #76]	; 0x4c
 800296a:	6503      	str	r3, [r0, #80]	; 0x50
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <__sinit+0x60>)
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <__sinit+0x64>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6282      	str	r2, [r0, #40]	; 0x28
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	4298      	cmp	r0, r3
 8002978:	d101      	bne.n	800297e <__sinit+0x22>
 800297a:	2301      	movs	r3, #1
 800297c:	6183      	str	r3, [r0, #24]
 800297e:	0020      	movs	r0, r4
 8002980:	f000 f820 	bl	80029c4 <__sfp>
 8002984:	6060      	str	r0, [r4, #4]
 8002986:	0020      	movs	r0, r4
 8002988:	f000 f81c 	bl	80029c4 <__sfp>
 800298c:	60a0      	str	r0, [r4, #8]
 800298e:	0020      	movs	r0, r4
 8002990:	f000 f818 	bl	80029c4 <__sfp>
 8002994:	2200      	movs	r2, #0
 8002996:	60e0      	str	r0, [r4, #12]
 8002998:	2104      	movs	r1, #4
 800299a:	6860      	ldr	r0, [r4, #4]
 800299c:	f7ff ffa4 	bl	80028e8 <std.isra.0>
 80029a0:	2201      	movs	r2, #1
 80029a2:	2109      	movs	r1, #9
 80029a4:	68a0      	ldr	r0, [r4, #8]
 80029a6:	f7ff ff9f 	bl	80028e8 <std.isra.0>
 80029aa:	2202      	movs	r2, #2
 80029ac:	2112      	movs	r1, #18
 80029ae:	68e0      	ldr	r0, [r4, #12]
 80029b0:	f7ff ff9a 	bl	80028e8 <std.isra.0>
 80029b4:	2301      	movs	r3, #1
 80029b6:	61a3      	str	r3, [r4, #24]
 80029b8:	bd13      	pop	{r0, r1, r4, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	080037b8 	.word	0x080037b8
 80029c0:	080028d9 	.word	0x080028d9

080029c4 <__sfp>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <__sfp+0x7c>)
 80029c8:	0007      	movs	r7, r0
 80029ca:	681e      	ldr	r6, [r3, #0]
 80029cc:	69b3      	ldr	r3, [r6, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <__sfp+0x14>
 80029d2:	0030      	movs	r0, r6
 80029d4:	f7ff ffc2 	bl	800295c <__sinit>
 80029d8:	3648      	adds	r6, #72	; 0x48
 80029da:	68b4      	ldr	r4, [r6, #8]
 80029dc:	6873      	ldr	r3, [r6, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	d504      	bpl.n	80029ec <__sfp+0x28>
 80029e2:	6833      	ldr	r3, [r6, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <__sfp+0x34>
 80029e8:	6836      	ldr	r6, [r6, #0]
 80029ea:	e7f6      	b.n	80029da <__sfp+0x16>
 80029ec:	220c      	movs	r2, #12
 80029ee:	5ea5      	ldrsh	r5, [r4, r2]
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d00d      	beq.n	8002a10 <__sfp+0x4c>
 80029f4:	3468      	adds	r4, #104	; 0x68
 80029f6:	e7f2      	b.n	80029de <__sfp+0x1a>
 80029f8:	2104      	movs	r1, #4
 80029fa:	0038      	movs	r0, r7
 80029fc:	f7ff ff98 	bl	8002930 <__sfmoreglue>
 8002a00:	6030      	str	r0, [r6, #0]
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d1f0      	bne.n	80029e8 <__sfp+0x24>
 8002a06:	230c      	movs	r3, #12
 8002a08:	0004      	movs	r4, r0
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a10:	2301      	movs	r3, #1
 8002a12:	0020      	movs	r0, r4
 8002a14:	425b      	negs	r3, r3
 8002a16:	81e3      	strh	r3, [r4, #14]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	81a3      	strh	r3, [r4, #12]
 8002a1c:	6665      	str	r5, [r4, #100]	; 0x64
 8002a1e:	6025      	str	r5, [r4, #0]
 8002a20:	60a5      	str	r5, [r4, #8]
 8002a22:	6065      	str	r5, [r4, #4]
 8002a24:	6125      	str	r5, [r4, #16]
 8002a26:	6165      	str	r5, [r4, #20]
 8002a28:	61a5      	str	r5, [r4, #24]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	0029      	movs	r1, r5
 8002a2e:	305c      	adds	r0, #92	; 0x5c
 8002a30:	f7ff fd21 	bl	8002476 <memset>
 8002a34:	6365      	str	r5, [r4, #52]	; 0x34
 8002a36:	63a5      	str	r5, [r4, #56]	; 0x38
 8002a38:	64a5      	str	r5, [r4, #72]	; 0x48
 8002a3a:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002a3c:	e7e6      	b.n	8002a0c <__sfp+0x48>
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	080037b8 	.word	0x080037b8

08002a44 <_fwalk_reent>:
 8002a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a46:	0004      	movs	r4, r0
 8002a48:	0007      	movs	r7, r0
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	9101      	str	r1, [sp, #4]
 8002a4e:	3448      	adds	r4, #72	; 0x48
 8002a50:	2c00      	cmp	r4, #0
 8002a52:	d101      	bne.n	8002a58 <_fwalk_reent+0x14>
 8002a54:	0030      	movs	r0, r6
 8002a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a58:	6863      	ldr	r3, [r4, #4]
 8002a5a:	68a5      	ldr	r5, [r4, #8]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	9b00      	ldr	r3, [sp, #0]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	d501      	bpl.n	8002a6a <_fwalk_reent+0x26>
 8002a66:	6824      	ldr	r4, [r4, #0]
 8002a68:	e7f2      	b.n	8002a50 <_fwalk_reent+0xc>
 8002a6a:	89ab      	ldrh	r3, [r5, #12]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d908      	bls.n	8002a82 <_fwalk_reent+0x3e>
 8002a70:	220e      	movs	r2, #14
 8002a72:	5eab      	ldrsh	r3, [r5, r2]
 8002a74:	3301      	adds	r3, #1
 8002a76:	d004      	beq.n	8002a82 <_fwalk_reent+0x3e>
 8002a78:	0029      	movs	r1, r5
 8002a7a:	0038      	movs	r0, r7
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	4798      	blx	r3
 8002a80:	4306      	orrs	r6, r0
 8002a82:	3568      	adds	r5, #104	; 0x68
 8002a84:	e7eb      	b.n	8002a5e <_fwalk_reent+0x1a>
	...

08002a88 <__swhatbuf_r>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	000e      	movs	r6, r1
 8002a8c:	001d      	movs	r5, r3
 8002a8e:	230e      	movs	r3, #14
 8002a90:	5ec9      	ldrsh	r1, [r1, r3]
 8002a92:	b090      	sub	sp, #64	; 0x40
 8002a94:	0014      	movs	r4, r2
 8002a96:	2900      	cmp	r1, #0
 8002a98:	da07      	bge.n	8002aaa <__swhatbuf_r+0x22>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	602b      	str	r3, [r5, #0]
 8002a9e:	89b3      	ldrh	r3, [r6, #12]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	d411      	bmi.n	8002ac8 <__swhatbuf_r+0x40>
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	e00f      	b.n	8002aca <__swhatbuf_r+0x42>
 8002aaa:	aa01      	add	r2, sp, #4
 8002aac:	f000 fdb6 	bl	800361c <_fstat_r>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	dbf2      	blt.n	8002a9a <__swhatbuf_r+0x12>
 8002ab4:	22f0      	movs	r2, #240	; 0xf0
 8002ab6:	9b02      	ldr	r3, [sp, #8]
 8002ab8:	0212      	lsls	r2, r2, #8
 8002aba:	4013      	ands	r3, r2
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <__swhatbuf_r+0x4c>)
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	425a      	negs	r2, r3
 8002ac2:	4153      	adcs	r3, r2
 8002ac4:	602b      	str	r3, [r5, #0]
 8002ac6:	e7ed      	b.n	8002aa4 <__swhatbuf_r+0x1c>
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	2000      	movs	r0, #0
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	b010      	add	sp, #64	; 0x40
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	ffffe000 	.word	0xffffe000

08002ad8 <__smakebuf_r>:
 8002ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ada:	2602      	movs	r6, #2
 8002adc:	898b      	ldrh	r3, [r1, #12]
 8002ade:	0005      	movs	r5, r0
 8002ae0:	000c      	movs	r4, r1
 8002ae2:	4233      	tst	r3, r6
 8002ae4:	d006      	beq.n	8002af4 <__smakebuf_r+0x1c>
 8002ae6:	0023      	movs	r3, r4
 8002ae8:	3347      	adds	r3, #71	; 0x47
 8002aea:	6023      	str	r3, [r4, #0]
 8002aec:	6123      	str	r3, [r4, #16]
 8002aee:	2301      	movs	r3, #1
 8002af0:	6163      	str	r3, [r4, #20]
 8002af2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002af4:	ab01      	add	r3, sp, #4
 8002af6:	466a      	mov	r2, sp
 8002af8:	f7ff ffc6 	bl	8002a88 <__swhatbuf_r>
 8002afc:	9900      	ldr	r1, [sp, #0]
 8002afe:	0007      	movs	r7, r0
 8002b00:	0028      	movs	r0, r5
 8002b02:	f000 f877 	bl	8002bf4 <_malloc_r>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d108      	bne.n	8002b1c <__smakebuf_r+0x44>
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	5ea3      	ldrsh	r3, [r4, r2]
 8002b0e:	059a      	lsls	r2, r3, #22
 8002b10:	d4ef      	bmi.n	8002af2 <__smakebuf_r+0x1a>
 8002b12:	2203      	movs	r2, #3
 8002b14:	4393      	bics	r3, r2
 8002b16:	431e      	orrs	r6, r3
 8002b18:	81a6      	strh	r6, [r4, #12]
 8002b1a:	e7e4      	b.n	8002ae6 <__smakebuf_r+0xe>
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <__smakebuf_r+0x84>)
 8002b1e:	62ab      	str	r3, [r5, #40]	; 0x28
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	89a2      	ldrh	r2, [r4, #12]
 8002b24:	6020      	str	r0, [r4, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	9b00      	ldr	r3, [sp, #0]
 8002b2c:	6120      	str	r0, [r4, #16]
 8002b2e:	6163      	str	r3, [r4, #20]
 8002b30:	9b01      	ldr	r3, [sp, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <__smakebuf_r+0x7a>
 8002b36:	230e      	movs	r3, #14
 8002b38:	5ee1      	ldrsh	r1, [r4, r3]
 8002b3a:	0028      	movs	r0, r5
 8002b3c:	f000 fd80 	bl	8003640 <_isatty_r>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d006      	beq.n	8002b52 <__smakebuf_r+0x7a>
 8002b44:	2203      	movs	r2, #3
 8002b46:	89a3      	ldrh	r3, [r4, #12]
 8002b48:	4393      	bics	r3, r2
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	81a3      	strh	r3, [r4, #12]
 8002b52:	89a0      	ldrh	r0, [r4, #12]
 8002b54:	4338      	orrs	r0, r7
 8002b56:	81a0      	strh	r0, [r4, #12]
 8002b58:	e7cb      	b.n	8002af2 <__smakebuf_r+0x1a>
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	080028d9 	.word	0x080028d9

08002b60 <_free_r>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	0005      	movs	r5, r0
 8002b64:	2900      	cmp	r1, #0
 8002b66:	d010      	beq.n	8002b8a <_free_r+0x2a>
 8002b68:	1f0c      	subs	r4, r1, #4
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da00      	bge.n	8002b72 <_free_r+0x12>
 8002b70:	18e4      	adds	r4, r4, r3
 8002b72:	0028      	movs	r0, r5
 8002b74:	f000 fda7 	bl	80036c6 <__malloc_lock>
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <_free_r+0x90>)
 8002b7a:	6813      	ldr	r3, [r2, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <_free_r+0x2c>
 8002b80:	6063      	str	r3, [r4, #4]
 8002b82:	6014      	str	r4, [r2, #0]
 8002b84:	0028      	movs	r0, r5
 8002b86:	f000 fd9f 	bl	80036c8 <__malloc_unlock>
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	42a3      	cmp	r3, r4
 8002b8e:	d909      	bls.n	8002ba4 <_free_r+0x44>
 8002b90:	6821      	ldr	r1, [r4, #0]
 8002b92:	1860      	adds	r0, r4, r1
 8002b94:	4283      	cmp	r3, r0
 8002b96:	d1f3      	bne.n	8002b80 <_free_r+0x20>
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	1841      	adds	r1, r0, r1
 8002b9e:	6021      	str	r1, [r4, #0]
 8002ba0:	e7ee      	b.n	8002b80 <_free_r+0x20>
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	d001      	beq.n	8002bae <_free_r+0x4e>
 8002baa:	42a2      	cmp	r2, r4
 8002bac:	d9f9      	bls.n	8002ba2 <_free_r+0x42>
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	1858      	adds	r0, r3, r1
 8002bb2:	42a0      	cmp	r0, r4
 8002bb4:	d10b      	bne.n	8002bce <_free_r+0x6e>
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	1809      	adds	r1, r1, r0
 8002bba:	1858      	adds	r0, r3, r1
 8002bbc:	6019      	str	r1, [r3, #0]
 8002bbe:	4282      	cmp	r2, r0
 8002bc0:	d1e0      	bne.n	8002b84 <_free_r+0x24>
 8002bc2:	6810      	ldr	r0, [r2, #0]
 8002bc4:	6852      	ldr	r2, [r2, #4]
 8002bc6:	1841      	adds	r1, r0, r1
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	e7da      	b.n	8002b84 <_free_r+0x24>
 8002bce:	42a0      	cmp	r0, r4
 8002bd0:	d902      	bls.n	8002bd8 <_free_r+0x78>
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	602b      	str	r3, [r5, #0]
 8002bd6:	e7d5      	b.n	8002b84 <_free_r+0x24>
 8002bd8:	6821      	ldr	r1, [r4, #0]
 8002bda:	1860      	adds	r0, r4, r1
 8002bdc:	4282      	cmp	r2, r0
 8002bde:	d103      	bne.n	8002be8 <_free_r+0x88>
 8002be0:	6810      	ldr	r0, [r2, #0]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	1841      	adds	r1, r0, r1
 8002be6:	6021      	str	r1, [r4, #0]
 8002be8:	6062      	str	r2, [r4, #4]
 8002bea:	605c      	str	r4, [r3, #4]
 8002bec:	e7ca      	b.n	8002b84 <_free_r+0x24>
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	200000f0 	.word	0x200000f0

08002bf4 <_malloc_r>:
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	b570      	push	{r4, r5, r6, lr}
 8002bf8:	1ccd      	adds	r5, r1, #3
 8002bfa:	439d      	bics	r5, r3
 8002bfc:	3508      	adds	r5, #8
 8002bfe:	0006      	movs	r6, r0
 8002c00:	2d0c      	cmp	r5, #12
 8002c02:	d21e      	bcs.n	8002c42 <_malloc_r+0x4e>
 8002c04:	250c      	movs	r5, #12
 8002c06:	42a9      	cmp	r1, r5
 8002c08:	d81d      	bhi.n	8002c46 <_malloc_r+0x52>
 8002c0a:	0030      	movs	r0, r6
 8002c0c:	f000 fd5b 	bl	80036c6 <__malloc_lock>
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <_malloc_r+0xb4>)
 8002c12:	6814      	ldr	r4, [r2, #0]
 8002c14:	0021      	movs	r1, r4
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d119      	bne.n	8002c4e <_malloc_r+0x5a>
 8002c1a:	4c24      	ldr	r4, [pc, #144]	; (8002cac <_malloc_r+0xb8>)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <_malloc_r+0x36>
 8002c22:	0030      	movs	r0, r6
 8002c24:	f000 fc76 	bl	8003514 <_sbrk_r>
 8002c28:	6020      	str	r0, [r4, #0]
 8002c2a:	0029      	movs	r1, r5
 8002c2c:	0030      	movs	r0, r6
 8002c2e:	f000 fc71 	bl	8003514 <_sbrk_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d12c      	bne.n	8002c90 <_malloc_r+0x9c>
 8002c36:	230c      	movs	r3, #12
 8002c38:	0030      	movs	r0, r6
 8002c3a:	6033      	str	r3, [r6, #0]
 8002c3c:	f000 fd44 	bl	80036c8 <__malloc_unlock>
 8002c40:	e003      	b.n	8002c4a <_malloc_r+0x56>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	dadf      	bge.n	8002c06 <_malloc_r+0x12>
 8002c46:	230c      	movs	r3, #12
 8002c48:	6033      	str	r3, [r6, #0]
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	680b      	ldr	r3, [r1, #0]
 8002c50:	1b5b      	subs	r3, r3, r5
 8002c52:	d41a      	bmi.n	8002c8a <_malloc_r+0x96>
 8002c54:	2b0b      	cmp	r3, #11
 8002c56:	d903      	bls.n	8002c60 <_malloc_r+0x6c>
 8002c58:	600b      	str	r3, [r1, #0]
 8002c5a:	18cc      	adds	r4, r1, r3
 8002c5c:	6025      	str	r5, [r4, #0]
 8002c5e:	e003      	b.n	8002c68 <_malloc_r+0x74>
 8002c60:	428c      	cmp	r4, r1
 8002c62:	d10e      	bne.n	8002c82 <_malloc_r+0x8e>
 8002c64:	6863      	ldr	r3, [r4, #4]
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	0030      	movs	r0, r6
 8002c6a:	f000 fd2d 	bl	80036c8 <__malloc_unlock>
 8002c6e:	0020      	movs	r0, r4
 8002c70:	2207      	movs	r2, #7
 8002c72:	300b      	adds	r0, #11
 8002c74:	1d23      	adds	r3, r4, #4
 8002c76:	4390      	bics	r0, r2
 8002c78:	1ac3      	subs	r3, r0, r3
 8002c7a:	d0e7      	beq.n	8002c4c <_malloc_r+0x58>
 8002c7c:	425a      	negs	r2, r3
 8002c7e:	50e2      	str	r2, [r4, r3]
 8002c80:	e7e4      	b.n	8002c4c <_malloc_r+0x58>
 8002c82:	684b      	ldr	r3, [r1, #4]
 8002c84:	6063      	str	r3, [r4, #4]
 8002c86:	000c      	movs	r4, r1
 8002c88:	e7ee      	b.n	8002c68 <_malloc_r+0x74>
 8002c8a:	000c      	movs	r4, r1
 8002c8c:	6849      	ldr	r1, [r1, #4]
 8002c8e:	e7c2      	b.n	8002c16 <_malloc_r+0x22>
 8002c90:	2303      	movs	r3, #3
 8002c92:	1cc4      	adds	r4, r0, #3
 8002c94:	439c      	bics	r4, r3
 8002c96:	42a0      	cmp	r0, r4
 8002c98:	d0e0      	beq.n	8002c5c <_malloc_r+0x68>
 8002c9a:	1a21      	subs	r1, r4, r0
 8002c9c:	0030      	movs	r0, r6
 8002c9e:	f000 fc39 	bl	8003514 <_sbrk_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	d1da      	bne.n	8002c5c <_malloc_r+0x68>
 8002ca6:	e7c6      	b.n	8002c36 <_malloc_r+0x42>
 8002ca8:	200000f0 	.word	0x200000f0
 8002cac:	200000f4 	.word	0x200000f4

08002cb0 <__ssputs_r>:
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	688e      	ldr	r6, [r1, #8]
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	0007      	movs	r7, r0
 8002cb8:	000c      	movs	r4, r1
 8002cba:	9203      	str	r2, [sp, #12]
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	429e      	cmp	r6, r3
 8002cc0:	d839      	bhi.n	8002d36 <__ssputs_r+0x86>
 8002cc2:	2390      	movs	r3, #144	; 0x90
 8002cc4:	898a      	ldrh	r2, [r1, #12]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	421a      	tst	r2, r3
 8002cca:	d034      	beq.n	8002d36 <__ssputs_r+0x86>
 8002ccc:	2503      	movs	r5, #3
 8002cce:	6909      	ldr	r1, [r1, #16]
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	1a5b      	subs	r3, r3, r1
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	9802      	ldr	r0, [sp, #8]
 8002cda:	435d      	muls	r5, r3
 8002cdc:	0feb      	lsrs	r3, r5, #31
 8002cde:	195d      	adds	r5, r3, r5
 8002ce0:	9b01      	ldr	r3, [sp, #4]
 8002ce2:	106d      	asrs	r5, r5, #1
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	181b      	adds	r3, r3, r0
 8002ce8:	42ab      	cmp	r3, r5
 8002cea:	d900      	bls.n	8002cee <__ssputs_r+0x3e>
 8002cec:	001d      	movs	r5, r3
 8002cee:	0553      	lsls	r3, r2, #21
 8002cf0:	d532      	bpl.n	8002d58 <__ssputs_r+0xa8>
 8002cf2:	0029      	movs	r1, r5
 8002cf4:	0038      	movs	r0, r7
 8002cf6:	f7ff ff7d 	bl	8002bf4 <_malloc_r>
 8002cfa:	1e06      	subs	r6, r0, #0
 8002cfc:	d109      	bne.n	8002d12 <__ssputs_r+0x62>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	2001      	movs	r0, #1
 8002d06:	89a2      	ldrh	r2, [r4, #12]
 8002d08:	4240      	negs	r0, r0
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	81a3      	strh	r3, [r4, #12]
 8002d0e:	b005      	add	sp, #20
 8002d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d12:	9a02      	ldr	r2, [sp, #8]
 8002d14:	6921      	ldr	r1, [r4, #16]
 8002d16:	f7ff fba5 	bl	8002464 <memcpy>
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <__ssputs_r+0xc0>)
 8002d1e:	401a      	ands	r2, r3
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	4313      	orrs	r3, r2
 8002d24:	81a3      	strh	r3, [r4, #12]
 8002d26:	9b02      	ldr	r3, [sp, #8]
 8002d28:	6126      	str	r6, [r4, #16]
 8002d2a:	18f6      	adds	r6, r6, r3
 8002d2c:	6026      	str	r6, [r4, #0]
 8002d2e:	6165      	str	r5, [r4, #20]
 8002d30:	9e01      	ldr	r6, [sp, #4]
 8002d32:	1aed      	subs	r5, r5, r3
 8002d34:	60a5      	str	r5, [r4, #8]
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	42b3      	cmp	r3, r6
 8002d3a:	d200      	bcs.n	8002d3e <__ssputs_r+0x8e>
 8002d3c:	001e      	movs	r6, r3
 8002d3e:	0032      	movs	r2, r6
 8002d40:	9903      	ldr	r1, [sp, #12]
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	f000 fcad 	bl	80036a2 <memmove>
 8002d48:	68a3      	ldr	r3, [r4, #8]
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	1b9b      	subs	r3, r3, r6
 8002d4e:	60a3      	str	r3, [r4, #8]
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	199e      	adds	r6, r3, r6
 8002d54:	6026      	str	r6, [r4, #0]
 8002d56:	e7da      	b.n	8002d0e <__ssputs_r+0x5e>
 8002d58:	002a      	movs	r2, r5
 8002d5a:	0038      	movs	r0, r7
 8002d5c:	f000 fcb5 	bl	80036ca <_realloc_r>
 8002d60:	1e06      	subs	r6, r0, #0
 8002d62:	d1e0      	bne.n	8002d26 <__ssputs_r+0x76>
 8002d64:	6921      	ldr	r1, [r4, #16]
 8002d66:	0038      	movs	r0, r7
 8002d68:	f7ff fefa 	bl	8002b60 <_free_r>
 8002d6c:	e7c7      	b.n	8002cfe <__ssputs_r+0x4e>
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	fffffb7f 	.word	0xfffffb7f

08002d74 <_svfiprintf_r>:
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b09f      	sub	sp, #124	; 0x7c
 8002d78:	9002      	str	r0, [sp, #8]
 8002d7a:	9305      	str	r3, [sp, #20]
 8002d7c:	898b      	ldrh	r3, [r1, #12]
 8002d7e:	000f      	movs	r7, r1
 8002d80:	0016      	movs	r6, r2
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	d511      	bpl.n	8002daa <_svfiprintf_r+0x36>
 8002d86:	690b      	ldr	r3, [r1, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10e      	bne.n	8002daa <_svfiprintf_r+0x36>
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	f7ff ff31 	bl	8002bf4 <_malloc_r>
 8002d92:	6038      	str	r0, [r7, #0]
 8002d94:	6138      	str	r0, [r7, #16]
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d105      	bne.n	8002da6 <_svfiprintf_r+0x32>
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	9a02      	ldr	r2, [sp, #8]
 8002d9e:	3801      	subs	r0, #1
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	b01f      	add	sp, #124	; 0x7c
 8002da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	ad06      	add	r5, sp, #24
 8002dae:	616b      	str	r3, [r5, #20]
 8002db0:	3320      	adds	r3, #32
 8002db2:	766b      	strb	r3, [r5, #25]
 8002db4:	3310      	adds	r3, #16
 8002db6:	76ab      	strb	r3, [r5, #26]
 8002db8:	0034      	movs	r4, r6
 8002dba:	7823      	ldrb	r3, [r4, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d147      	bne.n	8002e50 <_svfiprintf_r+0xdc>
 8002dc0:	1ba3      	subs	r3, r4, r6
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	d00d      	beq.n	8002de2 <_svfiprintf_r+0x6e>
 8002dc6:	1ba3      	subs	r3, r4, r6
 8002dc8:	0032      	movs	r2, r6
 8002dca:	0039      	movs	r1, r7
 8002dcc:	9802      	ldr	r0, [sp, #8]
 8002dce:	f7ff ff6f 	bl	8002cb0 <__ssputs_r>
 8002dd2:	1c43      	adds	r3, r0, #1
 8002dd4:	d100      	bne.n	8002dd8 <_svfiprintf_r+0x64>
 8002dd6:	e0b5      	b.n	8002f44 <_svfiprintf_r+0x1d0>
 8002dd8:	696a      	ldr	r2, [r5, #20]
 8002dda:	9b04      	ldr	r3, [sp, #16]
 8002ddc:	4694      	mov	ip, r2
 8002dde:	4463      	add	r3, ip
 8002de0:	616b      	str	r3, [r5, #20]
 8002de2:	7823      	ldrb	r3, [r4, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d100      	bne.n	8002dea <_svfiprintf_r+0x76>
 8002de8:	e0ac      	b.n	8002f44 <_svfiprintf_r+0x1d0>
 8002dea:	2201      	movs	r2, #1
 8002dec:	2300      	movs	r3, #0
 8002dee:	4252      	negs	r2, r2
 8002df0:	606a      	str	r2, [r5, #4]
 8002df2:	a902      	add	r1, sp, #8
 8002df4:	3254      	adds	r2, #84	; 0x54
 8002df6:	1852      	adds	r2, r2, r1
 8002df8:	3401      	adds	r4, #1
 8002dfa:	602b      	str	r3, [r5, #0]
 8002dfc:	60eb      	str	r3, [r5, #12]
 8002dfe:	60ab      	str	r3, [r5, #8]
 8002e00:	7013      	strb	r3, [r2, #0]
 8002e02:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e04:	4e58      	ldr	r6, [pc, #352]	; (8002f68 <_svfiprintf_r+0x1f4>)
 8002e06:	2205      	movs	r2, #5
 8002e08:	7821      	ldrb	r1, [r4, #0]
 8002e0a:	0030      	movs	r0, r6
 8002e0c:	f000 fc3e 	bl	800368c <memchr>
 8002e10:	1c62      	adds	r2, r4, #1
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d120      	bne.n	8002e58 <_svfiprintf_r+0xe4>
 8002e16:	6829      	ldr	r1, [r5, #0]
 8002e18:	06cb      	lsls	r3, r1, #27
 8002e1a:	d504      	bpl.n	8002e26 <_svfiprintf_r+0xb2>
 8002e1c:	2353      	movs	r3, #83	; 0x53
 8002e1e:	ae02      	add	r6, sp, #8
 8002e20:	3020      	adds	r0, #32
 8002e22:	199b      	adds	r3, r3, r6
 8002e24:	7018      	strb	r0, [r3, #0]
 8002e26:	070b      	lsls	r3, r1, #28
 8002e28:	d504      	bpl.n	8002e34 <_svfiprintf_r+0xc0>
 8002e2a:	2353      	movs	r3, #83	; 0x53
 8002e2c:	202b      	movs	r0, #43	; 0x2b
 8002e2e:	ae02      	add	r6, sp, #8
 8002e30:	199b      	adds	r3, r3, r6
 8002e32:	7018      	strb	r0, [r3, #0]
 8002e34:	7823      	ldrb	r3, [r4, #0]
 8002e36:	2b2a      	cmp	r3, #42	; 0x2a
 8002e38:	d016      	beq.n	8002e68 <_svfiprintf_r+0xf4>
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	210a      	movs	r1, #10
 8002e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e40:	7822      	ldrb	r2, [r4, #0]
 8002e42:	3a30      	subs	r2, #48	; 0x30
 8002e44:	2a09      	cmp	r2, #9
 8002e46:	d955      	bls.n	8002ef4 <_svfiprintf_r+0x180>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d015      	beq.n	8002e78 <_svfiprintf_r+0x104>
 8002e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e4e:	e013      	b.n	8002e78 <_svfiprintf_r+0x104>
 8002e50:	2b25      	cmp	r3, #37	; 0x25
 8002e52:	d0b5      	beq.n	8002dc0 <_svfiprintf_r+0x4c>
 8002e54:	3401      	adds	r4, #1
 8002e56:	e7b0      	b.n	8002dba <_svfiprintf_r+0x46>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	1b80      	subs	r0, r0, r6
 8002e5c:	4083      	lsls	r3, r0
 8002e5e:	6829      	ldr	r1, [r5, #0]
 8002e60:	0014      	movs	r4, r2
 8002e62:	430b      	orrs	r3, r1
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	e7cd      	b.n	8002e04 <_svfiprintf_r+0x90>
 8002e68:	9b05      	ldr	r3, [sp, #20]
 8002e6a:	1d18      	adds	r0, r3, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	9005      	str	r0, [sp, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db39      	blt.n	8002ee8 <_svfiprintf_r+0x174>
 8002e74:	9309      	str	r3, [sp, #36]	; 0x24
 8002e76:	0014      	movs	r4, r2
 8002e78:	7823      	ldrb	r3, [r4, #0]
 8002e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e7c:	d10b      	bne.n	8002e96 <_svfiprintf_r+0x122>
 8002e7e:	7863      	ldrb	r3, [r4, #1]
 8002e80:	1c62      	adds	r2, r4, #1
 8002e82:	2b2a      	cmp	r3, #42	; 0x2a
 8002e84:	d13e      	bne.n	8002f04 <_svfiprintf_r+0x190>
 8002e86:	9b05      	ldr	r3, [sp, #20]
 8002e88:	3402      	adds	r4, #2
 8002e8a:	1d1a      	adds	r2, r3, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	9205      	str	r2, [sp, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db34      	blt.n	8002efe <_svfiprintf_r+0x18a>
 8002e94:	9307      	str	r3, [sp, #28]
 8002e96:	4e35      	ldr	r6, [pc, #212]	; (8002f6c <_svfiprintf_r+0x1f8>)
 8002e98:	7821      	ldrb	r1, [r4, #0]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	0030      	movs	r0, r6
 8002e9e:	f000 fbf5 	bl	800368c <memchr>
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d006      	beq.n	8002eb4 <_svfiprintf_r+0x140>
 8002ea6:	2340      	movs	r3, #64	; 0x40
 8002ea8:	1b80      	subs	r0, r0, r6
 8002eaa:	4083      	lsls	r3, r0
 8002eac:	682a      	ldr	r2, [r5, #0]
 8002eae:	3401      	adds	r4, #1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	7821      	ldrb	r1, [r4, #0]
 8002eb6:	2206      	movs	r2, #6
 8002eb8:	482d      	ldr	r0, [pc, #180]	; (8002f70 <_svfiprintf_r+0x1fc>)
 8002eba:	1c66      	adds	r6, r4, #1
 8002ebc:	7629      	strb	r1, [r5, #24]
 8002ebe:	f000 fbe5 	bl	800368c <memchr>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d046      	beq.n	8002f54 <_svfiprintf_r+0x1e0>
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <_svfiprintf_r+0x200>)
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12f      	bne.n	8002f2c <_svfiprintf_r+0x1b8>
 8002ecc:	6829      	ldr	r1, [r5, #0]
 8002ece:	9b05      	ldr	r3, [sp, #20]
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	05c9      	lsls	r1, r1, #23
 8002ed4:	d528      	bpl.n	8002f28 <_svfiprintf_r+0x1b4>
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	4393      	bics	r3, r2
 8002eda:	3308      	adds	r3, #8
 8002edc:	9305      	str	r3, [sp, #20]
 8002ede:	696b      	ldr	r3, [r5, #20]
 8002ee0:	9a03      	ldr	r2, [sp, #12]
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	616b      	str	r3, [r5, #20]
 8002ee6:	e767      	b.n	8002db8 <_svfiprintf_r+0x44>
 8002ee8:	425b      	negs	r3, r3
 8002eea:	60eb      	str	r3, [r5, #12]
 8002eec:	2302      	movs	r3, #2
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	602b      	str	r3, [r5, #0]
 8002ef2:	e7c0      	b.n	8002e76 <_svfiprintf_r+0x102>
 8002ef4:	434b      	muls	r3, r1
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	189b      	adds	r3, r3, r2
 8002efa:	2001      	movs	r0, #1
 8002efc:	e7a0      	b.n	8002e40 <_svfiprintf_r+0xcc>
 8002efe:	2301      	movs	r3, #1
 8002f00:	425b      	negs	r3, r3
 8002f02:	e7c7      	b.n	8002e94 <_svfiprintf_r+0x120>
 8002f04:	2300      	movs	r3, #0
 8002f06:	0014      	movs	r4, r2
 8002f08:	200a      	movs	r0, #10
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	606b      	str	r3, [r5, #4]
 8002f0e:	7821      	ldrb	r1, [r4, #0]
 8002f10:	3930      	subs	r1, #48	; 0x30
 8002f12:	2909      	cmp	r1, #9
 8002f14:	d903      	bls.n	8002f1e <_svfiprintf_r+0x1aa>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0bd      	beq.n	8002e96 <_svfiprintf_r+0x122>
 8002f1a:	9207      	str	r2, [sp, #28]
 8002f1c:	e7bb      	b.n	8002e96 <_svfiprintf_r+0x122>
 8002f1e:	4342      	muls	r2, r0
 8002f20:	3401      	adds	r4, #1
 8002f22:	1852      	adds	r2, r2, r1
 8002f24:	2301      	movs	r3, #1
 8002f26:	e7f2      	b.n	8002f0e <_svfiprintf_r+0x19a>
 8002f28:	3307      	adds	r3, #7
 8002f2a:	e7d5      	b.n	8002ed8 <_svfiprintf_r+0x164>
 8002f2c:	ab05      	add	r3, sp, #20
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	003a      	movs	r2, r7
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <_svfiprintf_r+0x204>)
 8002f34:	0029      	movs	r1, r5
 8002f36:	9802      	ldr	r0, [sp, #8]
 8002f38:	e000      	b.n	8002f3c <_svfiprintf_r+0x1c8>
 8002f3a:	bf00      	nop
 8002f3c:	9003      	str	r0, [sp, #12]
 8002f3e:	9b03      	ldr	r3, [sp, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	d1cc      	bne.n	8002ede <_svfiprintf_r+0x16a>
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002f48:	065b      	lsls	r3, r3, #25
 8002f4a:	d400      	bmi.n	8002f4e <_svfiprintf_r+0x1da>
 8002f4c:	e729      	b.n	8002da2 <_svfiprintf_r+0x2e>
 8002f4e:	2001      	movs	r0, #1
 8002f50:	4240      	negs	r0, r0
 8002f52:	e726      	b.n	8002da2 <_svfiprintf_r+0x2e>
 8002f54:	ab05      	add	r3, sp, #20
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	003a      	movs	r2, r7
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <_svfiprintf_r+0x204>)
 8002f5c:	0029      	movs	r1, r5
 8002f5e:	9802      	ldr	r0, [sp, #8]
 8002f60:	f000 f9be 	bl	80032e0 <_printf_i>
 8002f64:	e7ea      	b.n	8002f3c <_svfiprintf_r+0x1c8>
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	0800381c 	.word	0x0800381c
 8002f6c:	08003822 	.word	0x08003822
 8002f70:	08003826 	.word	0x08003826
 8002f74:	00000000 	.word	0x00000000
 8002f78:	08002cb1 	.word	0x08002cb1

08002f7c <__sfputc_r>:
 8002f7c:	6893      	ldr	r3, [r2, #8]
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	3b01      	subs	r3, #1
 8002f82:	6093      	str	r3, [r2, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da05      	bge.n	8002f94 <__sfputc_r+0x18>
 8002f88:	6994      	ldr	r4, [r2, #24]
 8002f8a:	42a3      	cmp	r3, r4
 8002f8c:	db08      	blt.n	8002fa0 <__sfputc_r+0x24>
 8002f8e:	b2cb      	uxtb	r3, r1
 8002f90:	2b0a      	cmp	r3, #10
 8002f92:	d005      	beq.n	8002fa0 <__sfputc_r+0x24>
 8002f94:	6813      	ldr	r3, [r2, #0]
 8002f96:	1c58      	adds	r0, r3, #1
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	7019      	strb	r1, [r3, #0]
 8002f9c:	b2c8      	uxtb	r0, r1
 8002f9e:	bd10      	pop	{r4, pc}
 8002fa0:	f7ff fb18 	bl	80025d4 <__swbuf_r>
 8002fa4:	e7fb      	b.n	8002f9e <__sfputc_r+0x22>

08002fa6 <__sfputs_r>:
 8002fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa8:	0006      	movs	r6, r0
 8002faa:	000f      	movs	r7, r1
 8002fac:	0014      	movs	r4, r2
 8002fae:	18d5      	adds	r5, r2, r3
 8002fb0:	42ac      	cmp	r4, r5
 8002fb2:	d101      	bne.n	8002fb8 <__sfputs_r+0x12>
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	e007      	b.n	8002fc8 <__sfputs_r+0x22>
 8002fb8:	7821      	ldrb	r1, [r4, #0]
 8002fba:	003a      	movs	r2, r7
 8002fbc:	0030      	movs	r0, r6
 8002fbe:	f7ff ffdd 	bl	8002f7c <__sfputc_r>
 8002fc2:	3401      	adds	r4, #1
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d1f3      	bne.n	8002fb0 <__sfputs_r+0xa>
 8002fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fcc <_vfiprintf_r>:
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	b09f      	sub	sp, #124	; 0x7c
 8002fd0:	0006      	movs	r6, r0
 8002fd2:	000f      	movs	r7, r1
 8002fd4:	0014      	movs	r4, r2
 8002fd6:	9305      	str	r3, [sp, #20]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d004      	beq.n	8002fe6 <_vfiprintf_r+0x1a>
 8002fdc:	6983      	ldr	r3, [r0, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <_vfiprintf_r+0x1a>
 8002fe2:	f7ff fcbb 	bl	800295c <__sinit>
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <_vfiprintf_r+0x218>)
 8002fe8:	429f      	cmp	r7, r3
 8002fea:	d15c      	bne.n	80030a6 <_vfiprintf_r+0xda>
 8002fec:	6877      	ldr	r7, [r6, #4]
 8002fee:	89bb      	ldrh	r3, [r7, #12]
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	d562      	bpl.n	80030ba <_vfiprintf_r+0xee>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d05f      	beq.n	80030ba <_vfiprintf_r+0xee>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	ad06      	add	r5, sp, #24
 8002ffe:	616b      	str	r3, [r5, #20]
 8003000:	3320      	adds	r3, #32
 8003002:	766b      	strb	r3, [r5, #25]
 8003004:	3310      	adds	r3, #16
 8003006:	76ab      	strb	r3, [r5, #26]
 8003008:	9402      	str	r4, [sp, #8]
 800300a:	9c02      	ldr	r4, [sp, #8]
 800300c:	7823      	ldrb	r3, [r4, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d15d      	bne.n	80030ce <_vfiprintf_r+0x102>
 8003012:	9b02      	ldr	r3, [sp, #8]
 8003014:	1ae3      	subs	r3, r4, r3
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	d00d      	beq.n	8003036 <_vfiprintf_r+0x6a>
 800301a:	9b04      	ldr	r3, [sp, #16]
 800301c:	9a02      	ldr	r2, [sp, #8]
 800301e:	0039      	movs	r1, r7
 8003020:	0030      	movs	r0, r6
 8003022:	f7ff ffc0 	bl	8002fa6 <__sfputs_r>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d100      	bne.n	800302c <_vfiprintf_r+0x60>
 800302a:	e0cc      	b.n	80031c6 <_vfiprintf_r+0x1fa>
 800302c:	696a      	ldr	r2, [r5, #20]
 800302e:	9b04      	ldr	r3, [sp, #16]
 8003030:	4694      	mov	ip, r2
 8003032:	4463      	add	r3, ip
 8003034:	616b      	str	r3, [r5, #20]
 8003036:	7823      	ldrb	r3, [r4, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <_vfiprintf_r+0x72>
 800303c:	e0c3      	b.n	80031c6 <_vfiprintf_r+0x1fa>
 800303e:	2201      	movs	r2, #1
 8003040:	2300      	movs	r3, #0
 8003042:	4252      	negs	r2, r2
 8003044:	606a      	str	r2, [r5, #4]
 8003046:	a902      	add	r1, sp, #8
 8003048:	3254      	adds	r2, #84	; 0x54
 800304a:	1852      	adds	r2, r2, r1
 800304c:	3401      	adds	r4, #1
 800304e:	602b      	str	r3, [r5, #0]
 8003050:	60eb      	str	r3, [r5, #12]
 8003052:	60ab      	str	r3, [r5, #8]
 8003054:	7013      	strb	r3, [r2, #0]
 8003056:	65ab      	str	r3, [r5, #88]	; 0x58
 8003058:	7821      	ldrb	r1, [r4, #0]
 800305a:	2205      	movs	r2, #5
 800305c:	4862      	ldr	r0, [pc, #392]	; (80031e8 <_vfiprintf_r+0x21c>)
 800305e:	f000 fb15 	bl	800368c <memchr>
 8003062:	1c63      	adds	r3, r4, #1
 8003064:	469c      	mov	ip, r3
 8003066:	2800      	cmp	r0, #0
 8003068:	d135      	bne.n	80030d6 <_vfiprintf_r+0x10a>
 800306a:	6829      	ldr	r1, [r5, #0]
 800306c:	06cb      	lsls	r3, r1, #27
 800306e:	d504      	bpl.n	800307a <_vfiprintf_r+0xae>
 8003070:	2353      	movs	r3, #83	; 0x53
 8003072:	aa02      	add	r2, sp, #8
 8003074:	3020      	adds	r0, #32
 8003076:	189b      	adds	r3, r3, r2
 8003078:	7018      	strb	r0, [r3, #0]
 800307a:	070b      	lsls	r3, r1, #28
 800307c:	d504      	bpl.n	8003088 <_vfiprintf_r+0xbc>
 800307e:	2353      	movs	r3, #83	; 0x53
 8003080:	202b      	movs	r0, #43	; 0x2b
 8003082:	aa02      	add	r2, sp, #8
 8003084:	189b      	adds	r3, r3, r2
 8003086:	7018      	strb	r0, [r3, #0]
 8003088:	7823      	ldrb	r3, [r4, #0]
 800308a:	2b2a      	cmp	r3, #42	; 0x2a
 800308c:	d02c      	beq.n	80030e8 <_vfiprintf_r+0x11c>
 800308e:	2000      	movs	r0, #0
 8003090:	210a      	movs	r1, #10
 8003092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003094:	7822      	ldrb	r2, [r4, #0]
 8003096:	3a30      	subs	r2, #48	; 0x30
 8003098:	2a09      	cmp	r2, #9
 800309a:	d800      	bhi.n	800309e <_vfiprintf_r+0xd2>
 800309c:	e06b      	b.n	8003176 <_vfiprintf_r+0x1aa>
 800309e:	2800      	cmp	r0, #0
 80030a0:	d02a      	beq.n	80030f8 <_vfiprintf_r+0x12c>
 80030a2:	9309      	str	r3, [sp, #36]	; 0x24
 80030a4:	e028      	b.n	80030f8 <_vfiprintf_r+0x12c>
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <_vfiprintf_r+0x220>)
 80030a8:	429f      	cmp	r7, r3
 80030aa:	d101      	bne.n	80030b0 <_vfiprintf_r+0xe4>
 80030ac:	68b7      	ldr	r7, [r6, #8]
 80030ae:	e79e      	b.n	8002fee <_vfiprintf_r+0x22>
 80030b0:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <_vfiprintf_r+0x224>)
 80030b2:	429f      	cmp	r7, r3
 80030b4:	d19b      	bne.n	8002fee <_vfiprintf_r+0x22>
 80030b6:	68f7      	ldr	r7, [r6, #12]
 80030b8:	e799      	b.n	8002fee <_vfiprintf_r+0x22>
 80030ba:	0039      	movs	r1, r7
 80030bc:	0030      	movs	r0, r6
 80030be:	f7ff fadf 	bl	8002680 <__swsetup_r>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d099      	beq.n	8002ffa <_vfiprintf_r+0x2e>
 80030c6:	2001      	movs	r0, #1
 80030c8:	4240      	negs	r0, r0
 80030ca:	b01f      	add	sp, #124	; 0x7c
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ce:	2b25      	cmp	r3, #37	; 0x25
 80030d0:	d09f      	beq.n	8003012 <_vfiprintf_r+0x46>
 80030d2:	3401      	adds	r4, #1
 80030d4:	e79a      	b.n	800300c <_vfiprintf_r+0x40>
 80030d6:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <_vfiprintf_r+0x21c>)
 80030d8:	6829      	ldr	r1, [r5, #0]
 80030da:	1ac0      	subs	r0, r0, r3
 80030dc:	2301      	movs	r3, #1
 80030de:	4083      	lsls	r3, r0
 80030e0:	430b      	orrs	r3, r1
 80030e2:	602b      	str	r3, [r5, #0]
 80030e4:	4664      	mov	r4, ip
 80030e6:	e7b7      	b.n	8003058 <_vfiprintf_r+0x8c>
 80030e8:	9b05      	ldr	r3, [sp, #20]
 80030ea:	1d18      	adds	r0, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	9005      	str	r0, [sp, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db3a      	blt.n	800316a <_vfiprintf_r+0x19e>
 80030f4:	9309      	str	r3, [sp, #36]	; 0x24
 80030f6:	4664      	mov	r4, ip
 80030f8:	7823      	ldrb	r3, [r4, #0]
 80030fa:	2b2e      	cmp	r3, #46	; 0x2e
 80030fc:	d10b      	bne.n	8003116 <_vfiprintf_r+0x14a>
 80030fe:	7863      	ldrb	r3, [r4, #1]
 8003100:	1c62      	adds	r2, r4, #1
 8003102:	2b2a      	cmp	r3, #42	; 0x2a
 8003104:	d13f      	bne.n	8003186 <_vfiprintf_r+0x1ba>
 8003106:	9b05      	ldr	r3, [sp, #20]
 8003108:	3402      	adds	r4, #2
 800310a:	1d1a      	adds	r2, r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	9205      	str	r2, [sp, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	db35      	blt.n	8003180 <_vfiprintf_r+0x1b4>
 8003114:	9307      	str	r3, [sp, #28]
 8003116:	7821      	ldrb	r1, [r4, #0]
 8003118:	2203      	movs	r2, #3
 800311a:	4836      	ldr	r0, [pc, #216]	; (80031f4 <_vfiprintf_r+0x228>)
 800311c:	f000 fab6 	bl	800368c <memchr>
 8003120:	2800      	cmp	r0, #0
 8003122:	d007      	beq.n	8003134 <_vfiprintf_r+0x168>
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <_vfiprintf_r+0x228>)
 8003126:	682a      	ldr	r2, [r5, #0]
 8003128:	1ac0      	subs	r0, r0, r3
 800312a:	2340      	movs	r3, #64	; 0x40
 800312c:	4083      	lsls	r3, r0
 800312e:	4313      	orrs	r3, r2
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	3401      	adds	r4, #1
 8003134:	7821      	ldrb	r1, [r4, #0]
 8003136:	1c63      	adds	r3, r4, #1
 8003138:	2206      	movs	r2, #6
 800313a:	482f      	ldr	r0, [pc, #188]	; (80031f8 <_vfiprintf_r+0x22c>)
 800313c:	9302      	str	r3, [sp, #8]
 800313e:	7629      	strb	r1, [r5, #24]
 8003140:	f000 faa4 	bl	800368c <memchr>
 8003144:	2800      	cmp	r0, #0
 8003146:	d044      	beq.n	80031d2 <_vfiprintf_r+0x206>
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <_vfiprintf_r+0x230>)
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12f      	bne.n	80031ae <_vfiprintf_r+0x1e2>
 800314e:	6829      	ldr	r1, [r5, #0]
 8003150:	9b05      	ldr	r3, [sp, #20]
 8003152:	2207      	movs	r2, #7
 8003154:	05c9      	lsls	r1, r1, #23
 8003156:	d528      	bpl.n	80031aa <_vfiprintf_r+0x1de>
 8003158:	189b      	adds	r3, r3, r2
 800315a:	4393      	bics	r3, r2
 800315c:	3308      	adds	r3, #8
 800315e:	9305      	str	r3, [sp, #20]
 8003160:	696b      	ldr	r3, [r5, #20]
 8003162:	9a03      	ldr	r2, [sp, #12]
 8003164:	189b      	adds	r3, r3, r2
 8003166:	616b      	str	r3, [r5, #20]
 8003168:	e74f      	b.n	800300a <_vfiprintf_r+0x3e>
 800316a:	425b      	negs	r3, r3
 800316c:	60eb      	str	r3, [r5, #12]
 800316e:	2302      	movs	r3, #2
 8003170:	430b      	orrs	r3, r1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	e7bf      	b.n	80030f6 <_vfiprintf_r+0x12a>
 8003176:	434b      	muls	r3, r1
 8003178:	3401      	adds	r4, #1
 800317a:	189b      	adds	r3, r3, r2
 800317c:	2001      	movs	r0, #1
 800317e:	e789      	b.n	8003094 <_vfiprintf_r+0xc8>
 8003180:	2301      	movs	r3, #1
 8003182:	425b      	negs	r3, r3
 8003184:	e7c6      	b.n	8003114 <_vfiprintf_r+0x148>
 8003186:	2300      	movs	r3, #0
 8003188:	0014      	movs	r4, r2
 800318a:	200a      	movs	r0, #10
 800318c:	001a      	movs	r2, r3
 800318e:	606b      	str	r3, [r5, #4]
 8003190:	7821      	ldrb	r1, [r4, #0]
 8003192:	3930      	subs	r1, #48	; 0x30
 8003194:	2909      	cmp	r1, #9
 8003196:	d903      	bls.n	80031a0 <_vfiprintf_r+0x1d4>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0bc      	beq.n	8003116 <_vfiprintf_r+0x14a>
 800319c:	9207      	str	r2, [sp, #28]
 800319e:	e7ba      	b.n	8003116 <_vfiprintf_r+0x14a>
 80031a0:	4342      	muls	r2, r0
 80031a2:	3401      	adds	r4, #1
 80031a4:	1852      	adds	r2, r2, r1
 80031a6:	2301      	movs	r3, #1
 80031a8:	e7f2      	b.n	8003190 <_vfiprintf_r+0x1c4>
 80031aa:	3307      	adds	r3, #7
 80031ac:	e7d5      	b.n	800315a <_vfiprintf_r+0x18e>
 80031ae:	ab05      	add	r3, sp, #20
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	003a      	movs	r2, r7
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <_vfiprintf_r+0x234>)
 80031b6:	0029      	movs	r1, r5
 80031b8:	0030      	movs	r0, r6
 80031ba:	e000      	b.n	80031be <_vfiprintf_r+0x1f2>
 80031bc:	bf00      	nop
 80031be:	9003      	str	r0, [sp, #12]
 80031c0:	9b03      	ldr	r3, [sp, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	d1cc      	bne.n	8003160 <_vfiprintf_r+0x194>
 80031c6:	89bb      	ldrh	r3, [r7, #12]
 80031c8:	065b      	lsls	r3, r3, #25
 80031ca:	d500      	bpl.n	80031ce <_vfiprintf_r+0x202>
 80031cc:	e77b      	b.n	80030c6 <_vfiprintf_r+0xfa>
 80031ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80031d0:	e77b      	b.n	80030ca <_vfiprintf_r+0xfe>
 80031d2:	ab05      	add	r3, sp, #20
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	003a      	movs	r2, r7
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <_vfiprintf_r+0x234>)
 80031da:	0029      	movs	r1, r5
 80031dc:	0030      	movs	r0, r6
 80031de:	f000 f87f 	bl	80032e0 <_printf_i>
 80031e2:	e7ec      	b.n	80031be <_vfiprintf_r+0x1f2>
 80031e4:	080037dc 	.word	0x080037dc
 80031e8:	0800381c 	.word	0x0800381c
 80031ec:	080037fc 	.word	0x080037fc
 80031f0:	080037bc 	.word	0x080037bc
 80031f4:	08003822 	.word	0x08003822
 80031f8:	08003826 	.word	0x08003826
 80031fc:	00000000 	.word	0x00000000
 8003200:	08002fa7 	.word	0x08002fa7

08003204 <_printf_common>:
 8003204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003206:	0015      	movs	r5, r2
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	688a      	ldr	r2, [r1, #8]
 800320c:	690b      	ldr	r3, [r1, #16]
 800320e:	9000      	str	r0, [sp, #0]
 8003210:	000c      	movs	r4, r1
 8003212:	4293      	cmp	r3, r2
 8003214:	da00      	bge.n	8003218 <_printf_common+0x14>
 8003216:	0013      	movs	r3, r2
 8003218:	0022      	movs	r2, r4
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	3243      	adds	r2, #67	; 0x43
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	2a00      	cmp	r2, #0
 8003222:	d001      	beq.n	8003228 <_printf_common+0x24>
 8003224:	3301      	adds	r3, #1
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	069b      	lsls	r3, r3, #26
 800322c:	d502      	bpl.n	8003234 <_printf_common+0x30>
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	3302      	adds	r3, #2
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	2706      	movs	r7, #6
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	401f      	ands	r7, r3
 800323a:	d027      	beq.n	800328c <_printf_common+0x88>
 800323c:	0023      	movs	r3, r4
 800323e:	3343      	adds	r3, #67	; 0x43
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	4193      	sbcs	r3, r2
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	0692      	lsls	r2, r2, #26
 800324a:	d430      	bmi.n	80032ae <_printf_common+0xaa>
 800324c:	0022      	movs	r2, r4
 800324e:	9901      	ldr	r1, [sp, #4]
 8003250:	3243      	adds	r2, #67	; 0x43
 8003252:	9800      	ldr	r0, [sp, #0]
 8003254:	9e08      	ldr	r6, [sp, #32]
 8003256:	47b0      	blx	r6
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d025      	beq.n	80032a8 <_printf_common+0xa4>
 800325c:	2306      	movs	r3, #6
 800325e:	6820      	ldr	r0, [r4, #0]
 8003260:	682a      	ldr	r2, [r5, #0]
 8003262:	68e1      	ldr	r1, [r4, #12]
 8003264:	4003      	ands	r3, r0
 8003266:	2500      	movs	r5, #0
 8003268:	2b04      	cmp	r3, #4
 800326a:	d103      	bne.n	8003274 <_printf_common+0x70>
 800326c:	1a8d      	subs	r5, r1, r2
 800326e:	43eb      	mvns	r3, r5
 8003270:	17db      	asrs	r3, r3, #31
 8003272:	401d      	ands	r5, r3
 8003274:	68a3      	ldr	r3, [r4, #8]
 8003276:	6922      	ldr	r2, [r4, #16]
 8003278:	4293      	cmp	r3, r2
 800327a:	dd01      	ble.n	8003280 <_printf_common+0x7c>
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	18ed      	adds	r5, r5, r3
 8003280:	2700      	movs	r7, #0
 8003282:	42bd      	cmp	r5, r7
 8003284:	d120      	bne.n	80032c8 <_printf_common+0xc4>
 8003286:	2000      	movs	r0, #0
 8003288:	e010      	b.n	80032ac <_printf_common+0xa8>
 800328a:	3701      	adds	r7, #1
 800328c:	68e3      	ldr	r3, [r4, #12]
 800328e:	682a      	ldr	r2, [r5, #0]
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	429f      	cmp	r7, r3
 8003294:	dad2      	bge.n	800323c <_printf_common+0x38>
 8003296:	0022      	movs	r2, r4
 8003298:	2301      	movs	r3, #1
 800329a:	3219      	adds	r2, #25
 800329c:	9901      	ldr	r1, [sp, #4]
 800329e:	9800      	ldr	r0, [sp, #0]
 80032a0:	9e08      	ldr	r6, [sp, #32]
 80032a2:	47b0      	blx	r6
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d1f0      	bne.n	800328a <_printf_common+0x86>
 80032a8:	2001      	movs	r0, #1
 80032aa:	4240      	negs	r0, r0
 80032ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032ae:	2030      	movs	r0, #48	; 0x30
 80032b0:	18e1      	adds	r1, r4, r3
 80032b2:	3143      	adds	r1, #67	; 0x43
 80032b4:	7008      	strb	r0, [r1, #0]
 80032b6:	0021      	movs	r1, r4
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	3145      	adds	r1, #69	; 0x45
 80032bc:	7809      	ldrb	r1, [r1, #0]
 80032be:	18a2      	adds	r2, r4, r2
 80032c0:	3243      	adds	r2, #67	; 0x43
 80032c2:	3302      	adds	r3, #2
 80032c4:	7011      	strb	r1, [r2, #0]
 80032c6:	e7c1      	b.n	800324c <_printf_common+0x48>
 80032c8:	0022      	movs	r2, r4
 80032ca:	2301      	movs	r3, #1
 80032cc:	321a      	adds	r2, #26
 80032ce:	9901      	ldr	r1, [sp, #4]
 80032d0:	9800      	ldr	r0, [sp, #0]
 80032d2:	9e08      	ldr	r6, [sp, #32]
 80032d4:	47b0      	blx	r6
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d0e6      	beq.n	80032a8 <_printf_common+0xa4>
 80032da:	3701      	adds	r7, #1
 80032dc:	e7d1      	b.n	8003282 <_printf_common+0x7e>
	...

080032e0 <_printf_i>:
 80032e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e2:	b08b      	sub	sp, #44	; 0x2c
 80032e4:	9206      	str	r2, [sp, #24]
 80032e6:	000a      	movs	r2, r1
 80032e8:	3243      	adds	r2, #67	; 0x43
 80032ea:	9307      	str	r3, [sp, #28]
 80032ec:	9005      	str	r0, [sp, #20]
 80032ee:	9204      	str	r2, [sp, #16]
 80032f0:	7e0a      	ldrb	r2, [r1, #24]
 80032f2:	000c      	movs	r4, r1
 80032f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032f6:	2a6e      	cmp	r2, #110	; 0x6e
 80032f8:	d100      	bne.n	80032fc <_printf_i+0x1c>
 80032fa:	e08f      	b.n	800341c <_printf_i+0x13c>
 80032fc:	d817      	bhi.n	800332e <_printf_i+0x4e>
 80032fe:	2a63      	cmp	r2, #99	; 0x63
 8003300:	d02c      	beq.n	800335c <_printf_i+0x7c>
 8003302:	d808      	bhi.n	8003316 <_printf_i+0x36>
 8003304:	2a00      	cmp	r2, #0
 8003306:	d100      	bne.n	800330a <_printf_i+0x2a>
 8003308:	e099      	b.n	800343e <_printf_i+0x15e>
 800330a:	2a58      	cmp	r2, #88	; 0x58
 800330c:	d054      	beq.n	80033b8 <_printf_i+0xd8>
 800330e:	0026      	movs	r6, r4
 8003310:	3642      	adds	r6, #66	; 0x42
 8003312:	7032      	strb	r2, [r6, #0]
 8003314:	e029      	b.n	800336a <_printf_i+0x8a>
 8003316:	2a64      	cmp	r2, #100	; 0x64
 8003318:	d001      	beq.n	800331e <_printf_i+0x3e>
 800331a:	2a69      	cmp	r2, #105	; 0x69
 800331c:	d1f7      	bne.n	800330e <_printf_i+0x2e>
 800331e:	6821      	ldr	r1, [r4, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	0608      	lsls	r0, r1, #24
 8003324:	d523      	bpl.n	800336e <_printf_i+0x8e>
 8003326:	1d11      	adds	r1, r2, #4
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	6815      	ldr	r5, [r2, #0]
 800332c:	e025      	b.n	800337a <_printf_i+0x9a>
 800332e:	2a73      	cmp	r2, #115	; 0x73
 8003330:	d100      	bne.n	8003334 <_printf_i+0x54>
 8003332:	e088      	b.n	8003446 <_printf_i+0x166>
 8003334:	d808      	bhi.n	8003348 <_printf_i+0x68>
 8003336:	2a6f      	cmp	r2, #111	; 0x6f
 8003338:	d029      	beq.n	800338e <_printf_i+0xae>
 800333a:	2a70      	cmp	r2, #112	; 0x70
 800333c:	d1e7      	bne.n	800330e <_printf_i+0x2e>
 800333e:	2220      	movs	r2, #32
 8003340:	6809      	ldr	r1, [r1, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	6022      	str	r2, [r4, #0]
 8003346:	e003      	b.n	8003350 <_printf_i+0x70>
 8003348:	2a75      	cmp	r2, #117	; 0x75
 800334a:	d020      	beq.n	800338e <_printf_i+0xae>
 800334c:	2a78      	cmp	r2, #120	; 0x78
 800334e:	d1de      	bne.n	800330e <_printf_i+0x2e>
 8003350:	0022      	movs	r2, r4
 8003352:	2178      	movs	r1, #120	; 0x78
 8003354:	3245      	adds	r2, #69	; 0x45
 8003356:	7011      	strb	r1, [r2, #0]
 8003358:	4a6c      	ldr	r2, [pc, #432]	; (800350c <_printf_i+0x22c>)
 800335a:	e030      	b.n	80033be <_printf_i+0xde>
 800335c:	000e      	movs	r6, r1
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	3642      	adds	r6, #66	; 0x42
 8003362:	1d11      	adds	r1, r2, #4
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	7033      	strb	r3, [r6, #0]
 800336a:	2301      	movs	r3, #1
 800336c:	e079      	b.n	8003462 <_printf_i+0x182>
 800336e:	0649      	lsls	r1, r1, #25
 8003370:	d5d9      	bpl.n	8003326 <_printf_i+0x46>
 8003372:	1d11      	adds	r1, r2, #4
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	5ed5      	ldrsh	r5, [r2, r3]
 800337a:	2d00      	cmp	r5, #0
 800337c:	da03      	bge.n	8003386 <_printf_i+0xa6>
 800337e:	232d      	movs	r3, #45	; 0x2d
 8003380:	9a04      	ldr	r2, [sp, #16]
 8003382:	426d      	negs	r5, r5
 8003384:	7013      	strb	r3, [r2, #0]
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <_printf_i+0x230>)
 8003388:	270a      	movs	r7, #10
 800338a:	9303      	str	r3, [sp, #12]
 800338c:	e02f      	b.n	80033ee <_printf_i+0x10e>
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	0605      	lsls	r5, r0, #24
 8003394:	d503      	bpl.n	800339e <_printf_i+0xbe>
 8003396:	1d08      	adds	r0, r1, #4
 8003398:	6018      	str	r0, [r3, #0]
 800339a:	680d      	ldr	r5, [r1, #0]
 800339c:	e005      	b.n	80033aa <_printf_i+0xca>
 800339e:	0640      	lsls	r0, r0, #25
 80033a0:	d5f9      	bpl.n	8003396 <_printf_i+0xb6>
 80033a2:	680d      	ldr	r5, [r1, #0]
 80033a4:	1d08      	adds	r0, r1, #4
 80033a6:	6018      	str	r0, [r3, #0]
 80033a8:	b2ad      	uxth	r5, r5
 80033aa:	4b59      	ldr	r3, [pc, #356]	; (8003510 <_printf_i+0x230>)
 80033ac:	2708      	movs	r7, #8
 80033ae:	9303      	str	r3, [sp, #12]
 80033b0:	2a6f      	cmp	r2, #111	; 0x6f
 80033b2:	d018      	beq.n	80033e6 <_printf_i+0x106>
 80033b4:	270a      	movs	r7, #10
 80033b6:	e016      	b.n	80033e6 <_printf_i+0x106>
 80033b8:	3145      	adds	r1, #69	; 0x45
 80033ba:	700a      	strb	r2, [r1, #0]
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <_printf_i+0x230>)
 80033be:	9203      	str	r2, [sp, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	6821      	ldr	r1, [r4, #0]
 80033c4:	1d10      	adds	r0, r2, #4
 80033c6:	6018      	str	r0, [r3, #0]
 80033c8:	6815      	ldr	r5, [r2, #0]
 80033ca:	0608      	lsls	r0, r1, #24
 80033cc:	d522      	bpl.n	8003414 <_printf_i+0x134>
 80033ce:	07cb      	lsls	r3, r1, #31
 80033d0:	d502      	bpl.n	80033d8 <_printf_i+0xf8>
 80033d2:	2320      	movs	r3, #32
 80033d4:	4319      	orrs	r1, r3
 80033d6:	6021      	str	r1, [r4, #0]
 80033d8:	2710      	movs	r7, #16
 80033da:	2d00      	cmp	r5, #0
 80033dc:	d103      	bne.n	80033e6 <_printf_i+0x106>
 80033de:	2320      	movs	r3, #32
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	439a      	bics	r2, r3
 80033e4:	6022      	str	r2, [r4, #0]
 80033e6:	0023      	movs	r3, r4
 80033e8:	2200      	movs	r2, #0
 80033ea:	3343      	adds	r3, #67	; 0x43
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	60a3      	str	r3, [r4, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db5c      	blt.n	80034b0 <_printf_i+0x1d0>
 80033f6:	2204      	movs	r2, #4
 80033f8:	6821      	ldr	r1, [r4, #0]
 80033fa:	4391      	bics	r1, r2
 80033fc:	6021      	str	r1, [r4, #0]
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d158      	bne.n	80034b4 <_printf_i+0x1d4>
 8003402:	9e04      	ldr	r6, [sp, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d064      	beq.n	80034d2 <_printf_i+0x1f2>
 8003408:	0026      	movs	r6, r4
 800340a:	9b03      	ldr	r3, [sp, #12]
 800340c:	3642      	adds	r6, #66	; 0x42
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	7033      	strb	r3, [r6, #0]
 8003412:	e05e      	b.n	80034d2 <_printf_i+0x1f2>
 8003414:	0648      	lsls	r0, r1, #25
 8003416:	d5da      	bpl.n	80033ce <_printf_i+0xee>
 8003418:	b2ad      	uxth	r5, r5
 800341a:	e7d8      	b.n	80033ce <_printf_i+0xee>
 800341c:	6809      	ldr	r1, [r1, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	0608      	lsls	r0, r1, #24
 8003422:	d505      	bpl.n	8003430 <_printf_i+0x150>
 8003424:	1d11      	adds	r1, r2, #4
 8003426:	6019      	str	r1, [r3, #0]
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	6962      	ldr	r2, [r4, #20]
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e006      	b.n	800343e <_printf_i+0x15e>
 8003430:	0649      	lsls	r1, r1, #25
 8003432:	d5f7      	bpl.n	8003424 <_printf_i+0x144>
 8003434:	1d11      	adds	r1, r2, #4
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	8aa2      	ldrh	r2, [r4, #20]
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	2300      	movs	r3, #0
 8003440:	9e04      	ldr	r6, [sp, #16]
 8003442:	6123      	str	r3, [r4, #16]
 8003444:	e054      	b.n	80034f0 <_printf_i+0x210>
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	1d11      	adds	r1, r2, #4
 800344a:	6019      	str	r1, [r3, #0]
 800344c:	6816      	ldr	r6, [r2, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	6862      	ldr	r2, [r4, #4]
 8003452:	0030      	movs	r0, r6
 8003454:	f000 f91a 	bl	800368c <memchr>
 8003458:	2800      	cmp	r0, #0
 800345a:	d001      	beq.n	8003460 <_printf_i+0x180>
 800345c:	1b80      	subs	r0, r0, r6
 800345e:	6060      	str	r0, [r4, #4]
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	2300      	movs	r3, #0
 8003466:	9a04      	ldr	r2, [sp, #16]
 8003468:	7013      	strb	r3, [r2, #0]
 800346a:	e041      	b.n	80034f0 <_printf_i+0x210>
 800346c:	6923      	ldr	r3, [r4, #16]
 800346e:	0032      	movs	r2, r6
 8003470:	9906      	ldr	r1, [sp, #24]
 8003472:	9805      	ldr	r0, [sp, #20]
 8003474:	9d07      	ldr	r5, [sp, #28]
 8003476:	47a8      	blx	r5
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d043      	beq.n	8003504 <_printf_i+0x224>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	2500      	movs	r5, #0
 8003480:	079b      	lsls	r3, r3, #30
 8003482:	d40f      	bmi.n	80034a4 <_printf_i+0x1c4>
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	68e0      	ldr	r0, [r4, #12]
 8003488:	4298      	cmp	r0, r3
 800348a:	da3d      	bge.n	8003508 <_printf_i+0x228>
 800348c:	0018      	movs	r0, r3
 800348e:	e03b      	b.n	8003508 <_printf_i+0x228>
 8003490:	0022      	movs	r2, r4
 8003492:	2301      	movs	r3, #1
 8003494:	3219      	adds	r2, #25
 8003496:	9906      	ldr	r1, [sp, #24]
 8003498:	9805      	ldr	r0, [sp, #20]
 800349a:	9e07      	ldr	r6, [sp, #28]
 800349c:	47b0      	blx	r6
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d030      	beq.n	8003504 <_printf_i+0x224>
 80034a2:	3501      	adds	r5, #1
 80034a4:	68e3      	ldr	r3, [r4, #12]
 80034a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	429d      	cmp	r5, r3
 80034ac:	dbf0      	blt.n	8003490 <_printf_i+0x1b0>
 80034ae:	e7e9      	b.n	8003484 <_printf_i+0x1a4>
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	d0a9      	beq.n	8003408 <_printf_i+0x128>
 80034b4:	9e04      	ldr	r6, [sp, #16]
 80034b6:	0028      	movs	r0, r5
 80034b8:	0039      	movs	r1, r7
 80034ba:	f7fc febf 	bl	800023c <__aeabi_uidivmod>
 80034be:	9b03      	ldr	r3, [sp, #12]
 80034c0:	3e01      	subs	r6, #1
 80034c2:	5c5b      	ldrb	r3, [r3, r1]
 80034c4:	0028      	movs	r0, r5
 80034c6:	7033      	strb	r3, [r6, #0]
 80034c8:	0039      	movs	r1, r7
 80034ca:	f7fc fe31 	bl	8000130 <__udivsi3>
 80034ce:	1e05      	subs	r5, r0, #0
 80034d0:	d1f1      	bne.n	80034b6 <_printf_i+0x1d6>
 80034d2:	2f08      	cmp	r7, #8
 80034d4:	d109      	bne.n	80034ea <_printf_i+0x20a>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	07db      	lsls	r3, r3, #31
 80034da:	d506      	bpl.n	80034ea <_printf_i+0x20a>
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	6922      	ldr	r2, [r4, #16]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	dc02      	bgt.n	80034ea <_printf_i+0x20a>
 80034e4:	2330      	movs	r3, #48	; 0x30
 80034e6:	3e01      	subs	r6, #1
 80034e8:	7033      	strb	r3, [r6, #0]
 80034ea:	9b04      	ldr	r3, [sp, #16]
 80034ec:	1b9b      	subs	r3, r3, r6
 80034ee:	6123      	str	r3, [r4, #16]
 80034f0:	9b07      	ldr	r3, [sp, #28]
 80034f2:	aa09      	add	r2, sp, #36	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	0021      	movs	r1, r4
 80034f8:	9b06      	ldr	r3, [sp, #24]
 80034fa:	9805      	ldr	r0, [sp, #20]
 80034fc:	f7ff fe82 	bl	8003204 <_printf_common>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d1b3      	bne.n	800346c <_printf_i+0x18c>
 8003504:	2001      	movs	r0, #1
 8003506:	4240      	negs	r0, r0
 8003508:	b00b      	add	sp, #44	; 0x2c
 800350a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350c:	0800383e 	.word	0x0800383e
 8003510:	0800382d 	.word	0x0800382d

08003514 <_sbrk_r>:
 8003514:	2300      	movs	r3, #0
 8003516:	b570      	push	{r4, r5, r6, lr}
 8003518:	4c06      	ldr	r4, [pc, #24]	; (8003534 <_sbrk_r+0x20>)
 800351a:	0005      	movs	r5, r0
 800351c:	0008      	movs	r0, r1
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	f7fe ff24 	bl	800236c <_sbrk>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d103      	bne.n	8003530 <_sbrk_r+0x1c>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d000      	beq.n	8003530 <_sbrk_r+0x1c>
 800352e:	602b      	str	r3, [r5, #0]
 8003530:	bd70      	pop	{r4, r5, r6, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000280 	.word	0x20000280

08003538 <__sread>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	000c      	movs	r4, r1
 800353c:	250e      	movs	r5, #14
 800353e:	5f49      	ldrsh	r1, [r1, r5]
 8003540:	f000 f8ea 	bl	8003718 <_read_r>
 8003544:	2800      	cmp	r0, #0
 8003546:	db03      	blt.n	8003550 <__sread+0x18>
 8003548:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800354a:	181b      	adds	r3, r3, r0
 800354c:	6563      	str	r3, [r4, #84]	; 0x54
 800354e:	bd70      	pop	{r4, r5, r6, pc}
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	4a02      	ldr	r2, [pc, #8]	; (800355c <__sread+0x24>)
 8003554:	4013      	ands	r3, r2
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	e7f9      	b.n	800354e <__sread+0x16>
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	ffffefff 	.word	0xffffefff

08003560 <__swrite>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	001f      	movs	r7, r3
 8003564:	898b      	ldrh	r3, [r1, #12]
 8003566:	0005      	movs	r5, r0
 8003568:	000c      	movs	r4, r1
 800356a:	0016      	movs	r6, r2
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	d505      	bpl.n	800357c <__swrite+0x1c>
 8003570:	230e      	movs	r3, #14
 8003572:	5ec9      	ldrsh	r1, [r1, r3]
 8003574:	2200      	movs	r2, #0
 8003576:	2302      	movs	r3, #2
 8003578:	f000 f874 	bl	8003664 <_lseek_r>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <__swrite+0x34>)
 8003580:	0028      	movs	r0, r5
 8003582:	4013      	ands	r3, r2
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	0032      	movs	r2, r6
 8003588:	230e      	movs	r3, #14
 800358a:	5ee1      	ldrsh	r1, [r4, r3]
 800358c:	003b      	movs	r3, r7
 800358e:	f000 f81f 	bl	80035d0 <_write_r>
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003594:	ffffefff 	.word	0xffffefff

08003598 <__sseek>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	000c      	movs	r4, r1
 800359c:	250e      	movs	r5, #14
 800359e:	5f49      	ldrsh	r1, [r1, r5]
 80035a0:	f000 f860 	bl	8003664 <_lseek_r>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	1c42      	adds	r2, r0, #1
 80035a8:	d103      	bne.n	80035b2 <__sseek+0x1a>
 80035aa:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <__sseek+0x28>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	0152      	lsls	r2, r2, #5
 80035b6:	4313      	orrs	r3, r2
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6560      	str	r0, [r4, #84]	; 0x54
 80035bc:	e7f8      	b.n	80035b0 <__sseek+0x18>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	ffffefff 	.word	0xffffefff

080035c4 <__sclose>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	230e      	movs	r3, #14
 80035c8:	5ec9      	ldrsh	r1, [r1, r3]
 80035ca:	f000 f815 	bl	80035f8 <_close_r>
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <_write_r>:
 80035d0:	b570      	push	{r4, r5, r6, lr}
 80035d2:	0005      	movs	r5, r0
 80035d4:	0008      	movs	r0, r1
 80035d6:	0011      	movs	r1, r2
 80035d8:	2200      	movs	r2, #0
 80035da:	4c06      	ldr	r4, [pc, #24]	; (80035f4 <_write_r+0x24>)
 80035dc:	6022      	str	r2, [r4, #0]
 80035de:	001a      	movs	r2, r3
 80035e0:	f7fe feb6 	bl	8002350 <_write>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d103      	bne.n	80035f0 <_write_r+0x20>
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d000      	beq.n	80035f0 <_write_r+0x20>
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000280 	.word	0x20000280

080035f8 <_close_r>:
 80035f8:	2300      	movs	r3, #0
 80035fa:	b570      	push	{r4, r5, r6, lr}
 80035fc:	4c06      	ldr	r4, [pc, #24]	; (8003618 <_close_r+0x20>)
 80035fe:	0005      	movs	r5, r0
 8003600:	0008      	movs	r0, r1
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	f7fe fecc 	bl	80023a0 <_close>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d103      	bne.n	8003614 <_close_r+0x1c>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d000      	beq.n	8003614 <_close_r+0x1c>
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	bd70      	pop	{r4, r5, r6, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	20000280 	.word	0x20000280

0800361c <_fstat_r>:
 800361c:	2300      	movs	r3, #0
 800361e:	b570      	push	{r4, r5, r6, lr}
 8003620:	4c06      	ldr	r4, [pc, #24]	; (800363c <_fstat_r+0x20>)
 8003622:	0005      	movs	r5, r0
 8003624:	0008      	movs	r0, r1
 8003626:	0011      	movs	r1, r2
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	f7fe febc 	bl	80023a6 <_fstat>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d103      	bne.n	800363a <_fstat_r+0x1e>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d000      	beq.n	800363a <_fstat_r+0x1e>
 8003638:	602b      	str	r3, [r5, #0]
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	20000280 	.word	0x20000280

08003640 <_isatty_r>:
 8003640:	2300      	movs	r3, #0
 8003642:	b570      	push	{r4, r5, r6, lr}
 8003644:	4c06      	ldr	r4, [pc, #24]	; (8003660 <_isatty_r+0x20>)
 8003646:	0005      	movs	r5, r0
 8003648:	0008      	movs	r0, r1
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	f7fe feb0 	bl	80023b0 <_isatty>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d103      	bne.n	800365c <_isatty_r+0x1c>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d000      	beq.n	800365c <_isatty_r+0x1c>
 800365a:	602b      	str	r3, [r5, #0]
 800365c:	bd70      	pop	{r4, r5, r6, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000280 	.word	0x20000280

08003664 <_lseek_r>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	0005      	movs	r5, r0
 8003668:	0008      	movs	r0, r1
 800366a:	0011      	movs	r1, r2
 800366c:	2200      	movs	r2, #0
 800366e:	4c06      	ldr	r4, [pc, #24]	; (8003688 <_lseek_r+0x24>)
 8003670:	6022      	str	r2, [r4, #0]
 8003672:	001a      	movs	r2, r3
 8003674:	f7fe fe9e 	bl	80023b4 <_lseek>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d103      	bne.n	8003684 <_lseek_r+0x20>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d000      	beq.n	8003684 <_lseek_r+0x20>
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	bd70      	pop	{r4, r5, r6, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	20000280 	.word	0x20000280

0800368c <memchr>:
 800368c:	b2c9      	uxtb	r1, r1
 800368e:	1882      	adds	r2, r0, r2
 8003690:	4290      	cmp	r0, r2
 8003692:	d101      	bne.n	8003698 <memchr+0xc>
 8003694:	2000      	movs	r0, #0
 8003696:	4770      	bx	lr
 8003698:	7803      	ldrb	r3, [r0, #0]
 800369a:	428b      	cmp	r3, r1
 800369c:	d0fb      	beq.n	8003696 <memchr+0xa>
 800369e:	3001      	adds	r0, #1
 80036a0:	e7f6      	b.n	8003690 <memchr+0x4>

080036a2 <memmove>:
 80036a2:	b510      	push	{r4, lr}
 80036a4:	4288      	cmp	r0, r1
 80036a6:	d902      	bls.n	80036ae <memmove+0xc>
 80036a8:	188b      	adds	r3, r1, r2
 80036aa:	4298      	cmp	r0, r3
 80036ac:	d308      	bcc.n	80036c0 <memmove+0x1e>
 80036ae:	2300      	movs	r3, #0
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d007      	beq.n	80036c4 <memmove+0x22>
 80036b4:	5ccc      	ldrb	r4, [r1, r3]
 80036b6:	54c4      	strb	r4, [r0, r3]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e7f9      	b.n	80036b0 <memmove+0xe>
 80036bc:	5c8b      	ldrb	r3, [r1, r2]
 80036be:	5483      	strb	r3, [r0, r2]
 80036c0:	3a01      	subs	r2, #1
 80036c2:	d2fb      	bcs.n	80036bc <memmove+0x1a>
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__malloc_lock>:
 80036c6:	4770      	bx	lr

080036c8 <__malloc_unlock>:
 80036c8:	4770      	bx	lr

080036ca <_realloc_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	0007      	movs	r7, r0
 80036ce:	000d      	movs	r5, r1
 80036d0:	0016      	movs	r6, r2
 80036d2:	2900      	cmp	r1, #0
 80036d4:	d105      	bne.n	80036e2 <_realloc_r+0x18>
 80036d6:	0011      	movs	r1, r2
 80036d8:	f7ff fa8c 	bl	8002bf4 <_malloc_r>
 80036dc:	0004      	movs	r4, r0
 80036de:	0020      	movs	r0, r4
 80036e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d103      	bne.n	80036ee <_realloc_r+0x24>
 80036e6:	f7ff fa3b 	bl	8002b60 <_free_r>
 80036ea:	0034      	movs	r4, r6
 80036ec:	e7f7      	b.n	80036de <_realloc_r+0x14>
 80036ee:	f000 f827 	bl	8003740 <_malloc_usable_size_r>
 80036f2:	002c      	movs	r4, r5
 80036f4:	4286      	cmp	r6, r0
 80036f6:	d9f2      	bls.n	80036de <_realloc_r+0x14>
 80036f8:	0031      	movs	r1, r6
 80036fa:	0038      	movs	r0, r7
 80036fc:	f7ff fa7a 	bl	8002bf4 <_malloc_r>
 8003700:	1e04      	subs	r4, r0, #0
 8003702:	d0ec      	beq.n	80036de <_realloc_r+0x14>
 8003704:	0029      	movs	r1, r5
 8003706:	0032      	movs	r2, r6
 8003708:	f7fe feac 	bl	8002464 <memcpy>
 800370c:	0029      	movs	r1, r5
 800370e:	0038      	movs	r0, r7
 8003710:	f7ff fa26 	bl	8002b60 <_free_r>
 8003714:	e7e3      	b.n	80036de <_realloc_r+0x14>
	...

08003718 <_read_r>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	0005      	movs	r5, r0
 800371c:	0008      	movs	r0, r1
 800371e:	0011      	movs	r1, r2
 8003720:	2200      	movs	r2, #0
 8003722:	4c06      	ldr	r4, [pc, #24]	; (800373c <_read_r+0x24>)
 8003724:	6022      	str	r2, [r4, #0]
 8003726:	001a      	movs	r2, r3
 8003728:	f7fe fe04 	bl	8002334 <_read>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d103      	bne.n	8003738 <_read_r+0x20>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d000      	beq.n	8003738 <_read_r+0x20>
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000280 	.word	0x20000280

08003740 <_malloc_usable_size_r>:
 8003740:	1f0b      	subs	r3, r1, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1f18      	subs	r0, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	da01      	bge.n	800374e <_malloc_usable_size_r+0xe>
 800374a:	580b      	ldr	r3, [r1, r0]
 800374c:	18c0      	adds	r0, r0, r3
 800374e:	4770      	bx	lr

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
